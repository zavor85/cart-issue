@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

@using System.Web;
@using Dynamicweb
@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Devices
@using Dynamicweb.Extensibility
@using Dynamicweb.Content
@using Dynamicweb.Security
@using Dynamicweb.Core
@using System
@using System.Web
@using System.IO
@using Dynamicweb.Rapido.Blocks
@using System.Net


@functions {
	BlocksPage masterPage = BlocksPage.GetBlockPage("Master");

	string getFontFamily(params string[] items)
	{
		var itemParent = Pageview.AreaSettings;
		foreach (var item in items)
		{
			itemParent = itemParent.GetItem(item);
			if (itemParent == null)
			{
				return null;
			}
		}

		var googleFont = itemParent.GetGoogleFont("FontFamily");
		if (googleFont == null)
		{
			return null;
		}
		return googleFont.Family.Replace(" ", "+");
	}
}

@{
    Block root = new Block
    {
        Id = "Root",
        SortId = 10,
        BlocksList = new List<Block>
        {
            new Block {
                Id = "Head",
                SortId = 10,
                SkipRenderBlocksList = true,
                Template = RenderMasterHead(),
                BlocksList = new List<Block>
                {
                    new Block {
                        Id = "HeadMetadata",
                        SortId = 10,
                        Template = RenderMasterMetadata(),
                    },
                    new Block {
                        Id = "HeadCss",
                        SortId = 20,
                        Template = RenderMasterCss(),
                    },
                    new Block {
                        Id = "HeadManifest",
                        SortId = 30,
                        Template = RenderMasterManifest(),
                    }
                }
            },
            new Block {
                Id = "Body",
                SortId = 20,
                SkipRenderBlocksList = true,
                Template = RenderMasterBody(),
                BlocksList = new List<Block>
                {
                    new Block()
                    {
                        Id = "Master",
                        SortId = 10,
                        BlocksList = new List<Block> {
                            new Block {
                                Id = "MasterTopSnippets",
                                SortId = 10
                            },
                            new Block {
                                Id = "MasterMain",
                                SortId = 20,
                                Template = RenderMain(),
                                SkipRenderBlocksList = true,
                                BlocksList = new List<Block> {
                                    new Block {
                                        Id = "MasterHeader",
                                        SortId = 10,
                                        Template = RenderMasterHeader(),
                                        SkipRenderBlocksList = true
                                    },
                                    new Block {
                                        Id = "MasterPageContent",
                                        SortId = 20,
                                        Template = RenderPageContent()
                                    }
                                }
                            },
                            new Block {
                                Id = "MasterFooter",
                                SortId = 30
                            },
                            new Block {
                                Id = "MasterReferences",
                                SortId = 40
                            },
                            new Block {
                                Id = "MasterBottomSnippets",
                                SortId = 50,
                                BlocksList = new List<Block> {
                                    new Block {
                                        Id = "iOsTabletFix",
                                        SortId = 10,
                                        Template = RenderIosTabletFix()
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    masterPage.Add(root);
}

@* Include the required Grid builder (Contains the methods @RenderBlockList and @RenderBlock) *@
@Include("Components/GridBuilder.cshtml")

@* Include the components *@
@Include("Components/GeneralComponents.cshtml")
@Include("Components/ArticleComponents.cshtml")


@* Include the Blocks for the page *@
@Include("MasterBlocks/TopSnippets.cshtml")
@Include("MasterBlocks/Login.cshtml")

@if (Pageview.Device.ToString() == "Mobile" || Pageview.Device.ToString() == "Tablet")
{
    <text>@Include("MasterBlocks/MobileHeader.cshtml")</text>
    <text>@Include("MasterBlocks/MobileNavigation.cshtml")</text>
}
else
{
    <text>@Include("MasterBlocks/Header.cshtml")</text>
}

@Include("MasterBlocks/ImpersonationBar.cshtml")
@Include("MasterBlocks/MiniCart.cshtml")
@Include("MasterBlocks/AddToCartNotification.cshtml")
@Include("MasterBlocks/Footer.cshtml")
@Include("MasterBlocks/References.cshtml")
@Include("MasterBlocks/SearchTemplates.cshtml")
@Include("MasterBlocks/BottomSnippets.cshtml")
@Include("MasterBlocks/Custom__Blocks.cshtml")


@functions { 
    public class ManifestIcon
    {
        public string src { get; set; }
        public string type { get; set; }
        public string sizes { get; set; }
    }

    public class Manifest
    {
        public string name { get; set; }
        public string short_name { get; set; }
        public string start_url { get; set; }
        public string display { get; set; }
        public string background_color { get; set; }
        public string theme_color { get; set; }
        public List<ManifestIcon> icons { get; set; }
    }
}

<!DOCTYPE html>

<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName">



@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(masterPage.BlocksRoot.BlocksList)



@helper RenderMasterHead() { 
    List<Block> subBlocks = this.masterPage.GetBlockListById("Head").OrderBy(item => item.SortId).ToList();

    <head>
       <!-- Rapido version 3.4.2 -->

       @RenderBlockList(subBlocks)
    </head>   
}

@helper RenderMasterMetadata() { 
    var swatches = new Dynamicweb.Content.Items.ColorSwatchService();
    var brandColors = swatches.GetColorSwatch(1);
    string brandColorOne = brandColors.Palette["BrandColor1"];

    if (!String.IsNullOrEmpty(Model.Area.Item.GetItem("Settings").GetString("AppName")) && Model.Area.Item.GetItem("Settings").GetFile("AppIcon") != null) {
        Manifest manifest = new Manifest
        {
            name = Model.Area.Item.GetItem("Settings").GetString("AppName"),
            short_name = !String.IsNullOrEmpty(Model.Area.Item.GetItem("Settings").GetString("AppShortName")) ? Model.Area.Item.GetItem("Settings").GetString("AppShortName") : Model.Area.Item.GetItem("Settings").GetString("AppName"),
            start_url = "/",
            display = "standalone",
            background_color = Model.Area.Item.GetItem("Settings").GetString("AppBackgroundColor"),
            theme_color = Model.Area.Item.GetItem("Settings").GetString("AppThemeColor")
        };

        manifest.icons = new List<ManifestIcon> {
            new ManifestIcon {
                src = "/Admin/Public/GetImage.ashx?width=192&height=192&crop=5&image=" + Model.Area.Item.GetItem("Settings").GetFile("AppIcon").PathUrlEncoded,
                sizes = "192x192",
                type = "image/png"
            },
            new ManifestIcon {
                src = "/Admin/Public/GetImage.ashx?width=512&height=512&crop=5&image=" + Model.Area.Item.GetItem("Settings").GetFile("AppIcon").PathUrlEncoded,
                sizes = "512x512",
                type = "image/png"
            },
            new ManifestIcon {
                src = "/Admin/Public/GetImage.ashx?width=1024&height=1024&crop=5&image=" + Model.Area.Item.GetItem("Settings").GetFile("AppIcon").PathUrlEncoded,
                sizes = "1024x1024",
                type = "image/png"
            }
        };

        string manifestFilePath = HttpContext.Current.Request.MapPath("/Files/Templates/Designs/Rapido/manifest.json");
        string manifestJSON = Newtonsoft.Json.JsonConvert.SerializeObject(manifest);
        string currentManifest = File.ReadAllText(manifestFilePath);

        if (manifestJSON != currentManifest)
        {
            File.WriteAllText(manifestFilePath, manifestJSON);
        }
    }

    <meta charset="utf-8" />
    <title>@Model.Title</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="robots" content="index, follow">
    <meta name="theme-color" content="@brandColorOne" />

    if (Model.MetaTags != null && !Model.MetaTags.Contains("og:image") && Model.PropertyItem != null && Model.PropertyItem.GetFile("OpenGraphImage") != null)
    {
        Pageview.Meta.AddTag("og:image", string.Format("{0}://{1}{2}", Dynamicweb.Context.Current.Request.Url.Scheme, HttpContext.Current.Request.Url.Host, Model.PropertyItem.GetFile("OpenGraphImage")));
    }

    if (!Model.MetaTags.Contains("og:description") && !string.IsNullOrEmpty(Model.Description))
    {
        Pageview.Meta.AddTag("og:description", Model.Description);
    }

    Pageview.Meta.AddTag("og:title", Model.Title);
    Pageview.Meta.AddTag("og:site_name", Model.Name);
    Pageview.Meta.AddTag("og:url", HttpContext.Current.Request.Url.ToString());
    Pageview.Meta.AddTag("og:type", "Website");
    
    if (!string.IsNullOrEmpty(Model.Area.Item.GetItem("Settings").GetString("FacebookAppID"))) {
        Pageview.Meta.AddTag("fb:app_id", Model.Area.Item.GetItem("Settings").GetString("FacebookAppID"));
    }

    @Model.MetaTags
}

@helper RenderMasterCss() { 
    var fonts = new string[] {
    getFontFamily("Layout", "HeaderFont"),
    getFontFamily("Layout", "SubheaderFont"),
    getFontFamily("Layout", "TertiaryHeaderFont"),
    getFontFamily("Layout", "BodyText"),
    getFontFamily("Layout", "Header", "ToolsFont"),
    getFontFamily("Layout", "Header", "NavigationFont"),
    getFontFamily("Layout", "MobileNavigation", "Font"),
    getFontFamily("ProductList", "Facets", "HeaderFont"),
    getFontFamily("ProductPage", "PriceFontDesign"),
    getFontFamily("Ecommerce", "SaleSticker", "Font"),
    getFontFamily("Ecommerce", "NewSticker", "Font"),
    getFontFamily("Ecommerce", "CustomSticker", "Font")
    };

    //Google fonts
    var family = string.Join("%7C", fonts.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));

    <link rel="preconnect" href="https://fonts.googleapis.com/css?family=@family" rel="stylesheet">

    string autoCssLink = "/Files/Templates/Designs/Rapido/css/rapido/rapido_" + Model.Area.ID.ToString() + ".min.css?ticks=" + Model.Area.UpdatedDate.Ticks;
    string favicon = Model.Area.Item.GetItem("Layout").GetFile("LogoFavicon") != null ? Model.Area.Item.GetItem("Layout").GetFile("LogoFavicon").Path : "/Files/Images/favicon.png";
    bool useFontAwesomePro = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetBoolean("UseFontAwesomePro");
    string fontAwesomeCssLink = "/Files/Templates/Designs/Rapido/css/fonts/FontAwesomeFree/css/fontawesome-all.min.css";
    if (useFontAwesomePro)
    {
        fontAwesomeCssLink = "/Files/Templates/Designs/Rapido/css/fonts/FontAwesomePro/css/fontawesome-all.min.css";
    }

    //Favicon
    <link href="@favicon" rel="icon" type="image/png">

    //Base (Default, wireframe) styles
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/base/base.min.css?ver=1.01" type="text/css">

    //Rapido Css from Website Settings
    <link rel="stylesheet" id="rapidoCss" href="@autoCssLink" type="text/css">

    //Ignite Css (Custom site specific styles) 
    <link rel="stylesheet" id="igniteCss" type="text/css" href="/Files/Templates/Designs/Rapido/css/ignite/ignite.min.css">

    //Font awesome
    <link rel="stylesheet" href="@fontAwesomeCssLink" type="text/css">

    //Flag icon
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/fonts/flag-icon.min.css" type="text/css">

     //Flex css
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/flex.css?ver=1.02" type="text/css">

     <!-- Link Swiper's CSS -->
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/Slider/swiper-bundle.min.css">


    <script src="/Files/Templates/Designs/Rapido/Slider/swiper-bundle.min.js"></script>

    
    PushPromise(favicon);
    PushPromise(fontAwesomeCssLink);
    PushPromise("/Files/Templates/Designs/Rapido/css/base/base.min.css");
    PushPromise(autoCssLink);
    PushPromise("/Files/Templates/Designs/Rapido/css/ignite/ignite.min.css");
    PushPromise("/Files/Images/placeholder.gif");
    PushPromise("/Files/Templates/Designs/Rapido/css/fonts/flag-icon.min.css");
}

@helper RenderMasterManifest() { 
    if (!String.IsNullOrEmpty(Model.Area.Item.GetItem("Settings").GetString("AppName")))
    {
        <link rel="manifest" href="/Files/Templates/Designs/Rapido/manifest.json">
        PushPromise("/Files/Templates/Designs/Rapido/manifest.json");
    } 
}

@helper RenderMasterBody() { 
    List<Block> subBlocks = this.masterPage.GetBlockListById("Body").OrderBy(item => item.SortId).ToList();
    string designLayout = Model.PropertyItem.GetItem("CustomSettings") != null ? Model.PropertyItem.GetItem("CustomSettings").GetString("DesignLayout") != null ? Model.PropertyItem.GetItem("CustomSettings").GetList("DesignLayout").SelectedValue : "" : "";
    if (!String.IsNullOrEmpty(designLayout)) {
        designLayout = "class=\"" + designLayout + "\"";
    }

    <body @designLayout>
       @RenderBlockList(subBlocks)
    </body>   
}

@helper RenderMasterHeader()
{ 
    List<Block> subBlocks = this.masterPage.GetBlockListById("MasterHeader").OrderBy(item => item.SortId).ToList();
    bool isNavigationStickyMenu = Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet" && Model.Area.Item.GetItem("Layout").GetItem("Header").GetBoolean("StickyTop");
    string stickyTop = isNavigationStickyMenu ? "top-container--sticky" : "";

    <header class="top-container @stickyTop no-print dw-mod" id="Top">
        @RenderBlockList(subBlocks)
    </header>
}


@helper RenderMain()
{
    List<Block> subBlocks = this.masterPage.GetBlockListById("MasterMain").OrderBy(item => item.SortId).ToList();

    var pageBackground = "";

    var pageBackgroundColor = Model.PropertyItem.GetString("PageBackgroundColor") != null ? Model.PropertyItem.GetString("PageBackgroundColor") : "";


    if ( Model.PropertyItem.GetFile("PageBackgroundImage") != null){

        if (Pageview.Device.ToString() == "Mobile"){

        pageBackground += "background-image: url(/admin/public/getimage.ashx?Crop=0&Image=" + Model.PropertyItem.GetFile("PageBackgroundImage") + "&Format=webp&Width=600&Quality=90)";
    
        } else {
            pageBackground += "background-image: url(/admin/public/getimage.ashx?Crop=0&Image=" + Model.PropertyItem.GetFile("PageBackgroundImage") + "&Format=webp&Width=1200&Quality=90)";

        }
    } 

    else if ( pageBackgroundColor != ""){
        pageBackground += "background-color:" + pageBackgroundColor + ";background-image:none;"; 
    } 
    
    else if (Model.Area.Item.GetItem("Custom").GetFile("BackgroundImageCustom") != null){

        if (Pageview.Device.ToString() == "Mobile"){

        pageBackground += "background-image: url(/admin/public/getimage.ashx?Crop=0&Image=" + Model.Area.Item.GetItem("Custom").GetFile("BackgroundImageCustom") + "&Format=webp&Width=600&Quality=90)";
    
        } else {
            pageBackground += "background-image: url(/admin/public/getimage.ashx?Crop=0&Image=" + Model.Area.Item.GetItem("Custom").GetFile("BackgroundImageCustom") + "&Format=webp&Width=1200&Quality=90)";

        }
    } 


    
     
  
    <main style="@pageBackground" class="site dw-mod">
        @RenderBlockList(subBlocks)
    </main>
}

@helper RenderPageContent()
{
    bool isNavigationStickyMenu = Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet" && Model.Area.Item.GetItem("Layout").GetItem("Header").GetBoolean("StickyTop");
    string pagePos = isNavigationStickyMenu ? "js-page-pos" : "";

    <div id="Page" class="page @pagePos">
        <div id="content">
            @RenderSnippet("Content")
        </div>
    </div>
}

@* Hack to support nested helpers *@
@SnippetStart("Content")
@ContentPlaceholder()
@SnippetEnd("Content")

@helper RenderIosTabletFix() { 
    if (Pageview.Device != Dynamicweb.Frontend.Devices.DeviceType.Tablet && Pageview.Platform != Dynamicweb.Frontend.Devices.PlatformType.Ios)
    {
        <script>
            let isIpadIOS = (/iPad/.test(navigator.platform) || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1)) && !window.MSStream;
            if (isIpadIOS) {
                var separator = (window.location.href.indexOf("?") === -1) ? "?" : "&";
                window.location.href = window.location.href + separator + "DeviceType=Tablet&PlatformType=Ios";
            }
        </script>
    }
}
    
</html>

