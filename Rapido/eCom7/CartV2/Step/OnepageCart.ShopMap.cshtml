@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Text.RegularExpressions
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using System.Linq
@using Dynamicweb.Ecommerce.Products
@using Dynamicweb.Ecommerce.Orders

@{
    var settings = Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout");
    var hideVoucher = settings.GetBoolean("HideVoucher");
    var showVariantMatrix = Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetString("ShowVariantMatrixes") != null ? Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetBoolean("ShowVariantMatrixes") : Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("EnableVariantMatrix"); //Support old setting
    bool hasTaxSettings = Dynamicweb.Rapido.Services.Countries.HasTaxSettings(GetString("Ecom:Order.ID"));
    bool pointShop = Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("PointShopOnly");
    bool isPricesWithVATEnabled = Dynamicweb.Ecommerce.Common.Context.DisplayPricesWithVat;
    string paymentMethod = !string.IsNullOrEmpty(GetString("Ecom:Order.PaymentMethod")) ? GetString("Ecom:Order.PaymentMethod") : Translate("Payment");
    string shippingMethod = !string.IsNullOrEmpty(GetString("Ecom:Order.ShippingMethod")) ? GetString("Ecom:Order.ShippingMethod") : Translate("Delivery");
    bool useGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));
    bool defaultPriceWithVat = GetGlobalValue("Global:eCommerce.PricesWithVat") == "True" ? true : false;   

    string masterProductsID = "";
    var orderlineService = Dynamicweb.Ecommerce.Services.OrderLines;
    var currency = Dynamicweb.Ecommerce.Common.Context.Currency;
    var orderService = Dynamicweb.Ecommerce.Services.Orders;
    var order = orderService.GetById(GetString("Ecom:Order.ID"));

    int numberofservices = 0;
    int numberofproducts = GetInteger("Ecom:Order.OrderLines.TotalProductQuantity");
}


@foreach (LoopItem masterProduct in GetLoop("MasterProducts")) {
    string productId = masterProduct.GetString("Ecom:Product.ID");
    masterProductsID += productId + " ";
}

@foreach (LoopItem orderLinesCnt in GetLoop("OrderLines")) {
    foreach (LoopItem orderlinefield in orderLinesCnt.GetLoop("Order.OrderLineFields")){
          if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductId"){
              numberofservices+=orderLinesCnt.GetInteger("Ecom:Order:OrderLine.Quantity");
              numberofproducts-=orderLinesCnt.GetInteger("Ecom:Order:OrderLine.Quantity");
          }   
    }
}

@foreach (LoopItem orderLinesService in GetLoop("OrderLines")) {
    string ServiceForProductId = "";
    foreach (LoopItem orderlinefield in orderLinesService.GetLoop("Order.OrderLineFields")){
				if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductId"){
					ServiceForProductId = orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.Value");

                    if (!masterProductsID.Contains(ServiceForProductId)){
                      
                          var orderlineObject = orderlineService.GetById(orderLinesService.GetString("Ecom:Order:OrderLine.Id"), currency);
                          <text>@orderlineObject.Product.Name</text>
                          orderlineObject.Delete();
                          orderService.ClearCache(GetString("Ecom:Order.ID")); 
                          orderService.ClearCachedPrices(order);

                          <script>window.location.reload();</script>
                    
                    }

                   
				}   
			}
    }





<section class="cart">
    <form method="post" class="cart__form" id="CheckoutForm">
        @if (Pageview.Device.ToString() != "Mobile") {
            <header class="cart__header u-flex u-flex--align-center u-justify-content--between u-margin-bottom--lg">
                <div class="cart__header-item">
                    <h1>@Translate("Cart")</h1>
                </div>
                <div class="cart__header-item u-flex u-flex--align-center">
                    @RenderButtons()
                </div>
            </header>
        } else {
            <header class="cart__header u-flex u-flex--align-center u-justify-content--between u-margin-bottom--lg">
                <div class="cart__header-item">
                    <h1>@Translate("Cart")</h1>
                </div>
                <div class="u-margin-top">
                    @Render(new Button {
        Title = Translate("Checkout"),
        Name = GetString("CartV2.NextStepButtonName"),
        Icon = new Icon {
            Prefix = "fal",
            Name = "fa-arrow-right",
        },
        ButtonLayout = ButtonLayout.Primary,
        ButtonType = ButtonType.Submit,
        OnClick = "Buttons.LockButton(event, false, false)",
        CssClass = "u-no-margin",
    })
                </div>
            </header>
        }


        @RenderOrdersMaster()

        <table class="table--small table--condensed u-margin-left--auto">
            <tbody>
                @if ( !hideVoucher ) {
                    <tr>
                        <td colspan="2">
                            <label for="voucher" class="cart__expandable u-no-margin">@Render(new Button{ ButtonType = ButtonType.Button, Title = Translate("Add a voucher code"), ButtonLayout = ButtonLayout.Clean, CssClass = "u-no-margin", Icon = new Icon { Prefix = "fal", Name = "fa-plus-circle", LabelPosition = IconLabelPosition.After } })</label>
                            <input type="checkbox" id="voucher" class="expand-trigger js-remember-state">
                            <div class="expand-container">
                                <div class="expand-container__content u-flex">
                                    @Render(new TextField { Placeholder = Translate("Enter voucher code"), Name = "EcomOrderVoucherCode", Id = "EcomOrderVoucherCode", OnKeyUp = "checkEmpty();", Value = GetString("Ecom:Order.Customer.VoucherCode"), WrapperCssClass = "u-no-margin u-margin-right--lg" })
                                    @Render(new Button { ButtonType = ButtonType.Submit, Id = "EcomOrderVoucherApply", Title = Translate("Apply"), CssClass = "btn--condensed u-no-margin" })
                                </div>
                            </div>
                        </td>
                    </tr>
                }
                <tr>
                    <td>@Translate("Total qty"):</td>
                    <td>@numberofproducts</td>
                </tr>
                @if (GetInteger("Ecom:Order.PaymentFee.Price.Value") != 0 || GetInteger("Ecom:Order.ShippingFee.Price.Value") != 0 || hasTaxSettings) {
                    if (!Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetBoolean("HideSubtotal"))
                    {
                        <tr>
                            <td>@Translate("Subtotal"):</td>
                            <td>@GetString("Ecom:Order.PriceWithoutFees.PriceFormatted")</td>
                        </tr>
                    }
                }
                @if (GetInteger("Ecom:Order.PaymentFee.Price.Value") != 0) {
                    <tr>
                        <td>@paymentMethod:</td>
                        <td>@GetString("Ecom:Order.PaymentFee")</td>
                    </tr>
                } 
                @if (GetInteger("Ecom:Order.ShippingFee.Price.Value") != 0) {
                    <tr>
                        <td>@shippingMethod:</td>
                        <td>@GetString("Ecom:Order.ShippingFee")</td>
                    </tr>
                }
                @if (hasTaxSettings)
                {
                    string totalTaxes = GetDouble("Ecom:Order.Taxes.Total.Price") != 0 ? GetString("Ecom:Order.Taxes.Total") : "-";

                    <tr>
                        <td >@Translate("Sales Tax"):</td>
                        <td class="u-ta-right">@totalTaxes</td>
                    </tr>
                }
                @if(defaultPriceWithVat){
                <tr class="u-bold u-border-top--bold">
                    <td>@Translate("Total"):</td>
                    <td>@GetString("Ecom:Order.OrderLines.Total.Price")</td>
                </tr>
                }else{
                <tr class="u-bold u-border-top--bold">
					<td>@Translate("Total") <small>(@Translate("excl. VAT"))</small> :</td>
                    <td>@GetString("Ecom:Order.OrderLines.Total.PriceWithoutVAT")</td>
                </tr>
                }
                @if (!pointShop && !hasTaxSettings)
                {
                    <tr class="u-ta-right">
                        <td class="u-no-border" colspan="2">
                            <div>
                                <small>@Translate("VAT") (@GetString("Ecom:Order.PriceWithoutFees.VATPercentFormatted")):</small>
                                <small>@GetString("Ecom:Order.OrderLines.Total.PriceVAT")</small>
                            </div>

                            @if (isPricesWithVATEnabled)
                            {    
                                <div>
                                    <small>@Translate("Total price without VAT"):</small>
                                    <small>@GetString("Ecom:Order.OrderLines.Total.PriceWithoutVAT")</small>
                                </div>
                            }
                            else
                            {
                                <div>
                                    <small>@Translate("Total price with VAT"):</small>
                                    <small>@GetString("Ecom:Order.OrderLines.Total.PriceWithVAT")</small>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="btn__wrapper cart__footer">
            <div class="u-pull--right">
                @RenderButtons()
            </div>
        </div>
    </form>
</section>



@helper RenderButtons() {
    string buttonLabel = Pageview.Device.ToString() != "Mobile" ? Translate("Sign in & checkout") : Translate("Sign in");

    if ( Pageview.User == null ) {
        <label for="SignInModalTrigger" class="btn btn--secondary u-no-margin dw-mod js-signinmodal">@buttonLabel</label>
        <span class="cart__header-divider u-margin-left--lg u-margin-right--lg">@Translate("or")</span>
    }

    @Render(new Button {
        Title = Translate("Checkout"),
        Name = GetString("CartV2.NextStepButtonName"),
        Icon = new Icon {
            Prefix = "fal",
            Name = "fa-arrow-right",
        },
        ButtonLayout = ButtonLayout.Primary,
        ButtonType = ButtonType.Submit,
        OnClick = "Buttons.LockButton(event, false, false)",
        CssClass = "u-no-margin",
    })
}


@helper RenderOrdersMaster() {  
    var settings = Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout");
    var showVariantMatrix = Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetString("ShowVariantMatrixes") != null ? Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetBoolean("ShowVariantMatrixes") : Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("EnableVariantMatrix"); //Support old setting

    <div class="u-color-light--bg u-no-padding--xs dw-mod">
        <table class="table table--condensed table--no-top-border dw-mod">
            @if ( !showVariantMatrix ) {
                @RenderOrderLines()
            } else {
                @RenderVariantMatrix()
            }
        </table>
    </div>
}


@helper RenderOrderLines() {
       bool defaultPriceWithVat = GetGlobalValue("Global:eCommerce.PricesWithVat") == "True" ? true : false;    

    List<LoopItem> orderLines = GetLoop("OrderLines");
    
    if ( orderLines != null ) {
        string qtyLabel = Pageview.Device.ToString() != "Mobile" ? Translate("Total qty") : Translate("Qty");
        string priceLabel = Pageview.Device.ToString() != "Mobile" ? Translate("Total price") : Translate("Total");

        <thead>
            <tr>
                <th></th>
                @if (Pageview.Device.ToString() != "Mobile")
                {
                    <th>@Translate("Product number")</th>
                    <th>@Translate("Name")</th>
                } else {
                    <th width="120">@Translate("Name")</th>
                } 
                <th class="u-ta-right">@qtyLabel</th>
                @if(defaultPriceWithVat){
                <th class="u-ta-right">@priceLabel</th>
				}else{
                <th class="u-ta-right">@priceLabel <small>(@Translate("excl. VAT"))</small></th>
                }
                <th width="24"></th>
            </tr>
        </thead>

        foreach ( var product in orderLines ) {
            if (product.GetBoolean("Ecom:Order:OrderLine.IsProduct"))
            {

                <tr class="table__row--bottom-line">
                    @RenderProductGenericData(product)
                    <td class="u-va-middle u-ta-right u-w80px">
                        @if (Pageview.Device.ToString() != "Mobile")
                        {
                            <div class="margin-sm margin-position-top">
                                @Render(new NumberField {
                                    Id = product.GetString("Ecom:Order:OrderLine.Id"),
                                    Min = 0,
                                    OnChange = "document.getElementById('CheckoutForm').submit()",
                                    Name = "QuantityOrderLine" + product.GetString("Ecom:Order:OrderLine.Id"),
                                    Value = product.GetString("Ecom:Order:OrderLine.Quantity")
                                })
                            </div>
                        } else {
                            @product.GetString("Ecom:Order:OrderLine.Quantity");
                        }
                    </td>
                    @if(defaultPriceWithVat){
                    <td class="u-va-middle u-ta-right">@product.GetString("Ecom:Order:OrderLine.TotalPrice") </td>
                    }else{
                    <td class="u-va-middle u-ta-right">@product.GetString("Ecom:Order:OrderLine.Price")</td>
                    }
                    @RenderProductDelete(product)
                </tr>
            } else if (product.GetBoolean("Ecom:Order:OrderLine.IsDiscount")) {
                int colspan = Pageview.Device.ToString() != "Mobile" ? 4 : 3;

                <tr class="table__row--bottom-line">
                    <td colspan="@colspan" class="u-va-middle">@product.GetString("Ecom:Order:OrderLine.ProductName")</td>
                    <td class="u-va-middle u-ta-right">@product.GetString("Ecom:Order:OrderLine.TotalPrice")</td>
                    <td>&nbsp;</td>
                </tr>
            }
        }
    }
    

}

@helper RenderVariantMatrix() {
    string qtyLabel = Pageview.Device.ToString() != "Mobile" ? Translate("Total qty") : Translate("Qty");
    string priceLabel = Pageview.Device.ToString() != "Mobile" ? Translate("Total price") : Translate("Total");

    <thead>
        <tr>
            <th width="32"></th>
            <th></th>
            @if (Pageview.Device.ToString() != "Mobile")
            {
                <th>@Translate("Product number")</th>
            }
            <th>@Translate("Name")</th>
            <th class="u-ta-right">@qtyLabel</th>
            <th class="u-ta-right">@priceLabel</th>
            <th></th>
        </tr>
    </thead>
       

        
    foreach (LoopItem masterProduct in GetLoop("MasterProducts")) {
        string productId = masterProduct.GetString("Ecom:Product.ID");
        List<LoopItem> variantInfos = masterProduct.GetLoop("VariantInfos");


// Removes DeliveryService lines
	string ServiceForProductId = "";
	foreach (LoopItem orderLinesService in GetLoop("OrderLines")) {
		if(masterProduct.GetString("Ecom:Product.ID") == orderLinesService.GetString("Ecom:Product.ID")){
			foreach (LoopItem orderlinefield in orderLinesService.GetLoop("Order.OrderLineFields")){
				if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductId"){
					ServiceForProductId = orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.Value");
				}   
			}
		}
	}
		  
// Removes DeliveryService Lines
if(string.IsNullOrEmpty(ServiceForProductId)){
    
        
        <tr class="table__row--bottom-line" t="@ServiceForProductId">
            <td class="u-va-middle">
                @if (variantInfos.Count != 0) {
                    @Render(new Button {
                        ButtonType = ButtonType.Button,
                        ButtonLayout = ButtonLayout.LinkClean,
                        CssClass = "cart__btn btn--expand u-color-gray js-matrix-trigger",
                        Icon = new Icon {
                            Prefix = "fal",
                            Name = "fa-plus-circle matrix__icon"
                        },
                        ExtraAttributes = new Dictionary<string, string>{
                            { "data-id", "Matrix_" + productId }
                        }
                    }) 
                }
            </td>
            @RenderProductGenericData(masterProduct)
            <td class="u-va-middle u-ta-right">@masterProduct.GetString("TotalQuantity")</td>
            <td class="u-va-middle u-ta-right">@masterProduct.GetString("TotalPrice")</td>
            @RenderProductDelete(masterProduct)
        </tr>
        <tr class="u-hidden dw-mod" id="Matrix_@productId">
            <td></td>
            <td colspan="6" class="u-no-padding">
                <div>
                    @RenderVariantInfoMatrix(variantInfos, productId, Pageview.Page.ID.ToString(), masterProduct.GetDouble("TotalPrice"))
                </div>
            </td>
        </tr>
        
	    }// Removes DeliveryService Lines end 
        
    }
}


@helper RenderProductGenericData( LoopItem product = null ) {
    string productId = product.GetString("Ecom:Product.ID");
    string productLink = "/" + Regex.Replace(product.GetString("Ecom:Product.LinkGroup.Clean"), @"\?ID=\d*\&", "?ID=" + GetPageIdByNavigationTag("ProductsPage") + "&");
    productLink += !string.IsNullOrEmpty(product.GetString("Ecom:Order:OrderLine.ProductVariantID")) ? "&VariantID=" + product.GetString("Ecom:Order:OrderLine.ProductVariantID") : "";
    string productName = product.GetString("Ecom:Product.Name");
    productName += !string.IsNullOrEmpty(product.GetString("Ecom:Product.VariantText")) ? ", " + product.GetString("Ecom:Product.VariantText") : "";
    productName += !string.IsNullOrEmpty(product.GetString("Ecom:Order:OrderLine.UnitName")) ? ", " + product.GetString("Ecom:Order:OrderLine.UnitName") : "";



// @{ // ServiceForProduct

	string ServiceForProductNumber = "";
	string ServiceForProductId = "";
       
	foreach (LoopItem orderLines in GetLoop("OrderLines")) {
		if(product.GetString("Ecom:Product.ID") == orderLines.GetString("Ecom:Product.ID")){
			foreach (LoopItem orderlinefield in orderLines.GetLoop("Order.OrderLineFields")){
				if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductNumber"){
					ServiceForProductNumber = orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.Value");
				}   
				if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductId"){
					ServiceForProductId = orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.Value");
				}   
			}
		}
	}
// }

	
// @{ // shippingOptions
         
    int shippingOptions = 0;
    string shippingOptionsName = "";
    string shippingOptionsGroupID = "";       
    string shippingOptionsGroup = "";       
        
    foreach (LoopItem associatedGroups in product.GetLoop("AssociatedGroups")){
        if(associatedGroups.GetInteger("Ecom:Group:Field.ShippingOptions")>shippingOptions){
           shippingOptions = associatedGroups.GetInteger("Ecom:Group:Field.ShippingOptions");
           shippingOptionsGroupID = associatedGroups.GetString("Ecom:Group.ID");
           shippingOptionsGroup = associatedGroups.GetString("Ecom:Group.Name");
        }
    }
    if(product.GetInteger("Ecom:Product:Field.ShippingOptions.Value")>0){
        shippingOptions = product.GetInteger("Ecom:Product:Field.ShippingOptions.Value");
        shippingOptionsGroupID = "";
        shippingOptionsGroup = "Product";
    }
    foreach (LoopItem options in product.GetLoop("ShippingOptions.Options")){
        if(options.GetInteger("ShippingOptions.Option.Value")==shippingOptions){
            shippingOptionsName = @options.GetString("ShippingOptions.Option.Name");
        }
    }
// }     
      

// @{ // DeliveryServiceLevel (need shippingOptions)

			//	DeliveryService GroupID = GROUP895  
			//  isDeliveryServiceLevel > 0		
			//	ProductFieldValue productShippingOptionField = product.ProductFieldValues.SingleOrDefault(productFieldValue => productFieldValue.ProductField.SystemName == "ShippingOptions");
			//	var value = productShippingOptionField.Value.ToString();
			//	bool hasValue = productShippingOptionField.HasValue;

	string DeliveryServiceGroup = "GROUP895";
	string ProdId = product.GetString("Ecom:Product.ID");
	string ProdNumber = product.GetString("Ecom:Product.Number");
	string ProdOrderlineID = "";
	int ProdQuantity = 0;
	string DeliveryServiceOrderlineID = "";
	string DeliveryServiceOrderlineID_List = "";
	string DeliveryServiceDeleteByOrderlineID_OnClick = "";
	string DeliveryServiceDeleteByOrderlineID_HTML = "";
	string DeliveryServiceSelection_HTML = "";
	
	int ActivDeliveryServiceLevel = 0;
	string ActivDeliveryServiceName = "";
	string ActivDeliveryServiceItemPrice = "";
	int ActivDeliveryServiceQuantity = 0;
	string ActivDeliveryServicePrice = "";
		
	int DS_cnt = 0;
       
	foreach (LoopItem orderLines in GetLoop("OrderLines")) {



		if(product.GetString("Ecom:Product.ID") == orderLines.GetString("Ecom:Product.ID")){
			ProdQuantity = orderLines.GetInteger("Ecom:Order:OrderLine.Quantity");
			ProdOrderlineID = orderLines.GetString("Ecom:Order:OrderLine.Id");
		}

// search for DeliveryService that belong to this product under orderLines loop
			
		foreach (LoopItem orderlinefield in orderLines.GetLoop("Order.OrderLineFields")){
			if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductId" && orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.Value") == ProdId){
				DS_cnt++;
				DeliveryServiceOrderlineID = orderLines.GetString("Ecom:Order:OrderLine.Id");
				DeliveryServiceOrderlineID_List += orderLines.GetString("Ecom:Order:OrderLine.Id") + ",";
				

                //Do the same with bit different approach
                // changed = to += so it adds all that it need to delete

				DeliveryServiceDeleteByOrderlineID_OnClick += "Cart.ChangeQuantity("+ Pageview.Page.ID.ToString() + ", '" + DeliveryServiceOrderlineID + "', 0);";


// tried to add a delay        
//        DeliveryServiceDeleteByOrderlineID_OnClick += "setTimeout(Cart.ChangeQuantity("+ Pageview.Page.ID.ToString() + ", '" + DeliveryServiceOrderlineID + "', 0),"+DS_cnt+"000);";
				
                DeliveryServiceDeleteByOrderlineID_HTML += "<a onclick=\""+DeliveryServiceDeleteByOrderlineID_OnClick+"\">"+DeliveryServiceOrderlineID+"</a> ";

				ActivDeliveryServiceLevel = orderLines.GetInteger("Ecom:Product:Field.isDeliveryServiceLevel");
				ActivDeliveryServiceName = orderLines.GetString("Ecom:Product.Name");
				ActivDeliveryServiceItemPrice = orderLines.GetString("Ecom:Product.Price");
				ActivDeliveryServiceQuantity = orderLines.GetInteger("Ecom:Order:OrderLine.Quantity");
				ActivDeliveryServicePrice = orderLines.GetString("Ecom:Order:OrderLine.Price");
				
			}   
		}
		
	}




	Dynamicweb.Ecommerce.Products.ProductService productService = new Dynamicweb.Ecommerce.Products.ProductService();
	var shippingGroupProducts = productService.GetProductsByGroupId(DeliveryServiceGroup, false, "LANG2", false); // GetProductsByGroupId(groupID, onlyActive, languageId, useAssortment)
	foreach (Product ShipList in shippingGroupProducts){
		int productDeliveryServiceLevelInt = Convert.ToInt32(ShipList.ProductFieldValues.SingleOrDefault(productFieldValue => productFieldValue.ProductField.SystemName == "isDeliveryServiceLevel").Value.ToString());
		if(productDeliveryServiceLevelInt > 0 && shippingOptions >= productDeliveryServiceLevelInt){
		


// building the link for adding Delivery to product
	string DeliveryServiceSelection_OnClick = "Cart.AddToCart(event, {id: '"+ShipList.Id+"',variantId: '',unitId: '',ServiceForProductId: '"+ProdId+"',ServiceForProductNumber: '"+ProdNumber+"',quantity: '"+ProdQuantity+"'});";

    if (DeliveryServiceDeleteByOrderlineID_OnClick != ""){
         DeliveryServiceSelection_OnClick += DeliveryServiceDeleteByOrderlineID_OnClick;
    } else {
         DeliveryServiceSelection_OnClick += "Cart.UpdateCart();";
    }

   

// for now just output


	
	if(productDeliveryServiceLevelInt == ActivDeliveryServiceLevel){
         DeliveryServiceSelection_HTML += "<input type='radio' value='"+ productDeliveryServiceLevelInt +"' id='select-"+ productDeliveryServiceLevelInt +"' checked data-status='old' name='deliveryServicesRadio'> ";
        
    } else {
        DeliveryServiceSelection_HTML += "<a style='display:none' id='delivery-service-click-"+ productDeliveryServiceLevelInt +"' onclick=\""+DeliveryServiceSelection_OnClick+"\">"+ShipList.Name+"</a>";
        DeliveryServiceSelection_HTML += "<input type='radio' value='"+ productDeliveryServiceLevelInt +"' id='select-"+ productDeliveryServiceLevelInt +"' data-status='new' name='deliveryServicesRadio'> ";
    }

    DeliveryServiceSelection_HTML += "<label for='select-"+ productDeliveryServiceLevelInt +"'>" + ShipList.Name + " (" + ShipList.Price + ")" +"</label> ";

								
		
		}
	}

if (DeliveryServiceDeleteByOrderlineID_OnClick != ""){
//	DeliveryServiceDeleteByOrderlineID_OnClick+="Cart.UpdateCart();";
	DeliveryServiceDeleteByOrderlineID_OnClick+="submitDeliveryService();";
	DeliveryServiceSelection_HTML += "<button class='btn btn--primary dw-mod' onclick=\""+DeliveryServiceDeleteByOrderlineID_OnClick+"\">"+@Translate("Reset service")+"</button>";
}




// (the normal) Delete by ProductID
// /Default.aspx?ID=6398&cartcmd=delOrderline&ProductId=PROD318
//  window.location = '/Default.aspx?ID=" + Pageview.Page.ID.ToString() + "&cartcmd=delOrderline&ProductId=" + productId + "'"

// Delete by OrderLineID
// /Default.aspx?ID=6398&cartcmd=delOrderline&key=OL46264
//  window.location = '/Default.aspx?ID=" + Pageview.Page.ID.ToString() + "&cartcmd=delOrderline&key=" + DeliveryServiceOrderlineID + "'"

// https://doc.dynamicweb.com/documentation-9/ecommerce/frontend/cart-commands
// Cart.prototype.UpdateCart = function (containerId, url, command, preloader, cartItem)


// }


           
            
                 
                      
                                
    if (Pageview.Device.ToString() != "Mobile") {
        <td width="90">
            @Render(new Image {
                Path = GetProductImage(product),
                CssClass = "u-padding-right--lg",
                Link = productLink,
                ImageDefault = new ImageSettings {
                    Height = 150,
                    Width = 150
                }
            })
        </td>
    } else {
        <td width="40">
            @Render(new Image {
                Path = GetProductImage(product),
                CssClass = "u-padding-right--lg",
                Link = productLink,
                ImageDefault = new ImageSettings {
                    Height = 40,
                    Width = 40
                }
            })
        </td>
    }

    if (Pageview.Device.ToString() != "Mobile")
    {

        
             
       
        <td class="u-va-middle">@product.GetString("Ecom:Product.Number")
        
        
        
        
        
        
        
        </td>
    }
    <td class="u-va-middle">
        <a href="@productLink" class="u-color-inherit">@productName </a>
       



         







                                                                     
 @* // Just all the data out *@     
@if(shippingOptions>1){
<div onClick="openPopUp(this)" data-productID="@product.GetString("Ecom:Product.Number")" data-productName="@productName" class="open-deliveryservices-pop">
<xmp style="display:none" class="source-deliveryservices">@DeliveryServiceSelection_HTML</xmp>   
    @Translate("Levering og tilvalg")
</div>     
}


@if (ActivDeliveryServiceName != ""){
    <p>@ActivDeliveryServiceName @ActivDeliveryServicePrice</p>
}

   
        
        
        
        
        
        
        
     
       
       
    </td>

}


@helper RenderProductDelete( LoopItem product = null ) {
    string productId = product.GetString("Ecom:Product.ID");
    object googleImpression = null;
    bool useGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));

    if (useGoogleTagManager)
    {
        var groupObject = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(product.GetString("Ecom:Product.PrimaryOrFirstGroupID"));

        googleImpression = new
        {
            name = product.GetString("Ecom:Product.Name"),
            brand = GetString("Ecom:Product:Field.brand.Value"),
            category = groupObject != null ? groupObject.Name : "",
            id = productId,
            position = 1,
            price = product.GetDouble("Ecom:Order:OrderLine.UnitPrice.Price"),
            variant = product.GetString("Ecom:Order:OrderLine.ProductVariantID"),
            list = "Product catalogue"
        };
    }

    string googleImpressionRemove = "googleImpressionRemoveFromCart('" + googleImpression +  "'); ";

    <td class="u-va-middle u-ta-right">
        @Render(new Button {
            ButtonType = ButtonType.Button,
            ButtonLayout = ButtonLayout.LinkClean,
            CssClass = "btn--delete u-color-gray",
            OnClick = googleImpressionRemove + " window.location = '/Default.aspx?ID=" + Pageview.Page.ID.ToString() + "&cartcmd=delOrderline&ProductId=" + productId + "'",
            Icon = new Icon {
                Prefix = "fal",
                Name = "fa-trash-alt"
            }
        }) 
    </td>
}


<script>
    /**
     * Open signin modal
     */

    let signinTrigger = document.querySelector('.js-signinmodal');
    let signInForm = document.querySelector('[name="LoginModalForm"]');

    if ( signinTrigger != null && typeof signinTrigger != 'undefined' ) {
        signinTrigger.addEventListener('click', function (e) {
            let url = `@Pageview.SearchFriendlyUrl?@GetString("CartV2.NextStepButtonName")=true`;
            let inputs = signInForm.querySelectorAll('input:not([type="hidden"]):not([disabled])');

            setTimeout(function () {
                inputs[0].focus();
            }, 10);

            signInForm.setAttribute('action', url);
        });
    }
</script>

@if (useGoogleTagManager)
{
    <script>
        dataLayer.push({
            "event": "checkout",
            "ecommerce": {
                "currencyCode": "@Pageview.Area.EcomCurrencyId",
                "checkout": {
                    "actionField": {"step": "1"},
                    "products": [
                        @foreach (LoopItem orderline in GetLoop("OrderLines").Where(o => o.GetBoolean("Ecom:Order:OrderLine.IsProduct") == true).ToList())
                        {
                            var groupObject = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(orderline.GetString("Ecom:Product.PrimaryOrFirstGroupID"));
                            <text>
                            {
                                "name": "@orderline.GetString("Ecom:Order:OrderLine.ProductName")",
                                "id": "@orderline.GetString("Ecom:Product.ID")",
                                "price": "@orderline.GetDouble("Ecom:Order:OrderLine.UnitPrice.Price")",
                                "brand": "@orderline.GetString("Ecom:Product:Field.brand.Value")",
                                "category": "@(groupObject != null ? groupObject.Name : "")",
                                "variant": "@orderline.GetString("Ecom:Order:OrderLine.ProductVariantID")",
                                "quantity": @orderline.GetInteger("Ecom:Order:OrderLine.Quantity")
                            },
                            </text>
                        }
                    ]
                }
            }
        });
    </script>
}





<script>

    function openPopUp (e){

        document.getElementById("DeliveryServicesTrigger").checked = true;
        document.getElementById("fill-deliveryservices").innerHTML = e.getElementsByClassName("source-deliveryservices")[0].innerHTML;
        document.getElementById("fill-productname").innerHTML = e.getAttribute("data-productName");

    }

    function submitDeliveryService(){
        var servicesSelectedValue = document.querySelector('input[name="deliveryServicesRadio"]:checked').value;
        var servicesSelectedStatus = document.querySelector('input[name="deliveryServicesRadio"]:checked').getAttribute("data-status");
        var selectServiceClick = "delivery-service-click-" + servicesSelectedValue;

        
        if (servicesSelectedStatus == "old"){
            document.getElementById('DeliveryServicesTrigger').checked = false;

        } else if (servicesSelectedStatus == "new"){
            document.getElementById(selectServiceClick).click();       
            document.getElementById("DeliveryServicesTrigger").checked = false;
        }

    }

 

</script>

<style>
    #LastAddedProductModal,
    #LastAddedProductModalOverlay{
        display:none!important;
    }
</style>

<input type="checkbox" id="DeliveryServicesTrigger" class="modal-trigger">

<div class="modal-container">
    <label for="DeliveryServicesTrigger" id="DeliveryServicesOverlay" class="modal-overlay"></label>
    <div class="modal modal--md modal-height--auto" id="DeliveryServices">
        <div class="modal__header">
            <div class=" dw-mod">
                 @Translate("Levering og tilvalg for")<br/><span id="fill-productname"></span>           
            </div>
        </div>

    <div class="modal__body">
         <div id="fill-deliveryservices"></div>                    
    </div>
     <div class="modal__footer">
         <button onClick="document.getElementById('DeliveryServicesTrigger').checked = false" class="btn btn--secondary btn--delete dw-mod">@Translate("Close")</button>                  
         <button onClick="submitDeliveryService()" class="btn btn--primary dw-mod">@Translate("Ok")</button>                  
    </div>

    <label class="modal__close-btn" for="DeliveryServicesTrigger"></label>
    </div>
</div>


@* Include the required Grid builder (Contains the methods @RenderBlockList and @RenderBlock) *@
@Include("../../../Components/GridBuilder.cshtml")
@Include("../../../Components/GeneralComponents.cshtml")

@Include("../../../GetProductImage.cshtml")

@Include("../../../Helpers/VariantInfoMatrix.cshtml")