
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@* Component *@

/* This helper is Deprecated */
@helper RenderPaginationCustom(Pagination settings)
{
    string pagingTag = settings.PagingTag;

    if ( !string.IsNullOrWhiteSpace(GetString(pagingTag + ".Paging.Show")) )
    {
        <div class="pager u-margin-top dw-mod">
            @if (settings.ShowPagingInfo)
            {
                <div class="pager__info dw-mod">
                    @Translate("Page") @GetString(pagingTag + ".Paging.CurrentPage") @Translate("of") @GetString(pagingTag + ".Paging.NumPages")
                </div>
            }
            <ul class="pager__list dw-mod">
                @if (!string.IsNullOrWhiteSpace(GetString(pagingTag + ".Paging.First.URL")) && settings.ShowFirstAndLastControls)
                {
                    @Render(new PaginationItem { Link = GetString(pagingTag + ".Paging.First.URL"), Icon = settings.FirstIcon })
                }
                @if (!string.IsNullOrWhiteSpace(GetString(pagingTag + ".Paging.Back.URL")) && settings.ShowNextAndPrevControls)
                {
                    @Render(new PaginationItem { Link = GetString(pagingTag + ".Paging.Back.URL"), Icon = settings.PrevIcon })
                }
                @if (!string.IsNullOrWhiteSpace(GetString(pagingTag + ".Paging.HasPages")))
                {
                    foreach (LoopItem page in GetLoop(pagingTag + ".Paging.Pages"))
                    {
                        bool isActive = page.GetString(pagingTag + ".Paging.PageClass") == "currentPage";
                        @Render(new PaginationItem { Link = page.GetString(pagingTag + ".Paging.PageIndexUrl"), Label = page.GetString(pagingTag + ".Paging.PageIndex"), IsActive = isActive })
                    }                                                                                                                                                                                                           <text></text>
                }
                @if (!string.IsNullOrWhiteSpace(GetString(pagingTag + ".Paging.Forward.URL")) && settings.ShowNextAndPrevControls)
                {
                    @Render(new PaginationItem { Link = GetString(pagingTag + ".Paging.Forward.URL"), Icon = settings.NextIcon })
                }
                @if (!string.IsNullOrWhiteSpace(GetString(pagingTag + ".Paging.Last.URL")) && settings.ShowFirstAndLastControls)
                {
                    @Render(new PaginationItem { Link = GetString(pagingTag + ".Paging.Last.URL"), Icon = settings.FirstIcon })
                }
            </ul>
        </div>
    }
}

/* This helper is Deprecated */
@helper RenderPaginationItem(PaginationItem settings)
{
    <li class="pager__btn dw-mod">
        @if (settings.IsActive)
        {
            <span class="pager__num pager__num--current dw-mod">
                @settings.Label

                @if (settings.Icon != null)
                {
                    @Render(new Icon { Prefix = settings.Icon.Prefix, Name = settings.Icon.Name })
                }
            </span>
        }
        else
        {
            <a href="@settings.Link" class="pager__num dw-mod">
                @settings.Label

                @if (settings.Icon != null)
                {
                    @Render(new Icon { Prefix = settings.Icon.Prefix, Name = settings.Icon.Name })
                }
            </a>
        }
    </li>
}