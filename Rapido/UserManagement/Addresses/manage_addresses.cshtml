@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using Dynamicweb.Ecommerce.International
@using System.Linq;
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.General

@functions {
    BlocksPage addressesPage = BlocksPage.GetBlockPage("ManageAddresses");
    string listLayout;
    string addressesViewMode;
}

@{
    listLayout = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("AddressesListView")) ? Pageview.AreaSettings.GetItem("Settings").GetString("AddressesListView") : "Columns";
    listLayout = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetString("AddressesListView")) ? Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetString("AddressesListView") : listLayout;
    var columnsView = listLayout == "Columns";

    var shippingAddressesEditingSetting = Pageview.AreaSettings.GetItem("Ecommerce").GetItem("Checkout").GetList("AddressesEditing");
    addressesViewMode = shippingAddressesEditingSetting != null ? shippingAddressesEditingSetting.SelectedValue : "editable";



    Block pageContainer = new Block
    {
        Id = "PageContainer",
        SortId = 10,
        BlocksList = new List<Block> {
            new Block {
                Id = "PageHeader",
                SortId = 20,
                Component = new Heading { CssClass = "margin-sm margin-position-bottom", Title = Translate("My addresses"), Icon = new Icon { Name = "fa-address-book", Prefix = "fas", LabelPosition = IconLabelPosition.After }} 
            },
            new Block {
                Id = "PageForm",
                SortId = 30,
                Template = RenderPageForm(),
                SkipRenderBlocksList = true,
                BlocksList = new List<Block> {
                    new Block {
                        Id = "Addresses",
                        SortId = 30,
                        Template = RenderAddresses()
                    }
                }
            }
        }
    };
    addressesPage.Add(pageContainer);

    Block backButton = new Block
    {
        Id = "BackButton",
        SortId = 9,
        Component = new Button
        {
            Title = Translate("Back to overview"),
            Href = "/Default.aspx?ID=" + GetPageIdByNavigationTag("CustomerDashboard"),
            Icon = new Icon
            {
                Prefix = "fal",
                Name = "fa-arrow-left",
                LabelPosition = IconLabelPosition.After
            },
            ButtonLayout = ButtonLayout.LinkClean,
            CssClass = "u-margin-bottom--xl"
        },
        Design = new Design {
            RenderType = RenderType.Row
        }
    };

    if (Pageview.Page.PropertyItem["LeftMenu"] != null) {
        if (Pageview.Page.PropertyItem["LeftMenu"].ToString() == "False")
        {
            addressesPage.Add(backButton);
        }
    } else {
        addressesPage.Add(backButton);
    }

    if (addressesViewMode != "readonly")
    {
        addressesPage.Add("PageForm", new Block
        {
            Id = "AddNewAddress",
            SortId = 20,
            Design = new Design
            {
                RenderType = RenderType.Column,
                Size = columnsView ? "4" : "12"
            },
            Component = new Button
            {
                Title = Translate("Add new address"),
                ButtonLayout = ButtonLayout.None,
                CssClass = "media-list-item__add-new" + (columnsView ? " media-list-item__add-new--column" : ""),
                OnClick = "addAddress()"
            }
        });
    }

    Block pageScripts = new Block
    {
        Id = "Scripts",
        SortId = 40,
        Template = RenderPageScripts()
    };

    addressesPage.Add(pageScripts);
}

@helper RenderPageForm()
{
    List<Block> subBlocks = this.addressesPage.GetBlockListById("PageForm").OrderBy(item => item.SortId).ToList();

    @GetString("UserManagement:User.ManageAddresses.FormStart")

    <div class="grid grid--external-bleed">
        @RenderBlockList(subBlocks)
    </div>

    @GetString("UserManagement:User.ManageAddresses.FormEnd")
}

@helper RenderAddresses()
{
    foreach (LoopItem address in GetLoop("UserManagement:User.UserAddresses").OrderByDescending(address => address.GetString("UserManagement:User.UserAddress.Default")).ToList())
    {
        var addressId = address.GetString("UserManagement:User.UserAddress.ID");

        //Get address info
        var addressInfo = new List<string>();
        var countryList = GlobalISO.GetGlobalISOs().Cast<GlobalISO>().GroupBy(x => x.Code2).Select(x => x.FirstOrDefault()).ToDictionary(x => x.Code2, y => y.CountryUK);
        var name = address.GetString("UserManagement:User.UserAddress.AccessUserAddress_UserName");
        var address1 = address.GetString("UserManagement:User.UserAddress.Address");
        var address2 = address.GetString("UserManagement:User.UserAddress.Address2");
        var zip = address.GetString("UserManagement:User.UserAddress.Zip");
        var city = address.GetString("UserManagement:User.UserAddress.City");
        var regionCode = address.GetString("UserManagement:User.UserAddress.State");
        var regionName = "";
        var countryCode = address.GetString("UserManagement:User.UserAddress.CountryCode");

        var region = Dynamicweb.Ecommerce.Services.Countries.GetRegion(countryCode, regionCode);
        if (region != null) {
            regionName = region.Name;
        }

        if (!string.IsNullOrEmpty(name))
        {
            addressInfo.Add(name);
        }

        addressInfo.Add(address1);
        addressInfo.Add(address2);
        addressInfo.Add(zip + (!string.IsNullOrEmpty(zip) ? " " : "") + city);
        addressInfo.Add(regionName);

        if (countryList.ContainsKey(countryCode))
        {
            addressInfo.Add(countryList[countryCode]);
        }
        addressInfo = addressInfo.Where(s => !string.IsNullOrWhiteSpace(s)).ToList();

        //Get user info
        var userInfo = new List<string>();
        var email = address.GetString("UserManagement:User.UserAddress.Email");
        var phone = address.GetString("UserManagement:User.UserAddress.Phone");
        
        if (!string.IsNullOrEmpty(email))
        {
            userInfo.Add(email);
        }

        if (!string.IsNullOrEmpty(phone))
        {
            userInfo.Add(phone);
        }
        //get user info end

        string addressTitle = !string.IsNullOrEmpty(address.GetString("UserManagement:User.UserAddress.Description")) ? address.GetString("UserManagement:User.UserAddress.Description") : address1;

        var manageAdressesItem = new MediaListItem
        {
            Title = addressesViewMode != "readonly" ? 
                Render(new Button
                {
                    ButtonLayout = ButtonLayout.Clean,
                    Title = addressTitle,
                    CssClass = "u-no-margin u-no-padding u-bold",
                    OnClick = "updateAddress(" + address.GetString("UserManagement:User.UserAddress.ID") + ")"
                }).ToString() : addressTitle,
            Status = address.GetBoolean("UserManagement:User.UserAddress.Default") ? Translate("Default") : ""
        };

        if (addressesViewMode != "readonly")
        {
            manageAdressesItem.AddAction(
                new Button
                {
                    Title = Translate("Edit"),
                    OnClick = "updateAddress(" + address.GetString("UserManagement:User.UserAddress.ID") + ")"
                }
            );

            if (!address.GetBoolean("UserManagement:User.UserAddress.Default") && address.GetString("UserManagement:User.UserAddress.ID") != Converter.ToString(Pageview.User.ID))
            {
                manageAdressesItem.AddAction(new Button
                {
                    ButtonLayout = ButtonLayout.None,
                    Id = "DeleteWarning_" + address.GetString("UserManagement:User.UserAddress.ID") + "_",
                    Title = Translate("Delete"),
                    ConfirmTitle = Translate("Warning"),
                    ConfirmText = Translate("Are you sure you wish to delete this address?"),
                    OnClick = "deleteAddress(" + addressId + ");"
                });
            }
        }

        if (!address.GetBoolean("UserManagement:User.UserAddress.Default"))
        {
            manageAdressesItem.AddAction(
                new Button
                {
                    Title = Translate("Set default"),
                    OnClick = "makeDefaultAddress('" + address.GetString("UserManagement:User.UserAddress.ID") + "')"
                }
            );
        }

        if (listLayout == "Columns")
        {
            manageAdressesItem.CssClass = "grid__col-sm-4 media-list-item--compact";
            manageAdressesItem.InfoTable.CssClass = "media-list-item__parameters-table--user-address";

            addressInfo.AddRange(userInfo.ToArray());

            foreach (var item in addressInfo)
            {
                manageAdressesItem.InfoTable.Rows.Add(new TableRow(item));
            }
        }
        else
        {
            manageAdressesItem.CssClass = "grid__col-12";
            manageAdressesItem.InfoTable.CssClass = "media-list-item__parameters-table--user-address";

            int rowCount = Math.Max(addressInfo.Count, userInfo.Count);

            for (var i = 0; i < rowCount; i++)
            {
                manageAdressesItem.InfoTable.Rows.Add(new TableRow (
                    i < addressInfo.Count ? addressInfo[i] : "",
                    i < userInfo.Count ? userInfo[i] : ""    
                ));
            }
        }

        @Render(manageAdressesItem)
    }

}

@helper RenderPageScripts()
{
    @GetString("UserManagement:User.ManageAddresses.MakeDefault.Javascript")
    @GetString("UserManagement:User.ManageAddresses.DeleteAddress.Javascript")
    @GetString("UserManagement:User.ManageAddresses.AddAddress.Javascript")
    @GetString("UserManagement:User.ManageAddresses.UpdateAddress.Javascript")

    <script>
        function deleteAddress(addressId) {
            document.getElementById('SelectedAddressId').value = addressId;
            document.getElementById('ManageAddressesFormAction').value = 'Delete';
            document.getElementById('UserManagementManageAddressesForm').submit();
        }
    </script>
}

@* Include the Rendering helpers *@
@Include("../../Components/GridBuilder.cshtml")
@Include("../../Components/GeneralComponents.cshtml")

@* Include the Rendering helpers *@
@Include("Blocks/ManageAddresses/Custom__Blocks.cshtml")


@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(addressesPage.BlocksRoot.BlocksList)

