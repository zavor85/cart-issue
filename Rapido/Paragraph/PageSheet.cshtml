@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using System.IO
@using Dynamicweb.Content.Items

@Include("../Printables/General.cshtml")
@Include("../Printables/Paper/Header.cshtml")
@Include("../Printables/Paper/Footer.cshtml")


@functions{ 
    public string GetThisOrParentSettingsItem(string systemName)
    {
        string item = null;

        if (Model.Item.GetString(systemName) != null) {
            if (Model.Item.GetList(systemName) != null)
            {
                if (!String.Equals("default", Model.Item.GetList(systemName).SelectedValue, StringComparison.OrdinalIgnoreCase)) {
                    item = Model.Item.GetList(systemName).SelectedValue;
                } else {
                    item = null;
                }
            }
            else if (Model.Item.GetFile(systemName) != null)
            {
                if (!String.IsNullOrEmpty(Model.Item.GetString(systemName))) {
                    item = Model.Item.GetFile(systemName).Path;
                } else {
                    item = null;
                }
            }
            else
            {
                if (!String.IsNullOrEmpty(Model.Item.GetString(systemName)) && !String.Equals("transparent", Model.Item.GetString(systemName), StringComparison.OrdinalIgnoreCase))
                {
                    item = Model.Item.GetString(systemName);
                }
                else
                {
                    item = null;
                }
            }
        }

        if (item == null)
        {
            Dynamicweb.Content.Page current = Dynamicweb.Services.Pages.GetPage(Model.PageID);
            while (current != null && current.Parent != current)
            {
                var temp = current.Item != null ? current.Item[systemName] : "";

                if (temp != null)
                {
                    item = temp.ToString();

                    if (!String.IsNullOrEmpty(item) && !String.Equals("default", item, StringComparison.OrdinalIgnoreCase))
                    {
                        break;
                    }
                }

                current = current.Parent;
            }
        }

        return item;
    }
}

@functions {
    int contentHeight;
    int contentWidth;
    string pageOrientation;
}

@{ 
    int sheetMargin = GetThisOrParentSettingsItem("Margin") != null ? Convert.ToInt32(GetThisOrParentSettingsItem("Margin")) : 10;
    int sheetHeight = 296;
    int sheetWidth = 210;
    int headerHeight = 15;
    int footerHeight = 15;

    string pageSize = !String.IsNullOrEmpty(GetThisOrParentSettingsItem("PageSize")) ? GetThisOrParentSettingsItem("PageSize").ToLower() : "a4";
    pageOrientation = "portrait";

    if (pageOrientation == "portrait")
    {
        switch (pageSize)
        {
            case "a4":
                sheetHeight = 296;
                sheetWidth = 210;
                break;
            case "a5":
                sheetHeight = 209;
                sheetWidth = 148;
                break;
            case "a3":
                sheetHeight = 419;
                sheetWidth = 297;
                break;
            case "letter":
                sheetHeight = 279;
                sheetWidth = 216;
                break;
            case "legal":
                sheetHeight = 356;
                sheetWidth = 216;
                break;
        }
    }
    else
    {
        switch (pageSize)
        {
            case "a4":
                sheetHeight = 209;
                sheetWidth = 296;
                break;
            case "a5":
                sheetHeight = 147;
                sheetWidth = 210;
                break;
            case "a3":
                sheetHeight = 296;
                sheetWidth = 420;
                break;
            case "letter":
                sheetHeight = 215;
                sheetWidth = 280;
                break;
            case "legal":
                sheetHeight = 215;
                sheetWidth = 357;
                break;
        }
    }

    contentHeight = (sheetHeight - (headerHeight + footerHeight + (sheetMargin * 2)));
    contentWidth = (sheetWidth - (sheetMargin * 2));
}

@{
    string text = !String.IsNullOrEmpty(Model.Item.GetString("Text")) ? Model.Item.GetString("Text") : "";
    int numLines = text.Split('\n').Length;

    @RenderPageSheet(text)
}

@helper RenderPageSheet(string text) { 
    string bodyTextColor = GetThisOrParentSettingsItem("BodyTextColor") != null ? "color: " + GetThisOrParentSettingsItem("BodyTextColor") : "";
    string pageMargin = GetThisOrParentSettingsItem("Margin") != null ? GetThisOrParentSettingsItem("Margin") : "10";

    string title = Model.Item.GetString("Title") != null ? Model.Item.GetString("Title") : "";
    string subTitle = Model.Item.GetString("SubTitle") != null ? Model.Item.GetString("SubTitle") : "";

    <section class="sheet">
        <div class="sheet-container sheet-container--flex-col">
            @RenderPaperHeader()
            <div id="ContentContainer" class="sheet-container__content sheet-container__content--padding-@(pageMargin)mm" style="height: @(contentHeight)mm; @bodyTextColor" runat="server">
                @if (!String.IsNullOrEmpty(title)) {
                    <h1 class="sheet-page-title">@title</h1>
                }

                @if (!String.IsNullOrEmpty(subTitle)) {
                    <div class="sheet-page-sub-title">@subTitle</div>
                }

                @text
            </div>
            @RenderPaperFooter()
        </div>
    </section>
}
