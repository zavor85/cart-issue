@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using Dynamicweb
@using Dynamicweb.Core
@using Dynamicweb.Frontend.Devices
@using System.Web
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@functions {
    BlocksPage quoteListPage = BlocksPage.GetBlockPage("QuoteList");
}

@{
    Block pageContainer = new Block
    {
        Id = "PageContainer",
        SortId = 10,
        Component = new Heading
        {
            Title = GetGlobalValue("Global:Page.Name"),
            Icon = new Icon { Prefix = "fas", Name = "fa-quote-right", LabelPosition = IconLabelPosition.After }
        },
        BlocksList = new List<Block> { }
    };
    quoteListPage.Add(pageContainer);

    Block backButton = new Block
    {
        Id = "BackButton",
        SortId = 9,
        Component = new Button
        {
            Title = Translate("Back to overview"),
            Href = "/Default.aspx?ID=" + GetPageIdByNavigationTag("CustomerDashboard"),
            Icon = new Icon
            {
                Prefix = "fal",
                Name = "fa-arrow-left",
                LabelPosition = IconLabelPosition.After
            },
            ButtonLayout = ButtonLayout.LinkClean,
            CssClass = "u-margin-bottom--xl"
        },
        Design = new Design {
            RenderType = RenderType.Row
        }
    };

    if (Pageview.Page.PropertyItem["LeftMenu"] != null) {
        if (Pageview.Page.PropertyItem["LeftMenu"].ToString() == "False")
        {
            quoteListPage.Add(backButton);
        }
    } else {
        quoteListPage.Add(backButton);
    }

    if (string.IsNullOrWhiteSpace(GetString("Ecom:CustomerCenter.Quotes.EmptyList")) && !string.IsNullOrWhiteSpace(GetString("Ecom:CustomerCenter.Quotes.Paging.Show")))
    {
        Block pager = new Block
        {
            Id = "Pager",
            SortId = 40,
            Design = new Design
            {
                RenderType = RenderType.Column,
                Size = "12"
            },
            Component = new Pagination
            {
                CurrentPageNumber = GetInteger("ItemPublisher:Items.Paging.CurrentPage"),
                NumberOfPages = GetInteger("Ecom:CustomerCenter.Paging.NumPages"),
                PreviousPageUrl = GetString("Ecom:CustomerCenter.Paging.Back.URL"),
                NextPageUrl = GetString("Ecom:CustomerCenter.Paging.Forward.URL"),
                ShowNextAndPrevControls = true,
                PaginationType = PaginationType.CustomerCenterApp,
                NavigationItemsLimit = 5
            }
        };

        pageContainer.Add(pager);
    }

    if (!string.IsNullOrWhiteSpace(GetString("Ecom:CustomerCenter.Quotes.EmptyList")))
    {

        Block emptyListMessage = new Block
        {
            Id = "EmptyListMessage",
            SortId = 40,
            Component = new Text { Content = Translate("No quotes found") }
        };

        pageContainer.Add(emptyListMessage);
    }
}


@Include("Blocks/QuoteList/Quotes.cshtml")
@Include("Blocks/QuoteList/ViewQuoteModal.cshtml")
@Include("Blocks/QuoteList/Custom__Blocks.cshtml")

@* Include the required Grid builder (Contains the methods @RenderBlockList and @RenderBlock) *@
@Include("../../Components/GridBuilder.cshtml")
@Include("../../Components/GeneralComponents.cshtml")
@Include("../../Components/EcommerceComponents.cshtml")


@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(quoteListPage.BlocksRoot.BlocksList)



