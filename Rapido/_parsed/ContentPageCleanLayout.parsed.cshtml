@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System.Web;
@using System
@using System.IO
@using Dynamicweb.Rapido.Blocks

@functions {
	BlocksPage masterPage = BlocksPage.GetBlockPage("Master");

	string getFontFamily(params string[] items)
	{
		var itemParent = Pageview.AreaSettings;
		foreach (var item in items)
		{
			itemParent = itemParent.GetItem(item);
			if (itemParent == null)
			{
				return null;
			}
		}

		var googleFont = itemParent.GetGoogleFont("FontFamily");
		if (googleFont == null)
		{
			return null;
		}
		return googleFont.Family.Replace(" ", "+");
	}
}

@{
    Block root = new Block
    {
        Id = "Root",
        SortId = 10,
        BlocksList = new List<Block>
        {
            new Block {
                Id = "Head",
                SortId = 10,
                SkipRenderBlocksList = true,
                Template = RenderMasterHead(),
                BlocksList = new List<Block>
                {
                    new Block {
                        Id = "HeadMetadata",
                        SortId = 10,
                        Template = RenderMasterMetadata(),
                    },
                    new Block {
                        Id = "HeadCss",
                        SortId = 20,
                        Template = RenderMasterCss(),
                    },
                    new Block {
                        Id = "HeadManifest",
                        SortId = 30,
                        Template = RenderMasterManifest(),
                    }
                }
            },
            new Block {
                Id = "Body",
                SortId = 20,
                SkipRenderBlocksList = true,
                Template = RenderMasterBody(),
                BlocksList = new List<Block>
                {
                    new Block()
                    {
                        Id = "Master",
                        SortId = 10,
                        BlocksList = new List<Block> {
                            new Block {
                                Id = "MasterMain",
                                SortId = 20,
                                Template = RenderMain(),
                                SkipRenderBlocksList = true,
                                BlocksList = new List<Block> {
                                    new Block {
                                        Id = "MasterPageContent",
                                        SortId = 20,
                                        Template = RenderPageContent()
                                    }
                                }
                            },
                            new Block {
                                Id = "MasterReferences",
                                SortId = 40
                            },
                            new Block {
                                Id = "MasterBottomSnippets",
                                SortId = 50
                            }
                        }
                    }
                }
            }
        }
    };

    masterPage.Add(root);
}

@* Include the required Grid builder (Contains the methods @RenderBlockList and @RenderBlock) *@
@using System.Text.RegularExpressions
@using System.Collections.Generic
@using System.Reflection
@using System.Web
@using System.Web.UI.HtmlControls
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.Documentation
@using Dynamicweb.Rapido.Blocks


@*--- START: Base block renderers ---*@

@helper RenderBlockList(List<Block> blocks)
{
    bool debug = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("debug")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("debug")) : false;
    blocks = blocks.OrderBy(item => item.SortId).ToList();

    foreach (Block item in blocks)
    {
        if (debug) {
        <!-- Block START: @item.Id -->
        }

        if (item.Design == null)
        {
            @RenderBlock(item)
        }
        else if (item.Design.RenderType == RenderType.None) {
            string cssClass = item.Design.CssClass != null ? item.Design.CssClass : "";

            <div class="@cssClass dw-mod">
               @RenderBlock(item)
            </div>
        }
        else if (item.Design.RenderType != RenderType.Hide)
        {
            string cssClass = item.Design.CssClass != null ? item.Design.CssClass : "";

            if (!item.SkipRenderBlocksList) {
                if (item.Design.RenderType == RenderType.Row)
                {
                    <div class="grid grid--align-content-start @cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.Column)
                {
                    string hidePadding = item.Design.HidePadding ? "u-no-padding" : "";
                    string size = item.Design.Size ?? "12";
                    size = Regex.IsMatch(size, @"\d") ? "md-" + item.Design.Size : item.Design.Size;

                    <div class="grid__col-lg-@item.Design.Size grid__col-md-@item.Design.Size grid__col-sm-12 grid__col-xs-12 @hidePadding @cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.Table)
                {
                    <table class="table @cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </table>
                }

                if (item.Design.RenderType == RenderType.TableRow)
                {
                    <tr class="@cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </tr>
                }

                if (item.Design.RenderType == RenderType.TableColumn)
                {
                    <td class="@cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </td>
                }

                if (item.Design.RenderType == RenderType.CardHeader)
                {
                    <div class="card-header @cssClass dw-mod">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.CardBody)
                {
                    <div class="card @cssClass dw-mod">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.CardFooter)
                {
                    <div class="card-footer @cssClass dw-mod">
                        @RenderBlock(item)
                    </div>
                }
            }
            else 
            {
                @RenderBlock(item)
            }
        }

        if (debug) {
        <!-- Block END: @item.Id -->
        }
    }
}

@helper RenderBlock(Block item)
{
    bool debug = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("debug")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("debug")) : false;

    if (item.Template != null)
    {
        @BlocksPage.RenderTemplate(item.Template)
    }

    if (item.Component != null)
    {
        string customSufix = "Custom";
        string methodName = item.Component.HelperName;

        ComponentBase[] methodParameters = new ComponentBase[1]; 
        methodParameters[0] = item.Component; 
        Type methodType = this.GetType();

        MethodInfo customMethod = methodType.GetMethod(methodName + customSufix);
        MethodInfo generalMethod = methodType.GetMethod(methodName);

        try {
            if (debug) {
            <!-- Component: @methodName.Replace("Render", "") -->
            }
            @customMethod.Invoke(this, methodParameters).ToString();
        } catch {
            try {
                @generalMethod.Invoke(this, methodParameters).ToString();
            } catch(Exception ex) {
                throw new Exception(item.Component.GetType().Name + " method '" + methodName +"' could not be invoked", ex);
            }
        }
    }

    if (item.BlocksList.Count > 0 && !item.SkipRenderBlocksList)
    {
        @RenderBlockList(item.BlocksList)
    }
}

@*--- END: Base block renderers ---*@


@* Include the components *@
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks
@using System.IO

@* Required *@
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@helper Render(ComponentBase component)
{
    if (component != null)
    {
        @component.Render(this)
    }
}

@* Components *@
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component *@

@helper RenderIcon(Icon settings)
{
    if (settings != null)
    {
        string color = settings.Color != null ? "style=\"color: " + settings.Color + "\"" : "";

        if (settings.Name != null)
        {
            if (string.IsNullOrEmpty(settings.Label))
            {
                <i class="@settings.Prefix @settings.Name @settings.CssClass" @color></i>
            }
            else
            {
                if (settings.LabelPosition == IconLabelPosition.Before)
                {
                    <div class="u-flex u-flex--align-items-center @settings.CssClass">@settings.Label <i class="@settings.Prefix @settings.Name u-margin-left" @color></i></div>
                }
                else
                {
                    <div class="u-flex u-flex--align-items-center @settings.CssClass"><i class="@settings.Prefix @settings.Name u-margin-right--lg u-w20px" @color></i>@settings.Label</div>
                }
            }
        }
        else if (!string.IsNullOrEmpty(settings.Label))
        {
            @settings.Label
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@* Component *@

@helper RenderButton(Button settings)
{
    if (settings != null && (!string.IsNullOrEmpty(settings.Title) || settings.Icon != null))
    {
        Dictionary<string, string> attributes = new Dictionary<string, string>();
        List<string> classList = settings.CssClass != null ? settings.CssClass.Split(' ').ToList() : new List<string>();
        if (settings.Disabled) {
            attributes.Add("disabled", "true");
            classList.Add("disabled");
        }
        
        if (!string.IsNullOrEmpty(settings.ConfirmText) || !string.IsNullOrEmpty(settings.ConfirmTitle))
        {
            settings.Id = !string.IsNullOrEmpty(settings.Id) ? settings.Id : Guid.NewGuid().ToString("N");
            @RenderConfirmDialog(settings);
        settings.OnClick = "document.getElementById('" + settings.Id + "ModalTrigger').checked = true";
    }

    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    if (!string.IsNullOrEmpty(settings.AltText))
    {
        attributes.Add("title", settings.AltText);
    }
    else if (!string.IsNullOrEmpty(settings.Title))
    {
        string cleanTitle = Regex.Replace(settings.Title, "<.*?>", String.Empty);
        cleanTitle = cleanTitle.Replace("&nbsp;", " ");
        attributes.Add("title", cleanTitle);
    }

    var onClickEvents = new List<string>();
    if (!string.IsNullOrEmpty(settings.OnClick))
    {
        onClickEvents.Add(settings.OnClick);
    }
    if (!string.IsNullOrEmpty(settings.Href))
    {
        onClickEvents.Add("location.href='" + settings.Href + "'");
    }
    if (onClickEvents.Count > 0)
    {
        attributes.Add("onClick", string.Join(";", onClickEvents));
    }

    if (settings.ButtonLayout != ButtonLayout.None)
    {
        classList.Add("btn");
        string btnLayout = Enum.GetName(typeof(ButtonLayout), settings.ButtonLayout).ToLower();
        if (btnLayout == "linkclean")
        {
            btnLayout = "link-clean"; //fix
        }
        classList.Add("btn--" + btnLayout);
    }

        if (settings.Icon == null)
        {
            settings.Icon = new Icon();
        }

        settings.Icon.CssClass += Enum.GetName(typeof(ButtonLayout), settings.ButtonLayout).ToLower() != "linkclean" ? " u-flex--align-center" : "";
        settings.Icon.Label = settings.Title;

    attributes.Add("type", Enum.GetName(typeof(ButtonType), settings.ButtonType).ToLower());

        <button class="@string.Join(" ", classList) dw-mod" @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@Render(settings.Icon)</button>
    }
}

@helper RenderConfirmDialog(Button settings)
{
    Modal confirmDialog = new Modal {
        Id = settings.Id,
        Width = ModalWidth.Sm,
        Heading = new Heading
        {
            Level = 2,
            Title = settings.ConfirmTitle
        },
        BodyText = settings.ConfirmText
    };

    confirmDialog.AddAction(new Button { Title = Translate("Cancel"), ButtonLayout = ButtonLayout.Secondary, OnClick = "document.getElementById('" + settings.Id + "ModalTrigger').checked = false"});
    confirmDialog.AddAction(new Button { Title = Translate("OK"), ButtonLayout = ButtonLayout.Primary, OnClick = "document.getElementById('" + settings.Id + "ModalTrigger').checked = false;" + settings.OnClick });

    @Render(confirmDialog)
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@helper RenderDashboard(Dashboard settings)
{
    var widgets = settings.GetWidgets();

    if (!string.IsNullOrEmpty(settings.WidgetsBaseBackgroundColor))
    {
        //set bg color for them

        System.Drawing.Color color = System.Drawing.ColorTranslator.FromHtml(settings.WidgetsBaseBackgroundColor);
        int r = Convert.ToInt16(color.R);
        int g = Convert.ToInt16(color.G);
        int b = Convert.ToInt16(color.B);

        var count = widgets.Length;
        var max = Math.Max(r, Math.Max(g, b));
        double step = 255.0 / (max * count);
        var i = 0;
        foreach (var widget in widgets)
        {
            i++;

            var shade = "rgb(" + Converter.ToString(r * step * i).Replace(",", ".") + ", " + Converter.ToString(g * step * i).Replace(",", ".") + ", " + Converter.ToString(b * step * i).Replace(",", ".") + ")";
            widget.BackgroundColor = shade;
        }
    }

    <div class="dashboard @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        @foreach (var widget in widgets)
        {
            <div class="dashboard__widget">
                @Render(widget)
            </div>
        }
    </div>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderDashboardWidgetLink(DashboardWidgetLink settings)
{
    if (!string.IsNullOrEmpty(settings.Link))
    {
        var backgroundStyles = "";
        if (!string.IsNullOrEmpty(settings.BackgroundColor))
        {
            backgroundStyles = "style=\"background-color:" + settings.BackgroundColor + "\"";
        }

        <a href="@settings.Link" class="widget widget--link @settings.CssClass dw-mod" @backgroundStyles title="@settings.Title" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
            <div class="u-center-middle u-color-light">
                @if (settings.Icon != null)
                {
                    settings.Icon.CssClass += "widget__icon";
                    @Render(settings.Icon)
                }
                <div class="widget__title">@settings.Title</div>
            </div>
        </a>
    }
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderDashboardWidgetCounter(DashboardWidgetCounter settings)
{
    var backgroundStyles = "";
    if (!string.IsNullOrEmpty(settings.BackgroundColor))
    {
        backgroundStyles = "style='background-color:" + settings.BackgroundColor + "'";
    }

    <div class="widget @settings.CssClass dw-mod" @backgroundStyles @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        <div class="u-center-middle u-color-light">
            @if (settings.Icon != null)
            {
                settings.Icon.CssClass += "widget__icon";
                @Render(settings.Icon)
            }
            <div class="widget__counter">@settings.Count</div>
            <div class="widget__title">@settings.Title</div>
        </div>
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@* Component *@

@helper RenderLink(Link settings)
{
    if (settings != null && !string.IsNullOrEmpty(settings.Href) && (!string.IsNullOrEmpty(settings.Title) || settings.Icon != null))
    {
        Dictionary<string, string> attributes = new Dictionary<string, string>();
        List<string> classList = settings.CssClass != null ? settings.CssClass.Split(' ').ToList() : new List<string>();
        if (settings.Disabled) 
        {
            attributes.Add("disabled", "true");
            classList.Add("disabled");
        }
        
        if (!string.IsNullOrEmpty(settings.AltText)) 
        { 
            attributes.Add("title", settings.AltText); 
        } 
        else if (!string.IsNullOrEmpty(settings.Title)) 
        { 
            attributes.Add("title", settings.Title); 
        }

        if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
        if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
        if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onClick", settings.OnClick); }
        attributes.Add("href", settings.Href);

        if (settings.ButtonLayout != ButtonLayout.None) 
        {
            classList.Add("btn");
            string btnLayout = Enum.GetName(typeof(ButtonLayout), settings.ButtonLayout).ToLower();
            if (btnLayout == "linkclean") 
            {
                btnLayout = "link-clean"; //fix
            }
            classList.Add("btn--" + btnLayout);
        }
        
        if (settings.Icon == null)
        {
            settings.Icon = new Icon();
        }
        settings.Icon.Label = settings.Title;
        
        if (settings.Target == LinkTargetType.Blank && settings.Rel == LinkRelType.None) 
        {
            settings.Rel = LinkRelType.Noopener;
        }
        if (settings.Target != LinkTargetType.None) 
        { 
            attributes.Add("target", "_" + Enum.GetName(typeof(LinkTargetType), settings.Target).ToLower()); 
        }
        if (settings.Download) 
        { 
            attributes.Add("download", "true"); 
        }
        if (settings.Rel != LinkRelType.None) 
        { 
            attributes.Add("rel", Enum.GetName(typeof(LinkRelType), settings.Rel).ToLower()); 
        }

        <a class="@string.Join(" ", classList) dw-mod" @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@Render(settings.Icon)</a>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@* Component *@

@helper RenderRating(Rating settings)
{
    if (settings.Score > 0)
    {
        int rating = settings.Score;
        string iconType = "fa-star";

        switch (settings.Type.ToString()) {
            case "Stars":
                iconType = "fa-star";
                break;
            case "Hearts":
                iconType = "fa-heart";
                break;
            case "Lemons":
                iconType = "fa-lemon";
                break;
            case "Bombs":
                iconType = "fa-bomb";
                break;
        }

        <div class="u-ta-right">
            @for (int i = 0; i < settings.OutOf; i++)
            {
                <i class="@(rating > i ? "fas" : "far") @iconType"></i>
            }
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderSelectFieldOption(SelectFieldOption settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (settings.Checked) { attributes.Add("selected", "true"); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Value != null) { attributes.Add("value", settings.Value); }
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }

    <option @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@settings.Label</option>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderNavigation(Navigation settings) {
    @RenderNavigation(new
    {
        id = settings.Id,
        cssclass = settings.CssClass,
        startLevel = settings.StartLevel,
        endlevel = settings.EndLevel,
        expandmode = settings.Expandmode,
        sitemapmode = settings.SitemapMode,
        template = settings.Template
    })
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderBreadcrumbNavigation(BreadcrumbNavigation settings) {
    settings.Id = String.IsNullOrEmpty(settings.Id) ? "breadcrumb" : settings.Id;
    settings.Template = String.IsNullOrEmpty(settings.Template) ? "Breadcrumb.xslt" : settings.Template;
    settings.StartLevel = settings.StartLevel == 0 ? 1 : settings.StartLevel;
    settings.EndLevel = settings.EndLevel == 10 ? 1 : settings.EndLevel;
    settings.Expandmode = String.IsNullOrEmpty(settings.Expandmode) ? "all" : settings.Expandmode;
    settings.SitemapMode = false;

    @RenderNavigation(settings)         
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderLeftNavigation(LeftNavigation settings) {
    settings.Id = String.IsNullOrEmpty(settings.Id) ? "breadcrumb" : settings.Id;
    settings.Template = String.IsNullOrEmpty(settings.Template) ? "Breadcrumb.xslt" : settings.Template;
    settings.StartLevel = settings.StartLevel == 0 ? 1 : settings.StartLevel;
    settings.EndLevel = settings.EndLevel == 10 ? 1 : settings.EndLevel;
    settings.Expandmode = String.IsNullOrEmpty(settings.Expandmode) ? "all" : settings.Expandmode;

    <div class="grid__cell">
        @RenderNavigation(settings) 
    </div>       
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Core

@* Component *@

@helper RenderHeading(Heading settings)
{
    if (settings != null && !string.IsNullOrEmpty(settings.Title))
    {
        string color = settings.Color != null ? "style=\"color: " + settings.Color + "\"" : "";
        string tagName = settings.Level != 0 ? "h" + settings.Level.ToString() : "div";

        @("<" + tagName + " class=\"" + settings.CssClass + " dw-mod\" " + color + ">")
            if (!string.IsNullOrEmpty(settings.Link))
            {
                @Render(new Link { Href = settings.Link, Icon = settings.Icon, Title = settings.Title, ButtonLayout = ButtonLayout.None })
            } 
            else
            {
                if (settings.Icon == null)
                {
                    settings.Icon = new Icon();
                }
                settings.Icon.Label = settings.Title;
                @Render(settings.Icon)
            }
        @("</" + tagName + ">");
    }
}
@using System.Collections.Generic
@using System.Web
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@* Component *@

@helper RenderImage(Image settings)
{
    if (settings.FilterPrimary != ImageFilter.None || settings.FilterSecondary != ImageFilter.None)
    {
        Dictionary<string, string> optionalAttributes = new Dictionary<string, string>();
        if (!string.IsNullOrEmpty(settings.FilterColor)) { optionalAttributes.Add("style", "background-color: " + settings.FilterColor); }
        
        if (settings.Caption != null)
        {
            @:<div>
        }

        var primaryFilterClass = settings.FilterPrimary.ToString().ToLower();
        var secondaryFilterClass = settings.FilterSecondary.ToString().ToLower();

        <div class="image-filter image-filter--@primaryFilterClass u-position-relative dw-mod" @ComponentMethods.AddAttributes(optionalAttributes)>
            <div class="image-filter image-filter--@secondaryFilterClass dw-mod">
                @if (settings.Link != null)
                {
                    <a href="@settings.Link">
                        @RenderTheImage(settings)
                    </a>
                }
                else
                {
                    @RenderTheImage(settings)
                }
            </div>
        </div>

        if (settings.Caption != null)
        {
            <span class="image-caption dw-mod">@settings.Caption</span>
            @:</div>
        }
    }
    else 
    {
        if (settings.Caption != null)
        {
            @:<div>
        }
        if (!string.IsNullOrEmpty(settings.Link))
        {
            <a href="@settings.Link">
                @RenderTheImage(settings)
            </a>
        }
        else
        {
            @RenderTheImage(settings)
        }

        if (settings.Caption != null)
        {
            <span class="image-caption dw-mod">@settings.Caption</span>
            @:</div>
        }
    }
}

@helper RenderTheImage(Image settings)
{
if (settings != null)
{
    string alternativeImage = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("AlternativeImage")) ? Pageview.AreaSettings.GetItem("Settings").GetFile("AlternativeImage").PathUrlEncoded : "/Images/missing_image.jpg";
    string placeholderImage = "/Files/Images/placeholder.gif";
    string imageEngine = "/Admin/Public/GetImage.ashx?";

    string imageStyle = "";

    switch (settings.Style)
    {
        case ImageStyle.Ball:
            imageStyle = "grid__cell-img--ball";
            break;

        case ImageStyle.Triangle:
            imageStyle = "grid__cell-img--triangle";
            break;
    }

    if (settings.Style == ImageStyle.Ball || settings.Style == ImageStyle.Circle || settings.Style == ImageStyle.Triangle)
    {
        settings.ImageDefault.Crop = settings.ImageDefault.Crop == 5 ? settings.ImageDefault.Crop = 0 : settings.ImageDefault.Crop;

        if (settings.ImageDefault != null)
        {
            settings.ImageDefault.Height = settings.ImageDefault.Width;
        }
        if (settings.ImageMedium != null)
        {
            settings.ImageMedium.Height = settings.ImageMedium.Width;
        }
        if (settings.ImageSmall != null)
        {
            settings.ImageSmall.Height = settings.ImageSmall.Width;
        }
    }

    string defaultImage = imageEngine;
    string imageSmall = "";
    string imageMedium = "";

    if (settings.DisableImageEngine)
    {
        defaultImage = settings.Path;
    }
    else
    {
        if (settings.ImageDefault != null)
        {
            defaultImage += Dynamicweb.Rapido.Services.Images.GetImagePathFromSettings(settings.ImageDefault);

            if (settings.Path.GetType() != typeof(string))
            {
                defaultImage += settings.Path != null ? "Image=" + settings.Path.PathUrlEncoded : "";
                defaultImage += settings.Path != null ? "&" + settings.Path.GetFocalPointParameters() : "";
            }
            else
            {
                defaultImage += settings.Path != null ? "Image=" + HttpUtility.UrlEncode(settings.Path) : "";
            }

            defaultImage += "&AlternativeImage=" + alternativeImage;
            defaultImage += "&format=webp";

            if (defaultImage.Length > 255)
            {
                defaultImage = defaultImage.Replace("&AlternativeImage=" + alternativeImage, "");
                defaultImage = defaultImage.Replace($"Crop=5&DoNotUpscale=True", "");
                defaultImage = defaultImage.Replace($"&format=webp", "");
            }
        }

        if (settings.ImageSmall != null)
        {
            imageSmall = "data-src-small=\"" + imageEngine;
            imageSmall += Dynamicweb.Rapido.Services.Images.GetImagePathFromSettings(settings.ImageSmall);

            if (settings.Path.GetType() != typeof(string))
            {
                imageSmall += settings.Path != null ? "Image=" + settings.Path.PathUrlEncoded : "";
                imageSmall += settings.Path != null ? "&" + settings.Path.GetFocalPointParameters() : "";
            }
            else
            {
                imageSmall += settings.Path != null ? "Image=" + HttpUtility.UrlEncode(settings.Path) : "";
            }
            imageSmall += "&alternativeImage=" + alternativeImage;
            imageSmall += "&format=webp";

            imageSmall += "\"";
        }

        if (settings.ImageMedium != null)
        {
            imageMedium = "data-src-medium=\"" + imageEngine;
            imageMedium += Dynamicweb.Rapido.Services.Images.GetImagePathFromSettings(settings.ImageMedium);

            if (settings.Path.GetType() != typeof(string))
            {
                imageMedium += settings.Path != null ? "Image=" + settings.Path.PathUrlEncoded : "";
                imageMedium += settings.Path != null ? "&" + settings.Path.GetFocalPointParameters() : "";
            }
            else
            {
                imageMedium += settings.Path != null ? "Image=" + HttpUtility.UrlEncode(settings.Path) : "";
            }

            imageMedium += "&alternativeImage=" + alternativeImage;
            imageMedium += "&format=webp";
            imageMedium += "\"";
        }
    }

    Dictionary<string, string> optionalAttributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.OnClick)) { optionalAttributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.Title))
    {
        optionalAttributes.Add("alt", settings.Title);
        optionalAttributes.Add("title", settings.Title);
    }

    if (settings.DisableLazyLoad)
    {
                <img id="@settings.Id" class="@imageStyle @settings.CssClass dw-mod" src="@defaultImage" @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes) />
            } 
            else 
            {
                <img id="@settings.Id" class="b-lazy @imageStyle @settings.CssClass dw-mod" src="@placeholderImage" data-src="@defaultImage" @imageSmall @imageMedium @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes) />
            }
        }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderFileField(FileField settings)
{
    var attributes = new Dictionary<string, string>();
    if (string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }
    
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (settings.Multiple) { attributes.Add("multiple", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    if (string.IsNullOrEmpty(settings.ChooseFileText)) 
    { 
        settings.ChooseFileText = Translate("Choose file");
    }
    if (string.IsNullOrEmpty(settings.NoFilesChosenText)) 
    { 
        settings.NoFilesChosenText = Translate("No files chosen...");
    }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    string setValueToFakeInput = "FileUpload.setValueToFakeInput(this)";
    attributes.Add("onchange", setValueToFakeInput + (!string.IsNullOrEmpty(settings.OnChange) ? settings.OnChange : ""));

    attributes.Add("type", "file");
    if (settings.Value != null) { attributes.Add("value", settings.Value); }
    settings.CssClass = "u-full-width " + settings.CssClass;

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group u-full-width @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        <div class="form__field-combi file-input u-no-margin dw-mod">
            <input @ComponentMethods.AddAttributes(resultAttributes) class="file-input__real-input" data-no-files-text="@settings.NoFilesChosenText" data-many-files-text="@Translate("files")" />
            <label for="@settings.Id" class="file-input__btn btn--secondary btn dw-mod">@settings.ChooseFileText</label>
            <label for="@settings.Id" class="@settings.CssClass file-input__fake-input js-fake-input dw-mod">@settings.NoFilesChosenText</label>
            @if (settings.UploadButton != null)
            {
                settings.UploadButton.CssClass += " btn--condensed u-no-margin";
                @Render(settings.UploadButton)
            }
        </div>
        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core
@using System.Linq

@* Component *@

@helper RenderDateTimeField(DateTimeField settings)
{
    if (string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    var textField = new TextField {
        Name = settings.Name,
        Id = settings.Id,
        Label = settings.Label,
        HelpText = settings.HelpText,
        Value = settings.Value,
        Disabled = settings.Disabled,
        Required = settings.Required,
        ErrorMessage = settings.ErrorMessage,
        CssClass = settings.CssClass,
        WrapperCssClass = settings.WrapperCssClass,
        OnChange = settings.OnChange,
        OnClick = settings.OnClick,
        Link = settings.Link,
        ExtraAttributes = settings.ExtraAttributes,
        //
        Placeholder = settings.Placeholder
    };

    @Render(textField)

    List<string> jsAttributes = new List<string>();

    jsAttributes.Add("mode: '" + Enum.GetName(typeof(DateTimeFieldMode), settings.Mode).ToLower() + "'");

    if (!string.IsNullOrEmpty(settings.DateFormat))
    {
        jsAttributes.Add("dateFormat: '" + settings.DateFormat + "'");
    }
    if (!string.IsNullOrEmpty(settings.MinDate))
    {
        jsAttributes.Add("minDate: '" + settings.MinDate + "'");
    }
    if (!string.IsNullOrEmpty(settings.MaxDate))
    {
        jsAttributes.Add("maxDate: '" + settings.MaxDate + "'");
    }
    if (settings.IsInline)
    {
        jsAttributes.Add("inline: " + Converter.ToString(settings.IsInline).ToLower());
    }
    if (settings.EnableTime)
    {
        jsAttributes.Add("enableTime: " + Converter.ToString(settings.EnableTime).ToLower());
    }
    if (settings.EnableWeekNumbers)
    {
        jsAttributes.Add("weekNumbers: " + Converter.ToString(settings.EnableWeekNumbers).ToLower());
    }
    
    jsAttributes.AddRange(settings.GetFlatPickrOptions().Select(x => x.Key + ": " + x.Value));

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            flatpickr("#@textField.Id", {
                @string.Join(",", jsAttributes)
            });
        });
    </script>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderTextField(TextField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/
    
    if (!string.IsNullOrEmpty(settings.OnKeyUp)) { attributes.Add("onkeyup", settings.OnKeyUp); }
    if (!string.IsNullOrEmpty(settings.OnInput)) { attributes.Add("oninput", settings.OnInput); }
    if (!string.IsNullOrEmpty(settings.OnFocus)) { attributes.Add("onfocus", settings.OnFocus); }
    if (settings.ReadOnly) { attributes.Add("readonly", "true"); }
    if (settings.MaxLength != 0) { attributes.Add("maxlength", settings.MaxLength.ToString()); }
    if (!string.IsNullOrEmpty(settings.Placeholder)) { attributes.Add("placeholder", settings.Placeholder); }
    attributes.Add("type", Enum.GetName(typeof(TextFieldType), settings.Type).ToLower());
    if (settings.Type == TextFieldType.Password) { attributes.Add("autocomplete", "off"); };
    if (settings.Value != null) { attributes.Add("value", settings.Value); }

    settings.CssClass = "u-full-width " + settings.CssClass;

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    string noMargin = "u-no-margin";
    if (!settings.ReadOnly) {
        noMargin = "";
    }

    <div class="form__field-group u-full-width @noMargin @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    settings.Link.ButtonLayout = ButtonLayout.LinkClean;

                    <div class="u-pull--right">
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @if (settings.ActionButton != null)
        {
            settings.ActionButton.CssClass += " btn--condensed u-no-margin";
            <div class="form__field-combi u-no-margin dw-mod">
                <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
                @Render(settings.ActionButton)
            </div>
        }
        else
        {
            <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderNumberField(NumberField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/

    if (!string.IsNullOrEmpty(settings.OnKeyUp)) { attributes.Add("onkeyup", settings.OnKeyUp); }
    if (!string.IsNullOrEmpty(settings.OnInput)) { attributes.Add("oninput", settings.OnInput); }
    if (!string.IsNullOrEmpty(settings.OnFocus)) { attributes.Add("onfocus", settings.OnFocus); }
    if (settings.ReadOnly) { attributes.Add("readonly", "true"); }
    if (settings.Max != null) { attributes.Add("max", settings.Max.ToString()); }
    if (settings.Min != null) { attributes.Add("min", settings.Min.ToString()); }
    if (settings.Step != 0) { attributes.Add("step", settings.Step.ToString()); }
    if (settings.Value != null && !string.IsNullOrEmpty(settings.Value.ToString())) { attributes.Add("value", settings.Value.ToString()); }
    attributes.Add("type", "number");

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group u-full-width @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @if (settings.ActionButton != null)
        {
            settings.ActionButton.CssClass += " btn--condensed u-no-margin";
            <div class="form__field-combi u-no-margin dw-mod">
                <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
                @Render(settings.ActionButton)
            </div>
        }
        else
        {
            <div class="form__field-combi u-no-margin dw-mod">
                <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
            </div>
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderTextareaField(TextareaField settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();    
    string id = settings.Id;
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(id)) 
    {
        id = Guid.NewGuid().ToString("N");
    }
    
    if (!string.IsNullOrEmpty(id)) { attributes.Add("id", id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnKeyUp)) { attributes.Add("onkeyup", settings.OnKeyUp); }
    if (!string.IsNullOrEmpty(settings.OnInput)) { attributes.Add("oninput", settings.OnInput); }
    if (!string.IsNullOrEmpty(settings.OnFocus)) { attributes.Add("onfocus", settings.OnFocus); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (!string.IsNullOrEmpty(settings.Placeholder)) { attributes.Add("placeholder", settings.Placeholder); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (settings.ReadOnly) { attributes.Add("readonly", "true"); }
    if (settings.MaxLength != 0) { attributes.Add("maxlength", settings.MaxLength.ToString()); }
    if (settings.Rows != 0) { attributes.Add("rows", settings.Rows.ToString()); }
    attributes.Add("name", settings.Name);

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    <div class="form__field-group @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div> 
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        <textarea class="u-full-width @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@settings.Value</textarea>

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderHiddenField(HiddenField settings) {
    var attributes = new Dictionary<string, string>();
    attributes.Add("type", "hidden");
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (settings.Value != null) { attributes.Add("value", settings.Value); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }

    <input @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)/>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderCheckboxField(CheckboxField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }
    
    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }
    
    attributes.Add("type", "checkbox");
    if (settings.Checked) { attributes.Add("checked", "true"); }
    settings.CssClass = "form__control " + settings.CssClass;
    if (settings.Value != null) { attributes.Add("value", settings.Value); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group @settings.WrapperCssClass dw-mod">
        <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            <label for="@settings.Id" class="dw-mod">@settings.Label</label>
        }

        @if (settings.Link != null) {
            <span>
                @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                @Render(settings.Link)
            </span>
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text checkbox-help dw-mod">@settings.HelpText</small>
        }
        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderCheckboxListField(CheckboxListField settings)
{
    <div class="form__field-group @settings.WrapperCssClass u-margin-bottom dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        <div class="u-pull--left">
            @if (!string.IsNullOrEmpty(settings.HelpText))
            {
                <small class="form__help-text">@settings.HelpText</small>
            }

            @foreach (var item in settings.Options)
            {
                if (settings.Required)
                {
                    item.Required = true;
                }
                if (settings.Disabled)
                {
                    item.Disabled = true;
                }
                if (!string.IsNullOrEmpty(settings.Name))
                {
                    item.Name = settings.Name;
                }
                if (!string.IsNullOrEmpty(settings.CssClass))
                {
                    item.CssClass += settings.CssClass;
                }

                /* value is not supported */

                if (!string.IsNullOrEmpty(settings.OnClick))
                {
                    item.OnClick += settings.OnClick;
                }
                if (!string.IsNullOrEmpty(settings.OnChange))
                {
                    item.OnChange += settings.OnChange;
                }
                @Render(item)
            }

            @Render(new NotificationMessage { Message = settings.ErrorMessage })
        </div>
        
    </div>
}
@using Dynamicweb.Rapido.Blocks.Components.General

@* Component *@

@helper RenderSearch(Search settings)
{
    var searchValue = HttpContext.Current.Request.QueryString.Get(settings.SearchParameter) ?? "";
    var groupValue = HttpContext.Current.Request.QueryString.Get(settings.GroupsParameter) ?? "";

    if (string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    var resultAttributes = new Dictionary<string, string>();

    if (settings.PageSize != 0)
    {
        resultAttributes.Add("data-page-size", settings.PageSize.ToString());
    }
    if (!string.IsNullOrEmpty(settings.GroupItemsFeedUrl))
    {
        resultAttributes.Add("data-groups-feed-url", settings.GroupItemsFeedUrl);
        if (!string.IsNullOrEmpty(groupValue))
        {
            resultAttributes.Add("data-selected-group", groupValue);
        }
        if (!string.IsNullOrEmpty(settings.GroupsParameter))
        {
            resultAttributes.Add("data-groups-parameter", settings.GroupsParameter);
        }
    }
    resultAttributes.Add("data-force-init", "true");
    if (settings.GoToFirstSearchResultOnEnter)
    {
        resultAttributes.Add("data-go-to-first-search-result-on-enter", settings.GoToFirstSearchResultOnEnter.ToString().ToLower());
    }
    if (!string.IsNullOrEmpty(settings.SearchParameter))
    {
        resultAttributes.Add("data-search-parameter", settings.SearchParameter);
    }
    resultAttributes.Add("data-search-feed-url", settings.SearchData.SearchFeedUrl);
    resultAttributes.Add("data-results-template-id", settings.SearchData.ResultsTemplateId);

    if (settings.SecondSearchData != null) 
    {
        resultAttributes.Add("data-second-search-feed-url", settings.SecondSearchData.SearchFeedUrl);
        resultAttributes.Add("data-second-results-template-id", settings.SecondSearchData.ResultsTemplateId);
    }
    if (!string.IsNullOrEmpty(settings.ResultsPageUrl)) 
    {
        resultAttributes.Add("data-results-page-url", settings.ResultsPageUrl);
    }

    resultAttributes = resultAttributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    string searchFieldCss = (settings.SearchButton == null) ? "search--with-icon" : "";

    <div class="search @settings.CssClass @searchFieldCss js-search-data-source dw-mod" id="@settings.Id" @ComponentMethods.AddAttributes(resultAttributes)>
        @if (!string.IsNullOrEmpty(settings.GroupItemsFeedUrl))
        {
            <button type="button" class="search__groups-btn dw-mod js-search-groups-btn">@Translate("All")</button>
            <ul class="dropdown dropdown--absolute-position dw-mod search__groups-results js-search-groups-list"></ul>
        }

        <input type="text" class="search__field dw-mod js-search-field" placeholder="@settings.Placeholder" value="@searchValue">
        
        <div class="dropdown dropdown--absolute-position search__results dw-mod js-search-results @(settings.SecondSearchData != null ? "search__results--combined" : "")">
            @if (settings.SecondSearchData != null)
            {
                <div class="search__column search__column--products dw-mod">
                    <div class="search__column-header dw-mod">@Translate("Products")</div>
                    <ul class="search__results-list dw-mod js-search-results-list" id="@(settings.Id)_ResultsList"></ul>
                    @if (!string.IsNullOrEmpty(settings.SearchData.ResultsPageUrl))
                    {
                        @Render(new Link {
                            Title = Translate("View all"),
                            CssClass = "js-view-all-button u-margin",
                            Href = settings.SearchData.ResultsPageUrl
                        });
                    }
                </div>
                <div class="search__column search__column--pages dw-mod">
                    <div class="search__column-header">@Translate("Pages")</div>
                    <ul class="search__results-list dw-mod js-search-results-second-list" id="@(settings.Id)_SecondResultsList"></ul>
                    @if (!string.IsNullOrEmpty(settings.SecondSearchData.ResultsPageUrl))
                    {
                        @Render(new Link
                        {
                            Title = Translate("View all"),
                            CssClass = "js-view-all-button u-margin",
                            Href = settings.SecondSearchData.ResultsPageUrl
                        });
                    }
                </div>
            }
            else
            {
                <div class="search__column search__column--only dw-mod">
                    <ul class="search__results-list dw-mod js-search-results-list" id="@(settings.Id)_ResultsList"></ul>
                    @if (!string.IsNullOrEmpty(settings.SearchData.ResultsPageUrl))
                    {
                        @Render(new Link {
                            Title = Translate("View all"),
                            CssClass = "js-view-all-button u-margin",
                            Href = settings.SearchData.ResultsPageUrl
                        });
                    }
                </div>
            }
        </div>

        @if (settings.SearchButton != null)
        {
            settings.SearchButton.CssClass += " search__btn js-search-btn";
            if (settings.RenderDefaultSearchIcon)
            {
                settings.SearchButton.Icon = new Icon { Name = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("SearchIcon").SelectedValue };
            }
            @Render(settings.SearchButton);
        }
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderSelectField(SelectField settings)
{
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id))
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    <div class="form__field-group u-full-width @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div> 
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @if (settings.ActionButton != null)
        {
            settings.ActionButton.CssClass += " btn--condensed u-no-margin";
            <div class="form__field-combi u-no-margin dw-mod">
                @RenderSelectBase(settings)
                @Render(settings.ActionButton)
            </div>
        }
        else
        {
            @RenderSelectBase(settings)
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}

@helper RenderSelectBase(SelectField settings)
{
    var attributes = new Dictionary<string, string>();

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <select @ComponentMethods.AddAttributes(resultAttributes) class="u-full-width @settings.CssClass dw-mod">
        @if (settings.Default != null)
        {
            @Render(settings.Default)
        }

        @foreach (var item in settings.Options)
        {
            if (settings.Value != null) {
                item.Checked = item.Value == settings.Value;
            }
            @Render(item)
        }
    </select>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderRadioButtonField(RadioButtonField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/
    
    attributes.Add("type", "radio");
    if (settings.Checked) { attributes.Add("checked", "true"); }
    settings.CssClass = "form__control " + settings.CssClass;
    if (settings.Value != null) { attributes.Add("value", settings.Value); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group @settings.WrapperCssClass dw-mod">
        <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            <label for="@settings.Id" class="dw-mod">@settings.Label</label>
        }
        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }
        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderRadioButtonListField(RadioButtonListField settings)
{
    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    <div class="form__field-group @settings.WrapperCssClass u-margin-bottom dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            <label>@settings.Label</label>
        }
        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @foreach (var item in settings.Options)
        {
            if (settings.Required)
            {
                item.Required = true;
            }
            if (settings.Disabled)
            {
                item.Disabled = true;
            }
            if (!string.IsNullOrEmpty(settings.Name))
            {
                item.Name = settings.Name;
            }
            if (settings.Value != null && settings.Value == item.Value)
            {
                item.Checked = true;
            }
            if (!string.IsNullOrEmpty(settings.OnClick))
            {
                item.OnClick += settings.OnClick;
            }
            if (!string.IsNullOrEmpty(settings.OnChange))
            {
                item.OnChange += settings.OnChange;
            }
            if (!string.IsNullOrEmpty(settings.CssClass))
            {
                item.CssClass += settings.CssClass;
            }
            @Render(item)
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderNotificationMessage(NotificationMessage settings)
{
    if (!string.IsNullOrEmpty(settings.Message))
    {
        var attributes = new Dictionary<string, string>();
        if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }

        string messageTypeClass = Enum.GetName(typeof(NotificationMessageType), settings.MessageType).ToLower();
        string messageLayoutClass = Enum.GetName(typeof(NotificationMessageLayout), settings.MessageLayout).ToLower();
        string minHeightClass = settings.Icon != null ? "u-min-h70px" : "";

        <div class="notification-message-@messageTypeClass notification-message-@messageLayoutClass @messageLayoutClass @minHeightClass @settings.CssClass u-full-width  dw-mod" @ComponentMethods.AddAttributes(attributes)>
            @if (settings.Icon != null) {
                settings.Icon.Label = !string.IsNullOrEmpty(settings.Icon.Label) ? settings.Message + settings.Icon.Label : settings.Message;
                @Render(settings.Icon)
            } else {
                @settings.Message
            }
        </div>
    }
}
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component *@

@helper RenderHandlebarsRoot(HandlebarsRoot settings) {
    string preRender = !String.IsNullOrEmpty(settings.PreRenderScriptTemplate) ? "data-pre-render-template=\"" + settings.PreRenderScriptTemplate + "\"" : "";

    <div class="@settings.CssClass dw-mod js-handlebars-root" id="@settings.Id" data-template="@settings.ScriptTemplate" data-json-feed="@settings.FeedUrl" data-init-onload="@settings.InitOnLoad.ToString()" data-preloader="@settings.Preloader" @preRender>
        @if (settings.SubBlocks != null) {
            @RenderBlockList(settings.SubBlocks)
        }
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using System.Text.RegularExpressions


@* Component *@

@helper RenderSticker(Sticker settings) {
    if (!String.IsNullOrEmpty(settings.Title)) {
        string size = settings.Size.ToString() != "None" ? "" + "stickers-container__tag--" + settings.Size.ToString().ToLower() : "";
        string style = settings.Style.ToString() != "None" ? "" + "stickers-container__tag--" + settings.Style.ToString().ToLower() : "";

        Dictionary<String, String> optionalAttributes = new Dictionary<string, string>();
        if (!String.IsNullOrEmpty(settings.Color) || !String.IsNullOrEmpty(settings.BackgroundColor)) {
            string styleTag = !String.IsNullOrEmpty(settings.Color) ? "color: " + settings.Color + "; " : "";
            styleTag += !String.IsNullOrEmpty(settings.BackgroundColor) ? "background-color: " + settings.BackgroundColor + "; " : "";
            optionalAttributes.Add("style", styleTag);
        }

        <div class="stickers-container__tag @size @style @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@settings.Title</div>   
    }
}

@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderStickersCollection(StickersCollection settings)
{
    if (settings.Stickers.Count > 0) 
    {
        string position = "stickers-container--" + Regex.Replace(settings.Position.ToString(), "([a-z])([A-Z])", "$1-$2").ToLower();

        <div class="stickers-container @position @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
            @foreach (Sticker sticker in settings.Stickers)
            {
                @Render(sticker)
            }
        </div> 
    }
}

@using Dynamicweb.Rapido.Blocks.Components.General


@* Component *@

@helper RenderForm(Form settings) {
    if (settings != null)
    {
        Dictionary<string, string> optionalAttributes = new Dictionary<string, string>();
        if (!string.IsNullOrEmpty(settings.Action)) { optionalAttributes.Add("action", settings.Action); };
        if (!string.IsNullOrEmpty(settings.Name)) { optionalAttributes.Add("name", settings.Name); };
        if (!string.IsNullOrEmpty(settings.OnSubmit)) { optionalAttributes.Add("onsubmit", settings.OnSubmit); };
        var enctypes = new Dictionary<string, string>
        {
            { "multipart", "multipart/form-data" },
            { "text", "text/plain" },
            { "application", "application/x-www-form-urlencoded" }
        };
        if (settings.Enctype != FormEnctype.none) { optionalAttributes.Add("enctype", enctypes[Enum.GetName(typeof(FormEnctype), settings.Enctype).ToLower()]); };
        optionalAttributes.Add("method", settings.Method.ToString());

        if (!string.IsNullOrEmpty(settings.FormStartMarkup))
        {
            @settings.FormStartMarkup
        }
        else
        {
            @:<form class="@settings.CssClass u-no-margin dw-mod" @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        }

        foreach (var field in settings.GetFields())
        {
            @Render(field)
        }

        @:</form>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderText(Text settings)
{
    @settings.Content 
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderContentModule(ContentModule settings) {
    if (!string.IsNullOrEmpty(settings.Content))
    {
        @settings.Content 
    } 
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderModal(Modal settings) {
    if (settings != null)
    {
        string modalId = !string.IsNullOrEmpty(settings.Id) ? settings.Id : Guid.NewGuid().ToString("N");

        string onchange = !string.IsNullOrEmpty(settings.OnClose) ? "onchange=\"if(!this.checked){" + settings.OnClose + "}\"" : "";

        <input type="checkbox" id="@(modalId)ModalTrigger" class="modal-trigger" @onchange />

        <div class="modal-container">
            @if (!settings.DisableDarkOverlay)
            {
                <label for="@(modalId)ModalTrigger" id="@(modalId)ModalOverlay" class="modal-overlay"></label>
            }
            <div class="modal modal--@settings.Width.ToString().ToLower() modal-height--@settings.Height.ToString().ToLower()" id="@(modalId)Modal">
                @if (settings.Heading != null)
                {
                    if (!string.IsNullOrEmpty(settings.Heading.Title))
                    {
                        <div class="modal__header">
                            @Render(settings.Heading)
                        </div>
                    }
                }
                <div class="modal__body @(settings.Width.ToString().ToLower() == "full" ? "modal__body--full" : "")">
                    @if (!string.IsNullOrEmpty(settings.BodyText))
                    {
                        @settings.BodyText
                    }
                    @if (settings.BodyTemplate != null)
                    {
                        @settings.BodyTemplate
                    }
                    @{
                        var actions = settings.GetActions();
                    }
                </div>
                @if (actions.Length > 0)
                {
                    <div class="modal__footer">
                        @foreach (var action in actions)
                        {
                            if (Pageview.Device.ToString() != "Mobile") {
                                action.CssClass += " u-no-margin";
                            } else {
                                action.CssClass += " u-full-width u-margin-bottom";
                            }

                            @Render(action)
                        }
                    </div>
                }
                <label class="modal__close-btn" for="@(modalId)ModalTrigger"></label>
            </div>
        </div>
    } 
}
@using Dynamicweb.Rapido.Blocks.Components.General

@* Component *@

@helper RenderMediaListItem(MediaListItem settings)
{
    <div class="media-list-item @settings.CssClass dw-mod" @(!string.IsNullOrEmpty(settings.Id) ? "id=\"" + settings.Id + "\"" : "")>
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            if (!string.IsNullOrEmpty(settings.Link))
            {
                @Render(new Link
                {
                    Href = settings.Link,
                    CssClass = "media-list-item__sticker dw-mod",
                    ButtonLayout = ButtonLayout.None,
                    Title = settings.Label,
                    OnClick = !string.IsNullOrEmpty(settings.OnClick) ? settings.OnClick : ""
                })
            }
            else if (!string.IsNullOrEmpty(settings.OnClick))
            {
                <span class="media-list-item__sticker dw-mod" onclick="@(settings.OnClick)">
                    <span class="u-uppercase">@settings.Label</span>
                </span>
            }
            else
            {
                <span class="media-list-item__sticker media-list-item__sticker--no-link dw-mod">
                    <span class="u-uppercase">@settings.Label</span>
                </span>
            }
        }
        <div class="media-list-item__wrap">
            <div class="media-list-item__info dw-mod">
                <div class="media-list-item__header dw-mod">
                    @if (!string.IsNullOrEmpty(settings.Title))
                    {
                        if (!string.IsNullOrEmpty(settings.Link))
                        {
                            @Render(new Link
                            {
                                Href = settings.Link,
                                CssClass = "media-list-item__name dw-mod",
                                ButtonLayout = ButtonLayout.None,
                                Title = settings.Title,
                                OnClick = !string.IsNullOrEmpty(settings.OnClick) ? settings.OnClick : ""
                            })
                        }
                        else if (!string.IsNullOrEmpty(settings.OnClick))
                        {
                            <span class="media-list-item__name dw-mod" onclick="@(settings.OnClick)">@settings.Title</span>
                        }
                        else
                        {
                            <span class="media-list-item__name media-list-item__name--no-link dw-mod">@settings.Title</span>
                        }
                    }

                    @if (!string.IsNullOrEmpty(settings.Status))
                    {
                        <div class="media-list-item__state dw-mod">@settings.Status</div>
                    }
                </div>
                @{
                    settings.InfoTable.CssClass += " media-list-item__parameters-table";
                }
            
                @Render(settings.InfoTable)
            </div>
            <div class="media-list-item__actions dw-mod">
                <div class="media-list-item__actions-list dw-mod">
                    @{
                        var actions = settings.GetActions();

                        foreach (ButtonBase action in actions)
                        {
                            action.ButtonLayout = ButtonLayout.None;
                            action.CssClass += " media-list-item__action link";

                            @Render(action)
                        }
                    }
                </div>

                @if (settings.SelectButton != null && !string.IsNullOrEmpty(settings.SelectButton.Title))
                {
                    settings.SelectButton.CssClass += " u-no-margin";

                    <div class="media-list-item__action-button">
                        @Render(settings.SelectButton)
                    </div>
                }
            </div>
        </div>
    </div>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderTable(Table settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    
    var enumToClasses = new Dictionary<TableDesign, string> 
    {
        { TableDesign.Clean, "table--clean" },
        { TableDesign.Bordered, "table--bordered" },
        { TableDesign.Striped, "table--striped" },
        { TableDesign.Hover, "table--hover" },
        { TableDesign.Compact, "table--compact" },
        { TableDesign.Condensed, "table--condensed" },
        { TableDesign.NoTopBorder, "table--no-top-border" }
    };
    string tableDesignClass = "";
    if (settings.Design != TableDesign.None) 
    {
        tableDesignClass = enumToClasses[settings.Design];
    }

    if (!string.IsNullOrEmpty(settings.CssClass) || settings.Design != TableDesign.None) { attributes.Add("class", "table " + tableDesignClass + " " + settings.CssClass + " dw-mod"); }
    
    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary(d => d.Key, d => d.Last().Value);

    <table @ComponentMethods.AddAttributes(resultAttributes)>
        @if (settings.Header != null)
        {
            <thead>
                @Render(settings.Header)
            </thead>
        }
        <tbody>
            @foreach (var row in settings.Rows)
            {
                @Render(row)
            }
        </tbody>
        @if (settings.Footer != null)
        {
            <tfoot>
                @Render(settings.Footer)
            </tfoot>
        }
    </table>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderTableRow(TableRow settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    
    var enumToClasses = new Dictionary<TableRowDesign, string> 
    {
        { TableRowDesign.NoBorder, "table__row--no-border" },
        { TableRowDesign.Border, "table__row--border" },
        { TableRowDesign.TopBorder, "table__row--top-line" },
        { TableRowDesign.BottomBorder, "table__row--bottom-line" },
        { TableRowDesign.Solid, "table__row--solid" }
    };

    string tableRowDesignClass = "";
    if (settings.Design != TableRowDesign.None) 
    {
        tableRowDesignClass = enumToClasses[settings.Design];
    }

    if (!string.IsNullOrEmpty(settings.CssClass) || settings.Design != TableRowDesign.None) { attributes.Add("class", "table__row " + tableRowDesignClass + " " + settings.CssClass + " dw-mod"); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary(d => d.Key, d => d.Last().Value);

    <tr @ComponentMethods.AddAttributes(resultAttributes)>
        @foreach (var cell in settings.Cells)
        {
            if (settings.IsHeaderRow)
            {
                cell.IsHeader = true;
            }
            @Render(cell)
        }
    </tr>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@helper RenderTableCell(TableCell settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (settings.Colspan != 0) { attributes.Add("colspan", Converter.ToString(settings.Colspan)); }
    if (settings.Rowspan != 0) { attributes.Add("rowspan", Converter.ToString(settings.Rowspan)); }
    if (!string.IsNullOrEmpty(settings.CssClass)) { attributes.Add("class", settings.CssClass + " dw-mod"); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary(d => d.Key, d => d.Last().Value);

    string tagName = settings.IsHeader ? "th" : "td";

    @("<" + tagName + " " + ComponentMethods.AddAttributes(resultAttributes) + ">")
        @settings.Content
    @("</" + tagName + ">");
}
@using System.Linq
@using Dynamicweb.Rapido.Blocks.Components.General

@* Component *@

@helper RenderPagination(Dynamicweb.Rapido.Blocks.Components.General.Pagination settings)
{
    var pageNumberQueryStringName = Dynamicweb.Rapido.Services.Pagination.GetPageNumberQueryStringName(settings);    // Get the proper 'page number' query string parameter
    var queryParameters = Dynamicweb.Rapido.Services.Url.GetQueryParameters(pageNumberQueryStringName);              // Get the NameValueCollection from the querystring

    if (settings.NumberOfPages > 1)
    {
        string url = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) + "/Default.aspx";
        string ariaLabel = !string.IsNullOrWhiteSpace(settings.AriaLabel) ? settings.AriaLabel : Translate("Page navigation");
        Dictionary<string, int> startAndEndPageNumber = Dynamicweb.Rapido.Services.Pagination.GetStartAndEndPageNumber(settings);

        <div class="pager u-margin-top dw-mod @settings.CssClass" aria-label="@ariaLabel">
            @if (settings.ShowPagingInfo)
            {
                <div class="pager__info dw-mod">
                    @Translate("Page") @settings.CurrentPageNumber @Translate("of") @settings.NumberOfPages
                </div>
            }
            <ul class="pager__list dw-mod">
                @if (!string.IsNullOrWhiteSpace(settings.FirstPageUrl) && settings.ShowFirstAndLastControls)
                {
                    @Render(new PaginationItem { Link = settings.FirstPageUrl, Icon = settings.FirstIcon })
                }
                @if (!string.IsNullOrWhiteSpace(settings.PreviousPageUrl) && settings.ShowNextAndPrevControls)
                {
                    @Render(new PaginationItem { Link = settings.PreviousPageUrl, Icon = settings.PrevIcon })
                }
                @if (settings.GetPages().Any())
                {
                    foreach (var page in settings.GetPages())
                    {
                        @Render(page)
                    }
                }
                else
                {
                    for (var page = startAndEndPageNumber["StartPage"]; page <= startAndEndPageNumber["EndPage"]; page++)
                    {
                        queryParameters = Dynamicweb.Rapido.Services.Url.UpdateQueryStringParameter(queryParameters, pageNumberQueryStringName, page.ToString());
                        @Render(new PaginationItem { Label = page.ToString(), Link = Dynamicweb.Rapido.Services.Url.BuildUri(url, queryParameters).PathAndQuery, IsActive = (settings.CurrentPageNumber == page) });
                    }
                }
                @if (!string.IsNullOrWhiteSpace(settings.NextPageUrl) && settings.ShowNextAndPrevControls)
                {
                    @Render(new PaginationItem { Link = settings.NextPageUrl, Icon = settings.NextIcon })
                }
                @if (!string.IsNullOrWhiteSpace(settings.LastPageUrl) && settings.ShowFirstAndLastControls)
                {
                    @Render(new PaginationItem { Link = settings.LastPageUrl, Icon = settings.LastIcon })
                }
            </ul>
        </div>
    }
}

@helper RenderPaginationItem(PaginationItem settings)
{
    if (settings.Icon == null)
    {
        settings.Icon = new Icon();
    }

    settings.Icon.Label = settings.Label;
    <li class="pager__btn dw-mod">
        @if (settings.IsActive)
        {
            <span class="pager__num pager__num--current dw-mod">
                @Render(settings.Icon)
            </span>
        }
        else
        {
            <a href="@settings.Link" class="pager__num dw-mod">
                @Render(settings.Icon)
            </a>
        }
    </li>
}


@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce


@using Dynamicweb.Frontend
@using System.Reflection
@using Dynamicweb.Content.Items
@using System.Web.UI.HtmlControls
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.Articles

@* Components for the articles *@
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleBanner(dynamic settings) { 
    string filterClasses = "image-filter image-filter--darken";
    settings.Layout = ArticleHeaderLayout.Banner;

    if (settings.Image != null)
    {
        if (settings.Image.Path != null)
        {
            <section class="multiple-paragraphs-container u-color-light paragraph-container--full-width">
                <div class="background-image @filterClasses dw-mod">
                    <div class="background-image__wrapper @filterClasses dw-mod">
                        @{ 
                            settings.Image.CssClass += "background-image__cover dw-mod";
                        }
                        @Render(settings.Image)
                    </div>
                </div>
                <div class="center-container dw-mod">
                    <div class="grid">
                        <div class="grid__col-md-8 grid__col-xs-12 paragraph-container paragraph-container--height-lg">
                            <div class="u-left-middle">
                                <div>
                                    @if (!String.IsNullOrEmpty(settings.Heading))
                                    {
                                        <h1 class="article__header article__header--giant dw-mod" style="color: @settings.TextColor">@settings.Heading</h1>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Subheading))
                                    {
                                        <div class="article__leadtext dw-mod" style="color: @settings.TextColor">@settings.Subheading</div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                                    {
                                        <small class="article__post-info u-margin-bottom--lg dw-mod" style="color: @settings.TextColor">@settings.Author @settings.Date</small>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Link)) {
                                        <div class="grid__cell">
                                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        @if (settings.ExternalParagraphId != 0)
                        {
                            <div class="grid__col-md-4 grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-auto dw-mod">
                                <div class="u-color-light-gray--bg u-color-dark dw-mod">
                                    @RenderParagraphContent(settings.ExternalParagraphId)
                                </div>
                            </div> 
                        }
                        
                    </div>
                </div>
            </section>
            if (!String.IsNullOrEmpty(settings.Image.Caption)) {
                <div class="image-caption dw-mod">@settings.Image.Caption</div>
            }
        }
        else 
        {
            settings.Layout = ArticleHeaderLayout.Clean;
            @RenderArticleCleanHeader(settings);
        }
    }
    else
    {
        settings.Layout = ArticleHeaderLayout.Clean;
        @RenderArticleCleanHeader(settings);
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleHeader(ArticleHeader settings) {
    dynamic[] methodParameters = new dynamic[1]; 
    methodParameters[0] = settings; 
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleHeaderCustom");

    if (customMethod != null)
    {  
        @customMethod.Invoke(this, methodParameters).ToString();                                         
    } else {
        switch (settings.Layout)
        {
            case ArticleHeaderLayout.Clean:
                @RenderArticleCleanHeader(settings);
                break;
            case ArticleHeaderLayout.Split:
                @RenderArticleSplitHeader(settings);
                break;
            case ArticleHeaderLayout.Banner:
                @RenderArticleBannerHeader(settings);
                break;
            case ArticleHeaderLayout.Overlay:
                @RenderArticleOverlayHeader(settings);
                break;
            default:
                @RenderArticleCleanHeader(settings);
                break;
        }
    }
}

@helper RenderArticleCleanHeader(ArticleHeader settings) {
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleCleanHeaderCustom");

    if (customMethod != null)
    {
            @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        string contentColumns = settings.TextLayout != ArticleHeaderTextLayout.Full ? "8" : "12";

        <div class="grid grid--align-content-start grid--justify-start">
            <div class="grid__col-md-@contentColumns grid__col-sm-12 u-padding--lg dw-mod">
                @if (!String.IsNullOrEmpty(settings.Category) || !String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date) || settings.RatingOutOf != 0)
                {
                    <div class="u-border-bottom u-padding-bottom">
                        @if (!String.IsNullOrEmpty(settings.Category))
                        {
                            <div class="u-pull--left">
                                <div class="article__category dw-mod" style="color: @settings.CategoryColor">@settings.Category</div>
                            </div>
                        }
                        <div class="u-pull--right">
                            @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                            {
                                <small class="article__post-info dw-mod">@settings.Author @settings.Date</small>
                            }
                            @if (settings.RatingOutOf != 0)
                            {
                                @Render(new Rating { Score = settings.RatingScore, OutOf = settings.RatingOutOf })
                            }
                        </div>
                    </div>
                }

                <div class="grid__cell">
                   @if (!String.IsNullOrEmpty(settings.Heading))
                   {
                        <h1 class="article__header article__header--giant dw-mod">@settings.Heading</h1>
                   }
                    @if (settings.Image != null)
                    {
                        if (settings.Image.Path != null)
                        {
                            <div class="u-padding-bottom--lg">
                                @Render(settings.Image)
                            </div>
                        }
                    }
                    @if (!String.IsNullOrEmpty(settings.Subheading))
                    {
                        <div class="article__leadtext dw-mod">@settings.Subheading</div>
                    }
                    @if (!String.IsNullOrEmpty(settings.Link))
                    {
                        <div class="grid__cell">
                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                        </div>
                    }
                </div>
            </div>
            @if (settings.ExternalParagraphId != 0)
            {
                <div class="grid__col-md-4 grid__col-sm-12 u-padding--lg u-color-light-gray--bg dw-mod">
                    @RenderParagraphContent(settings.ExternalParagraphId)
                </div>
            }
        </div>
    }
}

@helper RenderArticleSplitHeader(ArticleHeader settings) { 
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleSplitHeaderCustom");

    if (customMethod != null)
    {
        @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        string headerColumnWidth = settings.ExternalParagraphId != 0 ? "4" : "6";
    
        if (settings.Image != null)
        {
            if (settings.Image.Path != null)
            {
                <section class="multiple-paragraphs-container paragraph-container--full-width">
                    <div class="grid">
                        <div class="grid__col-md-@headerColumnWidth grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-xl dw-mod">
                            <div class="u-left-middle u-padding--lg">
                                <div>
                                    @if (!String.IsNullOrEmpty(settings.Category))
                                    {
                                        <div class="article__category dw-mod" style="color: @settings.CategoryColor">@settings.Category</div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Heading))
                                    {
                                        <h1 class="article__header article__header--giant dw-mod">@settings.Heading</h1>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Subheading))
                                    {
                                        <div class="article__leadtext dw-mod">@settings.Subheading</div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                                    {
                                        <small class="article__post-info u-pull--left dw-mod">@settings.Author @settings.Date</small>
                                    }
                                    @if (settings.RatingOutOf != 0)
                                    {
                                        <div class="u-pull--right">
                                            @Render(new Rating { Score = settings.RatingScore, OutOf = settings.RatingOutOf })
                                        </div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Link)) {
                                        <div class="u-full-width u-pull--left u-margin-top">
                                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="grid__col-md-@headerColumnWidth grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-auto dw-mod" style="background-image:url(/Admin/Public/GetImage.ashx?width=1800&amp;height=1100&amp;crop=0&amp;Compression=85&amp;DoNotUpscale=true&amp;image=@settings.Image.Path); background-position: center center; background-size: cover;"></div>
                        @if (settings.ExternalParagraphId != 0)
                        {
                            <div class="grid__col-md-4 grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-auto u-color-light-gray--bg dw-mod">
                                @RenderParagraphContent(settings.ExternalParagraphId)
                            </div> 
                        }
                    </div>
                </section>
            }
        }
        else
        {
            @RenderArticleCleanHeader(settings);
        } 
    }   
}

@helper RenderArticleOverlayHeader(ArticleHeader settings) {
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleOverlayHeaderCustom");

    if (customMethod != null)
    {
        @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        string contentColumns = settings.TextLayout != ArticleHeaderTextLayout.Full ? "8" : "12";
        string contentAlignment = settings.TextLayout == ArticleHeaderTextLayout.Center ? "grid--justify-center" : "";

        if (settings.Image != null)
        {
            if (settings.Image.Path != null)
            {
                if (settings.ExternalParagraphId == 0)
                {
                    <section class="multiple-paragraphs-container u-color-light paragraph-container--full-width">
                        <div class="background-image image-filter image-filter--darken dw-mod">
                            <div class="background-image__wrapper image-filter image-filter--darken dw-mod">
                                @{ 
                                    settings.Image.CssClass += "background-image__cover dw-mod";
                                }
                                @Render(settings.Image)
                            </div>
                        </div>
                        <div class="center-container dw-mod">
                            <div class="grid @contentAlignment">
                                <div class="grid__col-md-@contentColumns grid__col-xs-12 paragraph-container paragraph-container--height-xl dw-mod">
                                    @if (!string.IsNullOrEmpty(settings.Heading))
                                    {
                                        <h1 class="article__header article__header--giant u-padding-top--lg dw-mod" style="color: @settings.TextColor">@settings.Heading</h1>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Subheading))
                                    {
                                        <div class="article__leadtext dw-mod" style="color: @settings.TextColor">@settings.Subheading</div>
                                    }
                                    <div class="u-margin-top">
                                        @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                                        {
                                            <small class="article__post-info u-pull--left dw-mod" style="color: @settings.TextColor">@settings.Author @settings.Date</small>
                                        }
                                        @if (settings.RatingOutOf != 0)
                                        {
                                            <div class="u-pull--right">
                                                @Render(new Rating { Score = settings.RatingScore, OutOf = settings.RatingOutOf })
                                            </div>
                                        }
                                    </div>
                                    @if (!String.IsNullOrEmpty(settings.Link))
                                    {
                                        <div class="grid__cell">
                                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </section>
                }
                else
                {
                    @RenderArticleBanner(settings);
                }
            }
        }
        else
        {
            @RenderArticleCleanHeader(settings);
        }
    }
}

@helper RenderArticleBannerHeader(dynamic settings) { 
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleBannerHeaderCustom");

    if (customMethod != null)
    {
        @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        @RenderArticleBanner(settings);
    }
}
@using System.Reflection
@using System.Text.RegularExpressions;
@using Dynamicweb.Frontend
@using Dynamicweb.Content.Items
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleBodyRow(ArticleBodyRow settings)
{
    string position = settings.TopLayout == "overlay" ? "article__overlay-offset" : "";
    string contentAlignment = settings.TextLayout == "center" ? "grid--justify-center" : "";

    <div class="grid grid--align-content-start @contentAlignment @position dw-mod">
        @RenderBlockList(settings.SubBlocks)
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleImage(ArticleImage settings)
{
    if (settings.Image != null)
    {
        if (settings.Image.Path != null)
        {
            <div class="u-margin-bottom--lg">
                @Render(settings.Image)
            </div>
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleSubHeader(ArticleSubHeader settings)
{
    if (!String.IsNullOrEmpty(settings.Title))
    {
        <h2 class="article__header">@settings.Title</h2>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleText(ArticleText settings)
{
    if (!String.IsNullOrEmpty(settings.Text))
    {
        string greatTextClass = settings.EnableLargeText == true ? "article__paragraph--great-text" : "";

        <div class="article__paragraph @greatTextClass dw-mod">
            @settings.Text
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleQuote(ArticleQuote settings)
{
    string text = Regex.Replace(settings.Text, "<.*?>", String.Empty);

    <div class="grid u-padding-bottom--lg">
        @if (settings.Image != null)
        {
            if (settings.Image.Path != null) {
                <div class="grid__col-3">
                    <div class="grid__cell-img">
                        @{ 
                            settings.Image.Title = !String.IsNullOrEmpty(settings.Image.Title) ? settings.Image.Title : settings.Author;
                            settings.Image.CssClass += " article__image article__image--ball";
                            settings.Image.ImageDefault.Width = 200;
                            settings.Image.ImageDefault.Height = 200;
                        }
                        @Render(settings.Image)
                    </div>
                </div>
            }
        }
        <div class="grid__col-auto">
            @if (!String.IsNullOrEmpty(settings.Text))
            {
            <div class="article__quote dw-mod">
                <i class="fas fa-quote-right u-margin-bottom--lg"></i>
                @settings.Text
                <i class="fas fa-quote-right"></i>
            </div>
            }
            @if (!String.IsNullOrEmpty(settings.Author))
            {
            <div class="article__quote-author dw-mod">
                - @settings.Author
            </div>
            }
        </div>
    </div>
} 
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleInfoTable(ArticleInfoTable settings)
{
    <table class="table table--clean">
        @foreach (var row in settings.Rows)
        {
            string iconColor = row.IconColor != null ? row.IconColor : "u-brand-color-two";

            <tr>
                @if (!String.IsNullOrEmpty(row.Icon))
                {
                    <td class="u-w32px"><i class="@row.Icon fa-2x @row.IconColor"></i></td>
                }
                <td class="u-no-margin-on-p-elements">
                    <div class="u-bold">@row.Title</div>
                    @if (!String.IsNullOrEmpty(row.SubTitle))
                    {
                        if (row.Link == null)
                        {
                        <div>@row.SubTitle</div>
                        }
                        else
                        {
                        <a href="@row.Link" class="u-color-inherit">@row.SubTitle</a>
                        }
                    }
                </td>
            </tr>
        }
    </table>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleGalleryModal(ArticleGalleryModal settings)
{
    Modal galleryModal = new Modal
    {
        Id = "ParagraphGallery",
        Width = ModalWidth.Full,
        BodyTemplate = RenderArticleGalleryModalContent()
    };

    @Render(galleryModal)
}

@helper RenderArticleGalleryModalContent() {
    <div class="modal__image-min-size-wrapper">
        @Render(new Image {
            Id = "ParagraphGallery",
            Path = "#",
            CssClass = "modal--full__img",
            DisableLazyLoad = true,
            DisableImageEngine = true
        })
    </div>

    <div class="modal__images-counter" id="ParagraphGallery_counter"></div>

    @Render(new Button {
        Id = "ParagraphGallery_prev",
        ButtonType = ButtonType.Button,
        ButtonLayout = ButtonLayout.None,
        CssClass = "modal__prev-btn",
        Icon = new Icon { Prefix = "far", Name = "fa-angle-left", LabelPosition = IconLabelPosition.After },
        OnClick = "Gallery.prevImage('ParagraphGallery')"
    })

    @Render(new Button {
        Id = "ParagraphGallery_next",
        ButtonType = ButtonType.Button,
        ButtonLayout = ButtonLayout.None,
        CssClass = "modal__next-btn",
        Icon = new Icon { Prefix = "far", Name = "fa-angle-right", LabelPosition = IconLabelPosition.After },
        OnClick = "Gallery.nextImage('ParagraphGallery')"
    })
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleRelated(ArticleRelated settings)
{
    string cardClass = Pageview.Device.ToString() != "Tablet" ? "card u-color-light--bg u-full-height" : "";
    string cardFooterClass = Pageview.Device.ToString() != "Tablet" ? "card-footer u-color-light--bg" : "";

    <section class="multiple-paragraphs-container u-color-light-gray--bg paragraph-container--full-width">
        <div class="center-container dw-mod">
            <div class="grid u-padding">
                <div class="grid__col-md-12 grid__col-xs-12">
                    <h2 class="article__header u-no-margin u-margin-top">@settings.Title</h2>
                </div>
            </div>

            <div class="js-handlebars-root u-padding" id="@settings.Title.Replace("  ", String.Empty)" data-template="RelatedSimpleTemplate" data-json-feed="/Default.aspx?ID=@settings.FeedPageId&@settings.Query&ExcludeItemID=@settings.CurrentPageId&PageSize=@settings.PageSize"></div>

            <script id="RelatedSimpleTemplate" type="text/x-template">
                {{#.}}
                <div class="grid u-padding-bottom--lg">
                    {{#Cases}}
                    <div class="grid__col-lg-3 grid__col-sm-6 image-hover--zoom dw-mod">
                        <a href="{{link}}" class="u-full-height u-color-light--bg u-flex u-flex--column">
                            {{#if image}}
                            <div class="u-color-light--bg u-no-padding dw-mod">
                                <div class="flex-img image-hover__wrapper">
                                    <img class="b-lazy" src="/Files/Images/placeholder.gif" data-src="/Admin/Public/GetImage.ashx?width=680&height=314&amp;crop=1&amp;DoNotUpscale=True&amp;Compression=75&amp;image={{image}}" alt="{{title}}" />
                                </div>
                            </div>
                            {{/if}}

                            <div class="card u-color-light--bg u-full-height dw-mod">
                                <h3 class="article-list__item-header u-truncate-text dw-mod">{{title}}</h3>
                                <p class="article__short-summary dw-mod">{{summary}}</p>
                            </div>
                        </a>
                    </div>
                    {{/Cases}}
                </div>
                {{/.}}
            </script>
        </div>
    </section>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleMenu(ArticleMenu settings)
{
    if (!String.IsNullOrEmpty(settings.Title)) {
        <div class="u-margin u-border-bottom">
            <h3 class="u-no-margin">@settings.Title</h3>
        </div>
    }

    <ul class="menu-left u-margin-bottom dw-mod">
        @foreach (var item in settings.Items)
        {
            @Render(item)
        }
    </ul>
}

@helper RenderArticleMenuItem(ArticleMenuItem settings)
{
    string link = !String.IsNullOrEmpty(settings.Link) ? settings.Link : "#";

    if (!String.IsNullOrEmpty(settings.Title)) {
        <li class="menu-left__item dw-mod">
            <a href="@link" onclick="@settings.OnClick" class="menu-left__link dw-mod">@settings.Title</a>
        </li>
    } 
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleList(ArticleList settings)
{
    if (Pageview != null)
    {
        bool isParagraph = Pageview.CurrentParagraph != null ? true : false;
        string[] sortArticlesListBy = new string[2];

        if (isParagraph) {
            sortArticlesListBy = Pageview.CurrentParagraph.Item["SortArticlesListBy"] != null && !string.IsNullOrEmpty(Pageview.CurrentParagraph.Item["SortArticlesListBy"].ToString()) ? Pageview.CurrentParagraph.Item["SortArticlesListBy"].ToString().Split('+') : new string[] { "Date", "ASC" };
        }
        else {
            sortArticlesListBy = Pageview.Item["SortArticlesListBy"] != null && !string.IsNullOrEmpty(Pageview.Item["SortArticlesListBy"].ToString()) ? Pageview.Item["SortArticlesListBy"].ToString().Split('+') : new string[] { "Date", "ASC" };
        }

        string sourcePage = settings.SourcePage != null ? settings.SourcePage : Pageview.ID.ToString();

        if (!settings.DisablePagination) {
            @RenderItemList(new
            {
                ItemType = !String.IsNullOrEmpty(settings.ItemType) ? settings.ItemType : "DynamicArticle",
                ListSourceType = settings.SourceType,
                ListSourcePage = sourcePage,
                ItemFieldsList = "*",
                Filter = settings.Filter,
                ListOrderBy = sortArticlesListBy[0],
                ListOrderByDirection = sortArticlesListBy[1],
                ListSecondOrderBy = sortArticlesListBy[0] == "Date" ? "InFocusSortId" : "Date",
                ListSecondOrderByDirection = "ASC",
                IncludeAllChildItems = true,
                ListTemplate = settings.Template,
                ListPageSize = settings.PageSize.ToString()
            });
        } else {
            @RenderItemList(new
            {
                ItemType = !String.IsNullOrEmpty(settings.ItemType) ? settings.ItemType : "DynamicArticle",
                ListSourceType = settings.SourceType,
                ListSourcePage = sourcePage,
                ItemFieldsList = "*",
                Filter = settings.Filter,
                ListOrderBy = sortArticlesListBy[0],
                ListOrderByDirection = sortArticlesListBy[1],
                ListSecondOrderBy = sortArticlesListBy[0] == "Date" ? "InFocusSortId" : "Date",
                ListSecondOrderByDirection = "ASC",
                IncludeAllChildItems = true,
                ListTemplate = settings.Template,
                ListPageSize = settings.PageSize.ToString(),
                ListViewMode = "Partial",
                ListShowTo = settings.PageSize + 1
            });
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleSummary(ArticleSummary settings)
{
    if (!String.IsNullOrEmpty(settings.Text))
    {
        <div class="article__summary dw-mod">@settings.Text</div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleListCategoryFilter(ArticleListCategoryFilter settings)
{
    string pageId =  Pageview.ID.ToString();
    string selectedFilter = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("sourcePage")) ? HttpContext.Current.Request.QueryString.Get("sourcePage") : Translate("All");
    var query = HttpUtility.ParseQueryString(HttpContext.Current.Request.QueryString.ToString());

    foreach (var option in settings.Categories)
    {
        selectedFilter = selectedFilter == option.Value ? option.Key : selectedFilter;
    }

    if (selectedFilter == pageId)
    {
        selectedFilter = Translate("All");
    }

    if (Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet")
    {
        <div class="u-pull--right u-margin-left">
            <div class="collection u-no-margin">
                <h5>@Translate("Category")</h5>
                <input type="checkbox" id="CategorySelector" class="dropdown-trigger" />
                <div class="dropdown u-w180px dw-mod">
                    <label class="dropdown__header dropdown__btn dw-mod" for="CategorySelector">@Translate(selectedFilter)</label>
                    <div class="dropdown__content dw-mod">
                        @foreach (var option in settings.Categories)
                        {
                        <div class="dropdown__item" onclick="QueryArray.setParametersInCurrentURL({ sourceType: 'Page', sourcePage: '@(option.Key.ToLower() == "all" ? pageId : option.Value)' })">@Translate(option.Key)</div>
                        }
                    </div>
                    <label class="dropdown-trigger-off" for="CategorySelector"></label>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="u-full-width u-margin-bottom">
            <h5 class="u-no-margin">@Translate("Category")</h5>
            <input type="checkbox" id="CategorySelector" class="dropdown-trigger" />
            <div class="dropdown u-full-width dw-mod">
                <label class="dropdown__header dropdown__btn dw-mod" for="CategorySelector">@Translate(selectedFilter)</label>
                <div class="dropdown__content dw-mod">
                    @foreach (var option in settings.Categories)
                    {
                    <div class="dropdown__item" onclick="QueryArray.setParametersInCurrentURL({ sourceType: 'Page', sourcePage: '@(option.Key.ToLower() == "all" ? pageId : option.Value)' })">@Translate(option.Key)</div>
                    }
                </div>
                <label class="dropdown-trigger-off" for="CategorySelector"></label>
            </div>
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks
@using System.Collections.Generic

@* Component for the articles *@

@helper RenderArticleListFilter(ArticleListFilter settings)
{
    string selectedFilter = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get(settings.SystemName)) ? HttpContext.Current.Request.QueryString.Get(settings.SystemName) : Translate("All");
    var query = HttpUtility.ParseQueryString(HttpContext.Current.Request.QueryString.ToString());

    if (settings.Options != null)
    {
        if (settings.Options is IEnumerable<dynamic>)
        {
            var options = (IEnumerable<dynamic>) settings.Options;
            settings.Options = options.OrderBy(item => item.Name);
        }

        foreach (var option in settings.Options)
        {
            selectedFilter = selectedFilter == option.Value ? option.Name : selectedFilter;
        }

        if (Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet")
        {
            <div class="u-pull--right u-margin-left">
                <div class="collection u-no-margin">
                    <h5>@settings.Label</h5>
                    <input type="checkbox" id="@(settings.SystemName)Selector" class="dropdown-trigger" />
                    <div class="dropdown u-w180px dw-mod">
                        <label class="dropdown__header dropdown__btn dw-mod" for="@(settings.SystemName)Selector">@Translate(selectedFilter)</label>
                        <div class="dropdown__content dw-mod">
                            <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '')">@Translate("All")</div>
                            @foreach (var option in settings.Options)
        {
                                <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '@option.Value')">@Translate(option.Name)</div>
                            }
                        </div>
                        <label class="dropdown-trigger-off" for="@(settings.SystemName)Selector"></label>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="u-full-width u-margin-bottom">
                <h5 class="u-no-margin">@settings.Label</h5>
                <input type="checkbox" id="@(settings.SystemName)Selector" class="dropdown-trigger" />
                <div class="dropdown u-full-width w-mod">
                    <label class="dropdown__header dropdown__btn dw-mod" for="@(settings.SystemName)Selector">@Translate(selectedFilter)</label>
                    <div class="dropdown__content dw-mod">
                        <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '')">@Translate("All")</div>
                        @foreach (var option in settings.Options)
{
                            <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '@option.Value')">@Translate(option.Name)</div>
                        }
                    </div>
                    <label class="dropdown-trigger-off" for="@(settings.SystemName)Selector"></label>
                </div>
            </div>
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleListSearch(ArticleListSearch settings)
{
    string searchParameter = !string.IsNullOrEmpty(settings.SearchParameter) ? settings.SearchParameter : "Title";
    string searchWord = HttpContext.Current.Request.QueryString.Get(searchParameter);
    string searchString = !string.IsNullOrEmpty(searchWord) ? searchWord.Trim('*') : "";
    string className = "u-w340px u-pull--right u-margin-left";

    if (Pageview.Device.ToString() == "Mobile" || Pageview.Device.ToString() == "Tablet")
    {
        className = "u-full-width";
    }
    
    <div class="typeahead u-color-inherit u-margin-bottom dw-mod @className">
        <input type="text" class="typeahead-search-field u-no-margin dw-mod" placeholder="@Translate("Search in list")" value="@searchString" id="ArticleListSearchInput" onchange="QueryArray.setParameterInCurrentURL('@searchParameter', '*' + document.getElementById('ArticleListSearchInput').value + '*')">
        <button type="button" class="btn btn--condensed btn--primary u-no-margin dw-mod"><i class="fas fa-search"></i></button>
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleListNoResultsInfo(ArticleListNoResultsInfo settings)
{
    <div class="u-margin-top--lg u-bold u-ta-center u-bold">@Translate(settings.Message)</div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks
@using System.Text.RegularExpressions

@* Component for the articles *@

@helper RenderArticleListItem(ArticleListItem settings)
{
    switch (settings.Type) {
        case ArticleListItemType.Card:
            @RenderArticleListItemCard(settings);
            break;
        case ArticleListItemType.List:
            @RenderArticleListItemList(settings);
            break;
        case ArticleListItemType.Simple:
            @RenderArticleListItemSimple(settings);
            break;
        default:
            @RenderArticleListItemCard(settings);
        break;
    }
}

@helper RenderArticleListItemCard(ArticleListItem settings) {
    <a href="@settings.Link" class="u-full-height u-color-light--bg u-flex u-flex--column">
        <div class="u-color-light--bg u-no-padding dw-mod">
            @if (settings.Logo != null)
            {
                string backgroundImage = settings.Image != null ? "background-image:url(/Admin/Public/GetImage.ashx?width=992&amp;height=760&amp;crop=0&amp;Compression=75&amp;DoNotUpscale=True&amp;image=" + settings.Image.Path + "); background-size: cover;" : "";
                settings.Logo.ImageDefault.Crop = 5;
                settings.Logo.ImageDefault.Width = settings.Logo.ImageDefault.Width == 1920 ? 240 : settings.Logo.ImageDefault.Width;
                settings.Logo.ImageDefault.Height = settings.Logo.ImageDefault.Height == 1080 ? 200 : settings.Logo.ImageDefault.Height;
                <div class="image-hover__wrapper layered-image layered-image--tinted dw-mod" style="@backgroundImage">
                    @if (settings.Stickers != null)
                    {
                        if (settings.Stickers.Position != StickersListPosition.Custom && settings.Stickers.Position != StickersListPosition.None)
                        {
                            @Render(settings.Stickers);
                        } 
                    }
                    @RenderImage(settings.Logo)
                </div>
            } else if (settings.Image != null)
            {
                <div class="flex-img image-hover__wrapper u-position-relative dw-mod">
                    @if (settings.Stickers != null)
                    {
                        if (settings.Stickers.Position != StickersListPosition.Custom && settings.Stickers.Position != StickersListPosition.None)
                        {
                            @Render(settings.Stickers);
                        }                                                        
                    }
                    @Render(settings.Image)
                </div>
            }
        </div>

        @if (!String.IsNullOrEmpty(settings.Title) || !String.IsNullOrEmpty(settings.Summary))
        {
            <div class="card u-color-light--bg u-full-height dw-mod">
                @if (settings.Stickers != null)
                {
                    if (settings.Stickers.Position == StickersListPosition.Custom)
                    {
                        @Render(settings.Stickers);
                    }                                                        
                }
                @if (!String.IsNullOrEmpty(settings.Title))
                {
                    <h3 class="article-list__item-header u-truncate-text dw-mod">@settings.Title</h3>
                }
                @if (!String.IsNullOrEmpty(settings.SubTitle))
                {
                    <div class="article-list__item-micro-info u-truncate-text dw-mod">@settings.SubTitle</div>
                }
                @if (!String.IsNullOrEmpty(settings.Summary))
                {
                    <p class="article__short-summary dw-mod">@settings.Summary</p>
                }
            </div>
        }
    </a>
}

@helper RenderArticleListItemList(ArticleListItem settings) { 
    <a href="@settings.Link">
        <div class="grid u-color-light--bg u-no-padding dw-mod">
            <div class="grid__col-md-3">
                <div class="u-color-light--bg u-no-padding dw-mod">
                    @if (settings.Logo != null)
                    {
                        string backgroundImage = settings.Image != null ? "background-image:url(/Admin/Public/GetImage.ashx?width=992&amp;height=760&amp;crop=0&amp;Compression=75&amp;DoNotUpscale=True&amp;image=" + settings.Image.Path + "); background-size: cover;" : "";
                        settings.Logo.ImageDefault.Crop = 5;
                        settings.Logo.ImageDefault.Width = settings.Logo.ImageDefault.Width == 1920 ? 240 : settings.Logo.ImageDefault.Width;
                        settings.Logo.ImageDefault.Height = settings.Logo.ImageDefault.Height == 1080 ? 200 : settings.Logo.ImageDefault.Height;
                        <div class="image-hover__wrapper layered-image layered-image--tinted dw-mod" style="@backgroundImage">
                            @if (settings.Stickers != null)
                            {
                                if (settings.Stickers.Position != StickersListPosition.Custom)
                                {
                                    @Render(settings.Stickers);
                                }                                                        
                            }
                            @RenderImage(settings.Logo)
                        </div>
                    } else if (settings.Image != null)
                    {
                        <div class="flex-img image-hover__wrapper dw-mod">
                            @if (settings.Stickers != null)
                            {
                                if (settings.Stickers.Position != StickersListPosition.Custom)
                                {
                                    @Render(settings.Stickers);
                                }                                                        
                            }
                            @Render(settings.Image)
                        </div>
                    }
                </div>
            </div>

            @if (!String.IsNullOrEmpty(settings.Title) || !String.IsNullOrEmpty(settings.Summary))
            {
                <div class="grid__col-md-9">
                    @if (!String.IsNullOrEmpty(settings.Title))
                    {
                        <h3 class="article-list__item-header u-truncate-text dw-mod">@settings.Title</h3>
                    }
                    @if (settings.Stickers != null)
                    {
                        if (settings.Stickers.Position == StickersListPosition.Custom)
                        {
                            @Render(settings.Stickers);
                        }
                    }
                    @if (!String.IsNullOrEmpty(settings.SubTitle))
                    {
                        <div class="article-list__item-micro-info u-truncate-text dw-mod">@settings.SubTitle</div>
                    }
                    @if (!String.IsNullOrEmpty(settings.Summary))
                    {
                    <p class="article__short-summary dw-mod">@settings.Summary</p>
                    }
                </div>
            }
        </div>
    </a>
}

@helper RenderArticleListItemSimple(ArticleListItem settings) {
    <a href="@settings.Link" class="u-color-inherit">
        <div class="grid u-color-light--bg u-no-padding dw-mod">
            <div class="grid__col-md-12">
                @if (!String.IsNullOrEmpty(settings.Title))
                {
                    <div class="article-list-item__header u-truncate-text u-no-margin dw-mod">@settings.Title</div>
                }
                @if (!String.IsNullOrEmpty(settings.SubTitle))
                {
                    <div class="article-list__item-micro-info u-truncate-text dw-mod">@settings.SubTitle</div>
                }
            </div>
        </div>
    </a>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleAuthorAndDate(ArticleAuthorAndDate settings)
{
    <small class="article__subscription">
        @if (!(string.IsNullOrWhiteSpace(settings.Author) && string.IsNullOrWhiteSpace(settings.Date)))
        {
            <text>@Translate("Written")</text>
        }
        @if (!string.IsNullOrWhiteSpace(settings.Author))
        {
            <text>@Translate("by") @settings.Author</text>
        }
        @if (!string.IsNullOrWhiteSpace(settings.Date))
        {
            <text>@Translate("on") @settings.Date</text>
        }
    </small>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component for the articles *@

@helper RenderArticleLink(ArticleLink settings)
{
    if (!string.IsNullOrEmpty(settings.Title))
    {
        Button link = new Button {
            ConfirmText = settings.ConfirmText,
            ConfirmTitle = settings.ConfirmTitle,
            ButtonType = settings.ButtonType,
            Id = settings.Id,
            Title = settings.Title,
            AltText = settings.AltText,
            OnClick = settings.OnClick,
            CssClass = settings.CssClass,
            Disabled = settings.Disabled,
            Icon = settings.Icon,
            Name = settings.Name,
            Href = settings.Href,
            ButtonLayout = settings.ButtonLayout,
            ExtraAttributes = settings.ExtraAttributes
        };
        <div class="grid__cell">
            @Render(link)
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component for the articles *@

@helper RenderArticleCarousel(ArticleCarousel settings)
{
    <div class="grid">
        <div class="grid__col-12 u-no-padding u-margin-bottom">
            <div class="carousel" id="carousel_@settings.Id">
                <div class="carousel__container js-carousel-slides dw-mod">
                    @RenderBlockList(settings.SubBlocks)
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            new CarouselModule("#carousel_@settings.Id", {
                slideTime: 0,
                dots: true
            });
        });
    </script>
}

@helper RenderArticleCarouselSlide(ArticleCarouselSlide settings)
{
    string imageEngine = "/Admin/Public/GetImage.ashx?";

    string defaultImage = settings.ImageSettings != null ? imageEngine : settings.Image;
    if (settings.ImageSettings != null)
    {
        defaultImage += settings.ImageSettings.Width != 0 ? "Width=" + settings.ImageSettings.Width + "&" : "";
        defaultImage += settings.ImageSettings.Height != 0 ? "Height=" + settings.ImageSettings.Height + "&" : "";
        defaultImage += "Crop=" + settings.ImageSettings.Crop + "&";
        defaultImage += "Compression=" + settings.ImageSettings.Compression + "&";
        defaultImage += "DoNotUpscale=" + settings.ImageSettings.DoNotUpscale.ToString() + "&";
        defaultImage += "FillCanvas=" + settings.ImageSettings.FillCanvas.ToString() + "&";
    }
    defaultImage += "&Image=" + settings.Image;

    <div class="carousel__slide u-min-h300px u-flex dw-mod" style="background-size:cover; background-image:url('@defaultImage')">
        <a class="article-carousel-item__wrap" href="@settings.Link" title="@settings.Title">
            <h2 class="article-list__item-header u-truncate-text u-color-light dw-mod">@settings.Title</h2>
            <div class="article-list__item-info">
                @if (settings.Stickers != null)
                {
                    settings.Stickers.Position = StickersListPosition.Custom;
                    @Render(settings.Stickers);
                }

                <small class="u-margin-top--lg u-color-light">
                    @if (!(string.IsNullOrWhiteSpace(settings.Author) && string.IsNullOrWhiteSpace(settings.Date)))
                    {
                    <text>@Translate("Written")</text>
                    }
                    @if (!string.IsNullOrWhiteSpace(settings.Author))
                    {
                    <text>@Translate("by") @settings.Author</text>
                    }
                    @if (!string.IsNullOrWhiteSpace(settings.Date))
                    {
                    <text>@Translate("on") @settings.Date</text>
                    }
                </small>
            </div>

            <h3 class="article__short-summary u-color-light">@settings.Summary</h3>
        </a>
        @if (settings.UseFilters == true)
        {
            <div class="background-image image-filter image-filter--darken dw-mod"></div>
        }
    </div>
}
@using System.Text.RegularExpressions
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleVideo(ArticleVideo settings)
{
    if (settings.Url != null)
    {
        //getting video ID from youtube URL
        string videoCode = settings.Url;
        Regex regex = new Regex(@".be\/(.[^?]*)");
        Match match = regex.Match(videoCode);
        string videoId = "";
        if (match.Success)
        {
            videoId = match.Groups[1].Value;
        }
        else
        {
            regex = new Regex(@"v=([^&]+)");
            match = regex.Match(videoCode);
            if (match.Success)
            {
                videoId = match.Groups[1].Value;
            }
        }

        int autoPlay = settings.AutoPlay == "true" ? 1 : 0;

        <div class="video-wrapper">
            <div class="js-youtube-video" data-video="@videoId" id="ytPlayer@(Guid.NewGuid().ToString("N"))" data-auto-play="@autoPlay" data-enable-controls="1"></div>
        </div> 
    }
}



@* Simple helpers *@

@*Requires the Gallery ItemType that comes with Rapido*@
@helper RenderArticleItemGallery(IList<ItemViewModel> gallery) {
    if (gallery != null && gallery.Count > 0)
    {
        int count = 1;

        foreach (var item in gallery)
        {
            if (item.GetFile("ImagePath") != null)
            {
                string image = item.GetFile("ImagePath").PathUrlEncoded;
                string imagePrefix = "/Admin/Public/GetImage.ashx?width=1200&amp;height=820&amp;crop=5&amp;Compression=75&amp;DoNotUpscale=1&amp;image=";
                int imagesCount = gallery.Count;

                if (count == 1)
                {
                    <label class="gallery" for="ParagraphGalleryModalTrigger" onclick="Gallery.openImage(this.querySelector('.js-gallery'))">
                        <span class="gallery__main-image">
                            <img src="/Files/Images/placeholder.gif" data-src="/Admin/Public/GetImage.ashx?width=992&amp;height=760&amp;crop=0&amp;Compression=75&amp;DoNotUpscale=1&amp;image=@image" class="b-lazy flex-img js-gallery" alt="" data-for="ParagraphGallery" data-image="@imagePrefix@image" />
                        </span>
                        <span class="gallery__image-counter">
                            <i class="fas fa-camera fa-2x"></i> <span class="gallery__image-counter__number">@imagesCount</span>
                            <span class="gallery__image-counter__text">@Translate("See all") <i class="fas fa-angle-right"></i></span>
                        </span>
                    </label>
                }
                else
                {
                    <div class="u-hidden js-gallery" data-for="ParagraphGallery" data-image="@imagePrefix@image"></div>
                }

                count++;
            }
        }

        @Render(new ArticleGalleryModal())
    }
}

@helper RenderMobileFilters(List<Block> subBlocks)
{
    if (subBlocks.Count > 0)
    {
        <div class="grid__col-12">
            <input type="checkbox" id="CheckFilters" class="js-remember-state u-hidden" data-expand="CheckFilters" />
            <div class="grid u-margin-bottom dw-mod" data-trigger="CheckFilters">
                @RenderBlockList(subBlocks)  
            </div>
            <label for="CheckFilters" class="btn btn--secondary btn--full dw-mod js-expand-hide" data-trigger="CheckFilters">@Translate("Select filters")</label>
            <label for="CheckFilters" class="btn btn--secondary btn--full dw-mod expandable--collapsed" data-trigger="CheckFilters">@Translate("Close filters")</label>
        </div>
    }
} 

@* Include the Blocks for the page *@
@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks.Extensibility
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Ecommerce.Common

@{ 
    BlocksPage referencesBlocksPage = BlocksPage.GetBlockPage("Master");

    Block masterScriptReferences = new Block()
    {
        Id = "MasterScriptReferences",
        SortId = 1,
        Template = RenderMasterScriptReferences()
    };
    referencesBlocksPage.Add(MasterBlockId.MasterReferences, masterScriptReferences);
}

@helper RenderMasterScriptReferences() {
    <script src="/Files/Templates/Designs/Rapido/js/handlebars-v4.0.12.min.js"></script>
    <script src="/Files/Templates/Designs/Rapido/js/master.min.js"></script>

    if (Model.Area.Item.GetItem("Custom").GetBoolean("UseCustomJavascript"))
    {
        <script src="/Files/Templates/Designs/Rapido/js/custom.min.js"></script>
        PushPromise("/Files/Templates/Designs/Rapido/js/custom.min.js");
    }

    PushPromise("/Files/Templates/Designs/Rapido/js/handlebars-v4.0.12.min.js");
    PushPromise("/Files/Templates/Designs/Rapido/js/master.min.js");
}
@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks.Extensibility
@using Dynamicweb.Rapido.Blocks

@{
    BlocksPage bottomSnippetsBlocksPage = BlocksPage.GetBlockPage("Master");

    Block primaryBottomSnippets = new Block()
    {
        Id = "MasterJavascriptInitializers",
        SortId = 100,
        Template = RenderPrimaryBottomSnippets()
    };
    bottomSnippetsBlocksPage.Add(MasterBlockId.MasterReferences, primaryBottomSnippets);

    if (Dynamicweb.Rapido.Services.User.IsBuyingAllowed())
    {
        Block miniCartPageId = new Block
        {
            Id = "MiniCartPageId",
            Template = RenderMiniCartPageId()
        };
        bottomSnippetsBlocksPage.Add(MasterBlockId.MasterReferences, miniCartPageId);
    }
}

@helper RenderPrimaryBottomSnippets()
{
    bool isWireframeMode = Model.Area.Item.GetItem("Settings").GetBoolean("WireframeMode");
    bool useGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));

    if (isWireframeMode)
    {
        <script>
            Wireframe.Init(true);
        </script>
    }


    if (useGoogleTagManager)
    {
        <script>
            document.addEventListener('addToCart', function(event) {
                var googleImpression = JSON.parse(event.detail.productInfo.googleImpression);
                if (typeof googleImpression == "string") {
                    googleImpression = JSON.parse(event.detail.productInfo.googleImpression);
                }
                dataLayer.push({
                    'event': 'addToCart',
                    'ecommerce': {
                        'currencyCode': googleImpression.currency,
                        'add': {
                            'products': [{
                                'name': googleImpression.name,
                                'id': googleImpression.id,
                                'price': googleImpression.price,
                                'brand': googleImpression.brand,
                                'category': googleImpression.category,
                                'variant': googleImpression.variant,
                                'quantity': event.detail.quantity
                            }]
                        }
                    }
                });
            });
        </script>
    }

    //if digitalwarehouse
    if (Model.Area.Item.GetItem("Layout").GetItem("Header").GetBoolean("ShowDownloadCart"))
    {
        string cartContextId = Converter.ToString(HttpContext.Current.Application["DownloadCartContext"]);

        if (string.IsNullOrEmpty(cartContextId))
        {
            var moduleProps = Dynamicweb.Modules.Properties.GetParagraphModuleSettings(GetPageIdByNavigationTag("DownloadCart"), "eCom_CartV2");
            var cartSettings = new Dynamicweb.Ecommerce.Cart.ModuleSettings(moduleProps);
            cartContextId = cartSettings.OrderContextID;
            HttpContext.Current.Application["DownloadCartContext"] = cartContextId;
        }

        <script>
            let downloadCart = new DownloadCart({
                cartPageId: @GetPageIdByNavigationTag("MiniCartFeed"),
                contextId: "@cartContextId",
                addButtonText: "@Translate("Add")",
                removeButtonText: "@Translate("Remove")"
            });
        </script>
    }

    <!--@Javascripts-->
}

@helper RenderMiniCartPageId()
{
    int miniCartFeedPageId = GetPageIdByNavigationTag("MiniCartFeed");
    <script>
        window.cartId = "@miniCartFeedPageId";
    </script>
} 
@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks

@{ 
    BlocksPage masterCustomBlocksPage = BlocksPage.GetBlockPage("Master");

    var CustomMobileNavigationMenu = masterCustomBlocksPage.GetBlockById("MobileNavigationMenu");
    if (CustomMobileNavigationMenu != null)
    {
        CustomMobileNavigationMenu.Template = CustomRenderMobileNavigationMenu();
    }
}

@helper CustomRenderMobileNavigationMenu()
{
    bool isSlidesDesign = Model.Area.Item.GetItem("Layout").GetItem("MobileNavigation").GetList("Design").SelectedValue == "Slides";
    string menuTemplate = isSlidesDesign ? "BaseMenuForMobileSlides.xslt" : "BaseMenuForMobileExpandable.xslt";
    string levels = !String.IsNullOrEmpty(Model.Area.Item.GetItem("Layout").GetItem("MobileNavigation").GetString("Levels")) ? Model.Area.Item.GetItem("Layout").GetItem("MobileNavigation").GetString("Levels") : "3";
    bool renderPagesInToolBar = Model.Area.Item.GetItem("Layout").GetItem("Header").GetBoolean("RenderPagesInToolBar");
    int startLevel = 1;

    @RenderNavigation(new
    {
        id = "mobilenavigation",
        cssclass = "menu menu-mobile dwnavigation",
        startLevel = @startLevel,
        ecomStartLevel = @startLevel,
        endlevel = @levels,
        expandmode = "all",
        template = @menuTemplate
    })

    if (isSlidesDesign) 
    {
        <script>
            function goToLevel(level) {
                document.getElementById('mobileNavigationWrapper').style.left = -(level * 100) + "%";
            }

            document.addEventListener('DOMContentLoaded', function () {
                goToLevel(document.getElementById('mobileNavigationWrapper').querySelectorAll('input[type=radio]:checked').length);
            });
        </script>
    }

    if (renderPagesInToolBar)
    {
        @RenderNavigation(new
        {
            id = "topToolsMobileNavigation",
            cssclass = "menu menu-mobile dwnavigation",
            template = "ToolsMenuForMobile.xslt"
        })
    }

   
}



@functions { 
    public class ManifestIcon
    {
        public string src { get; set; }
        public string type { get; set; }
        public string sizes { get; set; }
    }

    public class Manifest
    {
        public string name { get; set; }
        public string short_name { get; set; }
        public string start_url { get; set; }
        public string display { get; set; }
        public string background_color { get; set; }
        public string theme_color { get; set; }
        public List<ManifestIcon> icons { get; set; }
    }
}

<!DOCTYPE html>
<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName">

@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(masterPage.BlocksRoot.BlocksList)

@helper RenderMasterHead() { 
    List<Block> subBlocks = this.masterPage.GetBlockListById("Head").OrderBy(item => item.SortId).ToList();

    <head>
       <!-- Rapido version 3.3 -->

       @RenderBlockList(subBlocks)
    </head>   
}

@helper RenderMasterMetadata() { 
    var swatches = new Dynamicweb.Content.Items.ColorSwatchService();
    var brandColors = swatches.GetColorSwatch(1);
    string brandColorOne = brandColors.Palette["BrandColor1"];

    if (!String.IsNullOrEmpty(Model.Area.Item.GetItem("Settings").GetString("AppName")) && Model.Area.Item.GetItem("Settings").GetFile("AppIcon") != null) {
        Manifest manifest = new Manifest
        {
            name = Model.Area.Item.GetItem("Settings").GetString("AppName"),
            short_name = !String.IsNullOrEmpty(Model.Area.Item.GetItem("Settings").GetString("AppShortName")) ? Model.Area.Item.GetItem("Settings").GetString("AppShortName") : Model.Area.Item.GetItem("Settings").GetString("AppName"),
            start_url = "/",
            display = "standalone",
            background_color = Model.Area.Item.GetItem("Settings").GetString("AppBackgroundColor"),
            theme_color = Model.Area.Item.GetItem("Settings").GetString("AppThemeColor")
        };

        manifest.icons = new List<ManifestIcon> {
            new ManifestIcon {
                src = "/Admin/Public/GetImage.ashx?width=192&height=192&crop=5&image=" + Model.Area.Item.GetItem("Settings").GetFile("AppIcon").PathUrlEncoded,
                sizes = "192x192",
                type = "image/png"
            },
            new ManifestIcon {
                src = "/Admin/Public/GetImage.ashx?width=512&height=512&crop=5&image=" + Model.Area.Item.GetItem("Settings").GetFile("AppIcon").PathUrlEncoded,
                sizes = "512x512",
                type = "image/png"
            },
            new ManifestIcon {
                src = "/Admin/Public/GetImage.ashx?width=1024&height=1024&crop=5&image=" + Model.Area.Item.GetItem("Settings").GetFile("AppIcon").PathUrlEncoded,
                sizes = "1024x1024",
                type = "image/png"
            }
        };

        string manifestFilePath = HttpContext.Current.Request.MapPath("/Files/Templates/Designs/Rapido/manifest.json");
        string manifestJSON = Newtonsoft.Json.JsonConvert.SerializeObject(manifest);
        string currentManifest = File.ReadAllText(manifestFilePath);

        if (manifestJSON != currentManifest)
        {
            File.WriteAllText(manifestFilePath, manifestJSON);
        }
    }

    <meta charset="utf-8" />
    <title>@Model.Title</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="robots" content="index, follow">
    <meta name="theme-color" content="@brandColorOne" />

    if (!Model.MetaTags.Contains("og:image") && Model.PropertyItem != null) {
        Pageview.Meta.AddTag("og:image", string.Format("{0}://{1}{2}", Dynamicweb.Context.Current.Request.Url.Scheme, HttpContext.Current.Request.Url.Host, Model.PropertyItem.GetFile("OpenGraphImage")));
    }

    if (!Model.MetaTags.Contains("og:description")) {
        Pageview.Meta.AddTag("og:description", Model.Description);
    }
    
    Pageview.Meta.AddTag("og:title", Model.Title);  
    Pageview.Meta.AddTag("og:site_name", Model.Name);
    Pageview.Meta.AddTag("og:url", HttpContext.Current.Request.Url.ToString());
    Pageview.Meta.AddTag("og:type", "Website");
    Pageview.Meta.AddTag("fb:page_id", Model.ID.ToString());

    @Model.MetaTags
}

@helper RenderMasterCss() { 
    var fonts = new string[] {
    getFontFamily("Layout", "HeaderFont"),
    getFontFamily("Layout", "SubheaderFont"),
    getFontFamily("Layout", "TertiaryHeaderFont"),
    getFontFamily("Layout", "BodyText"),
    getFontFamily("Layout", "Header", "ToolsFont"),
    getFontFamily("Layout", "Header", "NavigationFont"),
    getFontFamily("Layout", "MobileNavigation", "Font"),
    getFontFamily("ProductList", "Facets", "HeaderFont"),
    getFontFamily("ProductPage", "PriceFontDesign"),
    getFontFamily("Ecommerce", "SaleSticker", "Font"),
    getFontFamily("Ecommerce", "NewSticker", "Font"),
    getFontFamily("Ecommerce", "CustomSticker", "Font")
    };

    string autoCssLink = "/Files/Templates/Designs/Rapido/css/rapido/rapido_" + Model.Area.ID.ToString() + ".min.css?ticks=" + Model.Area.UpdatedDate.Ticks;
    string favicon = Model.Area.Item.GetItem("Layout").GetFile("LogoFavicon") != null ? Model.Area.Item.GetItem("Layout").GetFile("LogoFavicon").Path : "/Files/Images/favicon.png";
    bool useFontAwesomePro = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetBoolean("UseFontAwesomePro");
    string fontAwesomeCssLink = "/Files/Templates/Designs/Rapido/css/fonts/FontAwesomeFree/css/fontawesome-all.min.css";
    if (useFontAwesomePro)
    {
        fontAwesomeCssLink = "/Files/Templates/Designs/Rapido/css/fonts/FontAwesomePro/css/fontawesome-all.min.css";
    }
    
    /* Optimizer variables */
    var minify = Model.Area.Item.GetItem("Rizzo").GetBoolean("MinifyCss");
    var folderName = string.Empty;
    var rizzoBundle = string.Empty;
    var rizzoPackagesBundle = string.Empty;
    var igniteBundle = string.Empty;
    var variablesFile = "/Files/Templates/Designs/Rapido/css/rapido/_variables_" + Model.Area.ID + ".auto.less";

    //Favicon
    <link href="@favicon" rel="icon" type="image/png">

    //Base (Default, wireframe) styles
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/base/base.min.css" type="text/css">

    //Rapido Css from Website Settings
    <link rel="stylesheet" id="rapidoCss" href="@autoCssLink" type="text/css">

    if (Model.Area.Item.GetItem("Rizzo").GetBoolean("UseRizzoCss"))
    {
        <!-- Rizzo Css (DWNA specific styles) -->
        folderName = "rizzo";
        rizzoBundle = Dna.Optimizer.Renderer.RenderStyles($"/Files/Templates/Designs/Rapido/css/{folderName}", $"-{folderName}-styles", new [] {variablesFile}, new[] { $"{folderName}.css", $"{folderName}.min.css" }, minify, false, false);
        <link id="rizzoCss" type="text/css" rel="stylesheet" href="@rizzoBundle" />
    }
    if (Model.Area.Item.GetItem("RizzoPackages").GetBoolean("UseRizzoCss"))
    {
        <!-- Rizzo Packages Css (DWNA packages specific styles) -->
        folderName = "rizzoPackages";
        rizzoPackagesBundle = Dna.Optimizer.Renderer.RenderStyles($"/Files/Templates/Designs/Rapido/css/{folderName}", $"-{folderName}-styles", new [] {variablesFile}, new[] { $"{folderName}.css", $"{folderName}.min.css" }, minify, false, false);
        <link id="rizzoPackagesCss" type="text/css" rel="stylesheet" href="@rizzoPackagesBundle" />
    }

    //Ignite Css (Custom site specific styles) 
    folderName = "ignite";
    igniteBundle = Dna.Optimizer.Renderer.RenderStyles($"/Files/Templates/Designs/Rapido/css/{folderName}", $"-{folderName}-styles", new [] {variablesFile}, new[] { $"{folderName}.css", $"{folderName}.min.css" }, minify, false, false);
    <link id="igniteCss" type="text/css" rel="stylesheet" href="@igniteBundle" />

    //Font awesome
    <link rel="stylesheet" href="@fontAwesomeCssLink" type="text/css">

    //Flag icon
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/fonts/flag-icon.min.css" type="text/css">

    //Google fonts
    var family = string.Join("%7C", fonts.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));

    <link href="https://fonts.googleapis.com/css?family=@family" rel="stylesheet">
    
    PushPromise(favicon);
    PushPromise(fontAwesomeCssLink);
    PushPromise("/Files/Templates/Designs/Rapido/css/base/base.min.css");
    PushPromise(autoCssLink);
    if (Model.Area.Item.GetItem("Rizzo").GetBoolean("UseRizzoCss"))
    {
        PushPromise(rizzoBundle);
    }
    if (Model.Area.Item.GetItem("RizzoPackages").GetBoolean("UseRizzoCss"))
    {
        PushPromise(rizzoPackagesBundle);
    }
    PushPromise(igniteBundle);
    PushPromise("/Files/Images/placeholder.gif");
    PushPromise("/Files/Templates/Designs/Rapido/css/fonts/flag-icon.min.css");
}

@helper RenderMasterManifest() { 
    if (!String.IsNullOrEmpty(Model.Area.Item.GetItem("Settings").GetString("AppName")))
    {
        <link rel="manifest" href="/Files/Templates/Designs/Rapido/manifest.json">
        PushPromise("/Files/Templates/Designs/Rapido/manifest.json");
    } 
}

@helper RenderMasterBody() { 
    List<Block> subBlocks = this.masterPage.GetBlockListById("Body").OrderBy(item => item.SortId).ToList();
    string designLayout = Model.PropertyItem != null && Model.PropertyItem.GetItem("CustomSettings") != null ? Model.PropertyItem.GetItem("CustomSettings").GetString("DesignLayout") != null ? Model.PropertyItem.GetItem("CustomSettings").GetList("DesignLayout").SelectedValue : "" : "";
    if (!String.IsNullOrEmpty(designLayout)) {
        designLayout = "class=\"" + designLayout + "\"";
    }

    <body @designLayout>
       @RenderBlockList(subBlocks)
    </body>   
}

@helper RenderMain()
{
    List<Block> subBlocks = this.masterPage.GetBlockListById("MasterMain").OrderBy(item => item.SortId).ToList();

    <main class="site dw-mod">
        @RenderBlockList(subBlocks)
    </main>
}

@helper RenderPageContent()
{
    bool isNavigationStickyMenu = Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet" && Model.Area.Item.GetItem("Layout").GetItem("Header").GetBoolean("StickyTop");
    string pagePos = isNavigationStickyMenu ? "js-page-pos" : "";

    <div id="Page" class="page @pagePos">
        <div id="content">
            @RenderSnippet("Content")
        </div>
    </div>
}

@* Hack to support nested helpers *@
@SnippetStart("Content")
@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>



@* Render the grid *@
@Model.Grid("Grid", "Grid", "default:true;sort:1", "Pages")

@SnippetEnd("Content")
</html>

