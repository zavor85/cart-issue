@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Web;
@using Dynamicweb.Configuration;
@using Dynamicweb.Core;
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Services

@{
    bool pointShopOnly = Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("PointShopOnly");
    bool useGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));
}

@Include("../../../eCom/Stickers.cshtml")
@Include("../../../GetProductImage.cshtml")

@functions {
    public class Product
    {
        public string id { get; set; }
        public string name { get; set; }
        public string number { get; set; }
        public string price { get; set; }
        public double priceDouble { get; set; }
        public string priceWithVAT { get; set; }
        public string priceWithoutVAT { get; set; }
        public string viewMoreText { get; set; }
        public string stockState { get; set; }
        public string stockText { get; set; }
        public string deliveryText { get; set; }
        public string discount { get; set; }
        public string onSale { get; set; }
        public string link { get; set; }
        public string image { get; set; }
        public string noImage { get; set; }
        public string secondaryImage { get; set; }
        public string googleImpression { get; set; }

        public string energyClass { get; set; }
        public string energyClassClass { get; set; }
        public string energyClassType { get; set; }

        public string databladLink { get; set; }

        public List<StickersCollection> StickersContainers { get; set; }
    }

    public class GoogleImpression
    {
        public string name { get; set; }
        public string id { get; set; }
        public double price { get; set; }
        public string brand { get; set; }
        public string category { get; set; }
        public string variant { get; set; }
        public string list { get; set; }
        public string url { get; set; }
        public string currency { get; set; }
        public int position { get; set; }
    }

    public static IEnumerable<TResult> SortBy<TResult, TKey>(
    IEnumerable<TResult> itemsToSort,
    IEnumerable<TKey> sortKeys,
    Func<TResult, TKey> matchFunc)
    {
        return sortKeys.Join(itemsToSort,
            key => key,
            matchFunc,
            (key, iitem) => iitem);
    }

}

@{
    List<Product> feedObject = new List<Product>();

    var products = GetLoop("Products");

    if (!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("Combinations")))
    {
        char[] delimiterChars = { ',' };

        var sortedIds = HttpContext.Current.Request.QueryString.Get("Combinations").Split(delimiterChars, StringSplitOptions.RemoveEmptyEntries);

        products = SortBy(products, sortedIds, c => c.GetString("Ecom:Product.ID")).ToList();
    }

    var count = 0;

    foreach (LoopItem product in products)
    {

        
        count++;
        Product productObject = new Product();
        productObject.id = product.GetString("Ecom:Product.ID");
        productObject.name = product.GetString("Ecom:Product.Name");
        productObject.stockState = product.GetInteger("Ecom:Product.Stock") > 0 ? "stock-icon--in" : "stock-icon--not";
        productObject.stockText = product.GetString("Ecom:Product:Stock.Text");
        productObject.deliveryText = string.IsNullOrEmpty(product.GetString("Ecom:Product:Stock.DeliveryText")) ? "" : ", " + Translate("Delivery") + " " + product.GetString("Ecom:Product:Stock.DeliveryText") + " " + product.GetString("Ecom:Product:Stock.DeliveryUnit");
        productObject.number = product.GetString("Ecom:Product.Number");
        productObject.discount = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Price.PriceFormatted") : "";
        productObject.price = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Discount.Price.PriceFormatted") : product.GetString("Ecom:Product.Price.PriceFormatted");
        productObject.price = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.price : "0";
        productObject.priceWithoutVAT = product.GetString("Ecom:Product.Discount.Price.PriceWithoutVATFormatted");
        productObject.priceWithoutVAT = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.priceWithoutVAT : "0";
        productObject.priceWithVAT = product.GetString("Ecom:Product.Discount.Price.PriceWithVATFormatted");
        productObject.priceWithVAT = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.priceWithVAT : "0";
        productObject.priceDouble = product.GetDouble("Ecom:Product.Discount.Price.Price") != product.GetDouble("Ecom:Product.Price.Price") ? product.GetDouble("Ecom:Product.Discount.Price.Price") : product.GetDouble("Ecom:Product.Price.Price");
        productObject.priceDouble = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.priceDouble : 0;productObject.onSale = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") == product.GetString("Ecom:Product.Price.PriceFormatted") ? "u-hidden" : "";
        productObject.link = "/" + product.GetString("Ecom:Product.LinkGroup.Clean") + (!String.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? "&VariantID=" + product.GetString("Ecom:Product.VariantID") : "");
        productObject.image = GetProductImage(product);
        productObject.noImage = string.IsNullOrEmpty(GetProductImage(product)) ? "u-hidden" : "";
        productObject.viewMoreText = Translate("View");
        productObject.secondaryImage = product.GetLoop("Ecom:Product.AlternativeImages").FirstOrDefault(im => !string.IsNullOrEmpty(im.GetString("Ecom:Product.AlternativeImages.Image"))) != null ? product.GetLoop("Ecom:Product.AlternativeImages").FirstOrDefault(im => !string.IsNullOrEmpty(im.GetString("Ecom:Product.AlternativeImages.Image"))).GetString("Ecom:Product.AlternativeImages.Image") : String.Empty;

        productObject.StickersContainers = GetStickersContainersList(
            product.GetLoop("ProductDiscounts"),
            product.GetDouble("Ecom:Product.Discount.Price.Price"),
            product.GetDouble("Ecom:Product.Price.Price"),
            product.GetDate("Ecom:Product.Created"),
            product.GetString("Ecom:Product:Field.CustomSticker.Value")
        );

        productObject.databladLink = product.GetString("Ecom:Product:Field.DataSheet.Value.Clean");

            //Energy Class

        if(!String.IsNullOrEmpty(product.GetString("Ecom:Product.CategoryField.Energy_and_power.ENERGY_CLASS_2010.Value"))){
            productObject.energyClass = product.GetString("Ecom:Product.CategoryField.Energy_and_power.ENERGY_CLASS_2010.Value");
            productObject.energyClassClass = productObject.energyClass.Replace("+","A");
        }

        if(!String.IsNullOrEmpty(product.GetString("Ecom:Product.CategoryField.Energy_and_power.ENERGY_CLASS_2017.Value"))){
            productObject.energyClass = product.GetString("Ecom:Product.CategoryField.Energy_and_power.ENERGY_CLASS_2017.Value");
            productObject.energyClassClass = productObject.energyClass.Replace("+","A");
        }

         foreach (LoopItem temp in product.GetLoop("AssociatedGroups"))
        
        {
            if (temp.GetString("Ecom:Group.ID") =="GROUP926"){
                productObject.energyClassType = "2";
            }

            if (temp.GetString("Ecom:Group.ID") =="GROUP927"){
               productObject.energyClassType = "1";
            }
        }
        

        if (useGoogleTagManager)
        {
            var groupObject = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(product.GetString("Ecom:Product.PrimaryOrFirstGroupID"));
            var googleImpression = new GoogleImpression()
            {
                name = productObject.name,
                brand = product.GetString("Ecom:Product:Field.brand.Value"),
                category = groupObject != null ? groupObject.Name : "",
                id = productObject.id,
                position = count,
                price = productObject.priceDouble,
                variant = !string.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? product.GetString("Ecom:Product.VariantID") : product.GetString("Ecom:Product.VariantID.Extented"),
                url = productObject.link,
                currency = product.GetString("Ecom:Product.Price.Currency.Code"),
                list = "Promotion products"
            };
            productObject.googleImpression = Newtonsoft.Json.JsonConvert.SerializeObject(googleImpression);
        }

        feedObject.Add(productObject);
    }

    string jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(feedObject);
}

@jsonFeed