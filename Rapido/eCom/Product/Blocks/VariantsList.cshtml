@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb.Core
@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce
@using Dynamicweb.Rapido.Services

@functions { 
    BlocksPage productVariantsListPage = BlocksPage.GetBlockPage("Product");
    Dictionary<string, object> variantListSettings = new Dictionary<string, object> {
        { "RenderVariantsAsProducts", false },
        { "RenderVariantGroupsInTable", false },
        { "HideImage", false },
        { "HideProductNumbers", false }
    };
}

@{ 
    var variantsCount = GetInteger("Ecom:Product.VariantCount");
    string variantsListLayout = Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsListLayout") != null ? Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsListLayout").SelectedValue : "Section";
    variantsListLayout = variantsListLayout == "Ribbon" ? "Section" : variantsListLayout;

    //family members
    bool isFamilyMember = false;
    var variantGroups = GetLoop("VariantGroups");
    var variantGroupCount = variantGroups.Count;
    if (variantGroupCount == 1)
    {
        var firstVariantGroup = Dynamicweb.Ecommerce.Services.VariantGroups.GetVariantGroup(Dynamicweb.Ecommerce.Common.Context.LanguageID, variantGroups[0]?.GetString("Ecom:VariantGroup.ID"));
        if (firstVariantGroup != null)
        {
            isFamilyMember = firstVariantGroup.Family;
        }
    }
    if (isFamilyMember)
    {
        variantListSettings["RenderVariantsAsProducts"] = variantsCount > 1 && Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("RenderFamilyVariantsAsProducts");
        variantListSettings["RenderVariantGroupsInTable"] = false;
        variantListSettings["HideImage"] = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideImageForEachFamilyVariant");
        variantListSettings["HideProductNumbers"] = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideFamilyProductNumbers");
    }
    else
    {
        variantListSettings["RenderVariantsAsProducts"] = variantsCount > 1 && Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("RenderVariantsAsProductList");
        variantListSettings["RenderVariantGroupsInTable"] = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("RenderVariantGroupsInTable");
        variantListSettings["HideImage"] = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideImageForEachVariant");
        variantListSettings["HideProductNumbers"] = Pageview.AreaSettings.GetItem("ProductPage").GetBoolean("HideProductNumbers");
    }

    if (Converter.ToBoolean(variantListSettings["RenderVariantsAsProducts"]) && variantsListLayout != "hide" && (isFamilyMember || !isFamilyMember))
    {
        productVariantsListPage.Add(variantsListLayout, new Block
        {
            Name = variantsListLayout != "MainInformation" ? Translate("Variants list") : "",
            Id = "VariantsList",
            SortId = 20,
            Template = RenderVariantsProductList(variantsListLayout),
            Design = new Design
            {
                Size = "12",
                RenderType = RenderType.Column,
                HidePadding = true
            }
        });

        productVariantsListPage.Add("Section", new Block
        {
            Id = "VariantListScripts",
            SortId = 100,
            Template = RenderVariantListScripts(),
            Design = new Design {}
        });
    }
}

@helper RenderVariantsProductList(string layout)
{
    string variantsListPageSize = HttpContext.Current.Request.QueryString.Get("PageSize") ?? "30";
    string variantsFeedUrl = "/Default.aspx?ID=" + GetPageIdByNavigationTag("ProductsPage") + "&PageSize=" + variantsListPageSize + "&MainProductID=" + GetString("Ecom:Product.ID") + "&OnlyShowVariants=true&feed=true";
    string ribbonClasses = Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsListLayout").SelectedValue == "Ribbon" ? "product__section--ribbon paragraph-container paragraph-container--full-width" : "";
    ribbonClasses = layout == "Tabs" ? "" : ribbonClasses;
    string ribbonSubClasses = Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsListLayout").SelectedValue == "Ribbon" ? "center-container--ribbon" : "";

    <div class="product__section @ribbonClasses dw-mod">
        <div class="center-container @ribbonSubClasses dw-mod">
            @if (layout == "Section")
            {
               @Render(new Heading { Title = Translate("Variants"), Level = 2 })
            }
            <div class="js-handlebars-root" id="VariantsListRoot" data-template="VariantProductsContainer" data-json-feed="@variantsFeedUrl" data-preloader="minimal"></div>
        </div>
    </div>
}

@helper RenderVariantListScripts()
{
    bool showProductNumberForVariants = !Converter.ToBoolean(variantListSettings["HideProductNumbers"]);
    bool showImageForEachVariant = !Converter.ToBoolean(variantListSettings["HideImage"]);
    bool variantsPointShopOnly = Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("PointShopOnly");
    string variantsListPageSize = HttpContext.Current.Request.QueryString.Get("PageSize") ?? "30";
    string variantsFeedUrl = "/Default.aspx?ID=" + GetPageIdByNavigationTag("ProductsPage") + "&PageSize=" + variantsListPageSize + "&MainProductID=" + GetString("Ecom:Product.ID") + "&OnlyShowVariants=true&feed=true";
    string variantsCartIcon = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("CartIcon") != null ? Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("CartIcon").SelectedValue : "fas fa-shopping-cart";
    
    <script id="VariantProductsContainer" type="text/x-template">
        {{#.}}
            <div>
                <table id="VariantsProductsContainer" class="table u-position-relative dw-mod">
                    <thead>
                        <tr>
                            @if (showImageForEachVariant)
                            {
                                <td width="75">&nbsp;</td>
                            }
                            <td>@Translate("Product")</td>
                            {{#AvailableCustomFields}}
				                {{>TableFieldNameTemplate}}
			                {{/AvailableCustomFields}}
                            @if (Converter.ToBoolean(variantListSettings["RenderVariantGroupsInTable"])) {
                                foreach (LoopItem variantgroup in GetLoop("VariantGroups"))
                                {
                                    <td>@variantgroup.GetString("Ecom:VariantGroup.Name")</td>
                                }
                            }
                            <td>&nbsp;</td>
                        </tr>
                    </thead>
            
                    <tbody id="VariantProductListContainer" data-template="VariantProductItemContainer" data-save-cookie="true">
			            {{#ProductsContainer}}
				            {{>VariantProductItemContainer}}
			            {{/ProductsContainer}}
                    </tbody>
		        </table>
            </div>

            <div class="grid">
			    <div class="grid__col-12 grid__col--bleed-y">
                    @{
                        Button moreButton = new Button { Id = "LoadMoreButton", ButtonLayout = ButtonLayout.Primary, CssClass = "btn--full {{nextdisabled}}", Title = Translate("Load") + " " + Translate("more"), OnClick = "LoadMore.Next(this)" };
                        moreButton.ExtraAttributes.Add("data-current", "{{currentPage}}");
                        moreButton.ExtraAttributes.Add("data-page-size", "{{pageSize}}");
                        moreButton.ExtraAttributes.Add("data-total", "{{totalPages}}");
                        moreButton.ExtraAttributes.Add("data-container", "VariantProductListContainer");
                        moreButton.ExtraAttributes.Add("data-feed-url", variantsFeedUrl + "{{loadMoreFeedParams}}");
                        moreButton.ExtraAttributes.Add("", "{{nextdisabled}}");
                    }
                    @Render(moreButton)
			    </div>
		    </div>
        {{/.}}
    </script>

    <script id="VariantProductItemContainer" type="text/x-template">
	    {{#.}}
	        <tr id="VariantProduct{{id}}" class="js-product" data-template="VariantProductItem" data-preloader="overlay" style="z-index: {{zIndex}}">
		        {{#Product}}
		            {{>VariantProductItem}}
		        {{/Product}}
	        </tr>
	    {{/.}}
    </script>

    <script id="VariantProductItem" type="text/x-template">
	    {{#.}}
            @if (showImageForEachVariant)
            {
                <td width="75">
                   <div class="lightbox u-hidden-xxs">
                        <a href="{{link}}" onclick="Scroll.SavePosition(event)" title="{{name}}{{#if variantName}}, {{variantName}}{{/if}}">
                            <img class="lightbox__image {{noImage}}" src="/Admin/Public/GetImage.ashx?width=220&amp;height=220&amp;crop=5&amp;Compression=75&amp;image={{image}}" alt="{{name}}{{#if variantName}}, {{variantName}}{{/if}}" />
                            <div class="u-margin-right {{noImage}}">
                                <img src="/Admin/Public/GetImage.ashx?width=75&amp;height=55&amp;crop=5&FillCanvas=true&amp;Compression=75&amp;image={{image}}" alt="{{name}}{{#if variantName}}, {{variantName}}{{/if}}" />
                            </div>
                        </a>
                    </div>
               </td>
            }
       
	        <td class="u-va-middle">
                <a href="{{link}}" onclick="Scroll.SavePosition(event)" title="{{name}}{{#if variantName}}, {{variantName}}{{/if}}">
                    <h6 class="u-no-margin">{{name}}{{#if variantName}}, {{variantName}}{{/if}}</h6>
                </a>
			    @if (showProductNumberForVariants)
                {
                    <div class="item-number item-number--compressed u-margin-bottom dw-mod">
                        <div>{{number}}</div>
                    </div>
                }
			    @if (User.IsStockInfoAllowed())
			    {
				    <text>{{#if stockText}}</text>
                        <div class="item-number item-number--compressed dw-mod">
                            <span>
                                <span class="stock-icon {{stockState}} u-no-margin dw-mod" title="{{stockText}}"></span>
                                <span class="u-margin-right--lg"> {{stockText}}</span>
                                {{deliveryText}}
                            </span>
                        </div>
                    <text>{{/if}}</text>
                }
                else
                {
                    <div class="grid__cell-footer stickers-container stickers-container--block dw-mod">
                        {{#Stickers}}
                            {{>MiniSticker}}
                        {{/Stickers}}
                    </div>
                }
           </td> 
            {{#CustomFields}}
		        {{>TableFieldValueTemplate}}
		    {{/CustomFields}}
            @if (Converter.ToBoolean(variantListSettings["RenderVariantGroupsInTable"]))
            {
                <text>
                    {{#VariantSelectionNames}}
		                {{>TableFieldNameTemplate}}
		            {{/VariantSelectionNames}}
                </text>
            }
            <td class="u-va-middle">
                @if (Dynamicweb.Rapido.Services.User.IsPricesAllowed() && !Dynamicweb.Rapido.Services.User.IsBuyingAllowed())
		        {
				    <div class="u-hidden-sm">
					    <div class="u-full-width u-ta-right u-padding-right">
						    <div class="before-price {{onSale}} before-price--micro dw-mod">{{discount}}</div>
						    <div class="price price--product-list price--micro dw-mod">{{price}}</div>
					    </div>
				    </div>
                }

                <div class="grid grid--align-center grid--justify-end">
                    <div class="u-margin-right u-hidden-xs u-hidden-xxs">
                        @if (variantsPointShopOnly)
                        {
                            <text>
                                {{#if canBePurchasedWithPoints}}
                                    <div class="price price--product-list price--micro dw-mod">{{points}} @Translate("points")</div>
                                {{else}}
                                    {{#if havePointPrice}}
                                        <small class="help-text u-no-margin u-margin-top">@Translate("Not enough points to buy this")</small>
                                    {{else}}
                                        <small class="help-text u-no-margin u-margin-top">@Translate("Not available")</small>
                                    {{/if}}
                                {{/if}}
                            </text>
                        }
                        else if (Dynamicweb.Rapido.Services.User.IsPricesAllowed()) 
                        {
                            <div class="before-price before-price--micro {{onSale}} dw-mod">{{discount}}</div>
                            <div class="price price--condensed price--product-list dw-mod">{{price}}</div>
                        }
                    </div>

                    @if (Dynamicweb.Rapido.Services.User.IsBuyingAllowed())
                    {
                        var addToCartBtn = new AddToCart
                        {
                            AddButton = new AddToCartButton
                            {
                                HideTitle = true,
                                ProductId = "{{productId}}",
                                VariantId = "{{variantid}}",
                                UnitId = "{{unitId}}",
                                ProductInfo = "{{productInfo}}",
                                BuyForPoints = variantsPointShopOnly,
                                OnClick = "{{facebookPixelAction}}"
                            },
                            UnitSelector = new UnitSelector
                            {
                                OptionsContent = "{{#unitOptions}}{{>VariantUnitOption}}{{/unitOptions}}",
                                Id = "UnitOptions_{{id}}",
                                SelectedOption = "{{unitName}}",
                                CssClass = "{{hasUnits}}"
                            }
                        };

                        if (!variantsPointShopOnly)
                        {
                            addToCartBtn.QuantitySelector = new QuantitySelector
                            {
                                Id = "Quantity_{{id}}"
                            };
                        }
          
                        <div class="grid__cell u-flex-grow--0">
                            @Render(addToCartBtn)
                        </div>
                    }
                    <div class="favorites u-margin-left dw-mod">
                        {{#Favorite}}
                            {{>FavoriteTemplate}}
                        {{/Favorite}}
                    </div>
                </div>
            </td>
	    {{/.}}
    </script>

    <script id="TableFieldNameTemplate" type="text/x-template">
	    <td class="u-va-middle">{{name}}</td> 
    </script>

    <script id="TableFieldValueTemplate" type="text/x-template">
	    <td class="u-va-middle">{{value}}</td> 
    </script>

    <script id="MiniSticker" type="text/x-template">
	    <div class="stickers-container__tag stickers-container__tag--micro {{CssClass}} dw-mod">{{Title}}</div>
    </script>

    <script id="VariantUnitOption" type="text/x-template">
        <div class="dropdown__item dw-mod" onclick="HandlebarsBolt.UpdateContent(this.closest('.js-product').id, '{{link}}&feed=true&UnitID={{value}}')">{{name}}</div>
    </script>
}

