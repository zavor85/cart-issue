@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using Dynamicweb.Core
@using Dynamicweb.Rapido.Blocks;
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce; 
@using Dynamicweb.Rapido.Blocks.Components.General;

@using Dynamicweb.Rapido.Blocks.Components;

@functions {
    BlocksPage newDraftModalPage = BlocksPage.GetBlockPage("CartList");
}

@{    
    var newDraftModal = new Modal
    {
        Id = "NewDraft",
        Heading = new Heading { Title = Translate("New draft") },
        Width = Pageview.User.GetUsersICanSetAsSecondary().Count == 0 ? ModalWidth.Md : ModalWidth.Lg,
        BodyTemplate = RenderNewModalBody()
    };

    newDraftModal.AddActions(
        new Button
        {
            ButtonLayout = ButtonLayout.Secondary,
            Title = Translate("Cancel"),
            OnClick = "document.getElementById('NewDraftModalTrigger').checked = false;"
        },
        new Button
        {
            ButtonLayout = ButtonLayout.Primary,
            Title = Translate("OK"),
            OnClick = "Request.AjaxFormSubmit(event, document.getElementById('NewDraftForm'), location.reload())"
        }
    );

    newDraftModalPage.Add("List", new Block
    {
        Id = "NewModal",
        SortId = 40,
        Component = newDraftModal
    });
}

@helper RenderNewModalBody()
{
    var secondaryUsers = Pageview.User.GetUsersICanSetAsSecondary();

    <form method="post" id="NewDraftForm" action="/Default.aspx?ID=@Pageview.Page.ID&cartcmd=createnew&redirect=false" class="js-filter">
        <div class="u-w380px">
            @Render(new TextField
            {
                Id = "NewDraftName",
                Label = Translate("Draft name"),
                Name = "CartName",
                Required = true
            })
        </div>

        @if (secondaryUsers.Count > 0)
        {
            <label>@Translate("Customer")</label>

            if (secondaryUsers.Count > 4)
            {
                <div class="u-w380px">
                    @Render(new TextField { Placeholder = Translate("Type customer name or number"), OnKeyUp = "Filter.FilterItems(event)" })
                </div>

                @Render(new NotificationMessage { Message = Translate("No customers found"), MessageType = NotificationMessageType.Warning, MessageLayout = NotificationMessageLayout.Box, CssClass = "js-filter-not-found u-hidden" })
            }

            <div class="u-max-h500px u-overflow-auto">
                @{ 
                    CustomerCenterList table = new CustomerCenterList { };

                    foreach (var user in secondaryUsers)
                    {
                        CustomerCenterListItem userRow = new CustomerCenterListItem();
                        userRow.ExtraAttributes.Add("onmouseover", "mouseOverUserRow('" + user.ID + "')");
                        userRow.ExtraAttributes.Add("onmouseout", "mouseOutUserRow('" + user.ID + "')");
                        userRow.ExtraAttributes.Add("data-filter-value", user.Name + " " + user.CustomerNumber);

                        Button signInButton = new Button
                        {
                            Title = Translate("Select"),
                            OnClick = "selectUser('" + user.ID + "', this)",
                            ButtonLayout = ButtonLayout.Primary,
                            CssClass = "u-no-margin u-hidden",
                            Id = "SecondaryUserSelect" + user.ID
                        };

                        Icon userSelectedIcon = new Icon { Name = "fa-check-circle", Prefix = "fal" };

                        userRow.AddInfoItem(new CustomerCenterListInfoItem { Title = user.Name });
                        userRow.AddInfoItem(new CustomerCenterListInfoItem { Title = user.CustomerNumber });
                        userRow.AddInfoItem(new CustomerCenterListInfoItem { Title = user.Email });
                        userRow.AddInfoItem(new CustomerCenterListInfoItem { Title = user.Address + ", " + user.Zip + " " + user.City + ", " + user.CountryCode });

                        CustomerCenterListInfoItem selector = new CustomerCenterListInfoItem
                        {
                            Title = Render(signInButton).ToString() + " <div Id=\"SecondaryUserChecked" + user.ID + "\" class=\"u-hidden\">" + Render(userSelectedIcon).ToString() + "</div>",
                            Align = CustomerCenterListInfoItemAlignment.Right
                        };
                        selector.ExtraAttributes.Add("height", "70");
                        selector.ExtraAttributes.Add("width", "140");

                        userRow.AddInfoItem(selector);

                        table.AddListItem(userRow);
                    }
                }
                @Render(table) 
            </div>
        } 

        @Render(new HiddenField
        {
            Id = "NewDraftCustomer",
            Name = "CartUserId",
            Value = Pageview.User.ID.ToString()
        })
    </form>

    <script>
        function mouseOverUserRow(userId) {
            var selectedUserId = document.getElementById('NewDraftCustomer').value;
             
            if (userId != selectedUserId) {
                document.getElementById("SecondaryUserSelect" + userId).classList.remove('u-hidden');
            }
        }

        function mouseOutUserRow(userId) {
            document.getElementById("SecondaryUserSelect" + userId).classList.add('u-hidden');
        }

        function selectUser(userId, clickedButton) {
            var allSecondaryUserCheckedIcons = document.querySelectorAll('[id^="SecondaryUserChecked"]');

            for (var icon of allSecondaryUserCheckedIcons) {
                icon.classList.add("u-hidden");
            }

            clickedButton.classList.add("u-hidden");
            document.getElementById("SecondaryUserChecked" + userId).classList.remove("u-hidden");

            document.getElementById('NewDraftCustomer').value = userId;
        }
    </script>
}
