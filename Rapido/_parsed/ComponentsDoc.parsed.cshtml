@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

@using System.Web;
@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Devices
@using Dynamicweb.Extensibility
@using Dynamicweb.Content
@using Dynamicweb.Security
@using Dynamicweb.Core
@using System
@using System.Web
@using System.IO
@using Dynamicweb.Rapido.Blocks
@using System.Net

@functions {
    BlocksPage masterPage = BlocksPage.GetBlockPage("Master");

    string getFontFamily(params string[] items)
    {
        var itemParent = Pageview.AreaSettings;
        foreach (var item in items)
        {
            itemParent = itemParent.GetItem(item);
            if (itemParent == null)
            {
                return null;
            }
        }

        var googleFont = itemParent.GetGoogleFont("FontFamily");
        if (googleFont == null)
        {
            return null;
        }
        return googleFont.Family.Replace(" ", "+");
    }
}

@{
    Block root = new Block
    {
        Id = "Root",
        SortId = 10,
        BlocksList = new List<Block>
        {
            new Block {
                Id = "Head",
                SortId = 10,
                SkipRenderBlocksList = true,
                Template = RenderMasterHead(),
                BlocksList = new List<Block>
                {
                    new Block {
                        Id = "HeadCss",
                        SortId = 20,
                        Template = RenderMasterCss(),
                    }
                }
            },
            new Block {
                Id = "Body",
                SortId = 20,
                SkipRenderBlocksList = true,
                Template = RenderMasterBody(),
                BlocksList = new List<Block>
                {
                    new Block()
                    {
                        Id = "Master",
                        SortId = 10,
                        BlocksList = new List<Block> {
                            new Block {
                                Id = "MasterTopSnippets",
                                SortId = 10
                            },
                            new Block {
                                Id = "MasterMain",
                                SortId = 20,
                                Template = RenderMain(),
                                SkipRenderBlocksList = true,
                                BlocksList = new List<Block> {
                                    new Block {
                                        Id = "MasterPageContent",
                                        SortId = 10,
                                        Template = RenderPageContent()
                                    }
                                }
                            },
                            new Block {
                                Id = "MasterFooter",
                                SortId = 30
                            },
                            new Block {
                                Id = "MasterReferences",
                                SortId = 40
                            },
                            new Block {
                                Id = "MasterBottomSnippets",
                                SortId = 50
                            }
                        }
                    }
                }
            }
        }
    };
    masterPage.Add(root);

    Block footer = new Block
    {
        Id = "Footer",
        SortId = 20,
        Template = RenderNoLayoutFooter()
    };
    masterPage.Add("MasterFooter", footer);
}

@* Include the required Grid builder (Contains the methods @RenderBlockList and @RenderBlock) *@
@using System.Text.RegularExpressions
@using System.Collections.Generic
@using System.Reflection
@using System.Web
@using System.Web.UI.HtmlControls
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.Documentation
@using Dynamicweb.Rapido.Blocks


@*--- START: Base block renderers ---*@

@helper RenderBlockList(List<Block> blocks)
{
    bool debug = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("debug")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("debug")) : false;
    blocks = blocks.OrderBy(item => item.SortId).ToList();

    foreach (Block item in blocks)
    {
        if (debug) {
        <!-- Block START: @item.Id -->
        }

        if (item.Design == null)
        {
            @RenderBlock(item)
        }
        else if (item.Design.RenderType == RenderType.None) {
            string cssClass = item.Design.CssClass != null ? item.Design.CssClass : "";

            <div class="@cssClass dw-mod">
               @RenderBlock(item)
            </div>
        }
        else if (item.Design.RenderType != RenderType.Hide)
        {
            string cssClass = item.Design.CssClass != null ? item.Design.CssClass : "";

            if (!item.SkipRenderBlocksList) {
                if (item.Design.RenderType == RenderType.Row)
                {
                    <div class="grid grid--align-content-start @cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.Column)
                {
                    string hidePadding = item.Design.HidePadding ? "u-no-padding" : "";
                    string size = item.Design.Size ?? "12";
                    size = Regex.IsMatch(size, @"\d") ? "md-" + item.Design.Size : item.Design.Size;

                    <div class="grid__col-lg-@item.Design.Size grid__col-md-@item.Design.Size grid__col-sm-12 grid__col-xs-12 @hidePadding @cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.Table)
                {
                    <table class="table @cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </table>
                }

                if (item.Design.RenderType == RenderType.TableRow)
                {
                    <tr class="@cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </tr>
                }

                if (item.Design.RenderType == RenderType.TableColumn)
                {
                    <td class="@cssClass dw-mod" id="Block__@item.Id">
                        @RenderBlock(item)
                    </td>
                }

                if (item.Design.RenderType == RenderType.CardHeader)
                {
                    <div class="card-header @cssClass dw-mod">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.CardBody)
                {
                    <div class="card @cssClass dw-mod">
                        @RenderBlock(item)
                    </div>
                }

                if (item.Design.RenderType == RenderType.CardFooter)
                {
                    <div class="card-footer @cssClass dw-mod">
                        @RenderBlock(item)
                    </div>
                }
            }
            else 
            {
                @RenderBlock(item)
            }
        }

        if (debug) {
        <!-- Block END: @item.Id -->
        }
    }
}

@helper RenderBlock(Block item)
{
    bool debug = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("debug")) ? Convert.ToBoolean(HttpContext.Current.Request.QueryString.Get("debug")) : false;

    if (item.Template != null)
    {
        @BlocksPage.RenderTemplate(item.Template)
    }

    if (item.Component != null)
    {
        string customSufix = "Custom";
        string methodName = item.Component.HelperName;

        ComponentBase[] methodParameters = new ComponentBase[1]; 
        methodParameters[0] = item.Component; 
        Type methodType = this.GetType();

        MethodInfo customMethod = methodType.GetMethod(methodName + customSufix);
        MethodInfo generalMethod = methodType.GetMethod(methodName);

        try {
            if (debug) {
            <!-- Component: @methodName.Replace("Render", "") -->
            }
            @customMethod.Invoke(this, methodParameters).ToString();
        } catch {
            try {
                @generalMethod.Invoke(this, methodParameters).ToString();
            } catch(Exception ex) {
                throw new Exception(item.Component.GetType().Name + " method '" + methodName +"' could not be invoked", ex);
            }
        }
    }

    if (item.BlocksList.Count > 0 && !item.SkipRenderBlocksList)
    {
        @RenderBlockList(item.BlocksList)
    }
}

@*--- END: Base block renderers ---*@


@* Include the components that makes it possible to render articles *@
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks
@using System.IO

@* Required *@
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@helper Render(ComponentBase component)
{
    if (component != null)
    {
        @component.Render(this)
    }
}

@* Components *@
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component *@

@helper RenderIcon(Icon settings)
{
    if (settings != null)
    {
        string color = settings.Color != null ? "style=\"color: " + settings.Color + "\"" : "";

        if (settings.Name != null)
        {
            if (string.IsNullOrEmpty(settings.Label))
            {
                <i class="@settings.Prefix @settings.Name @settings.CssClass" @color></i>
            }
            else
            {
                if (settings.LabelPosition == IconLabelPosition.Before)
                {
                    <div class="u-flex u-flex--align-items-center @settings.CssClass">@settings.Label <i class="@settings.Prefix @settings.Name u-margin-left" @color></i></div>
                }
                else
                {
                    <div class="u-flex u-flex--align-items-center @settings.CssClass"><i class="@settings.Prefix @settings.Name u-margin-right--lg u-w20px" @color></i>@settings.Label</div>
                }
            }
        }
        else if (!string.IsNullOrEmpty(settings.Label))
        {
            @settings.Label
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@* Component *@

@helper RenderButton(Button settings)
{
    if (settings != null && (!string.IsNullOrEmpty(settings.Title) || settings.Icon != null))
    {
        Dictionary<string, string> attributes = new Dictionary<string, string>();
        List<string> classList = settings.CssClass != null ? settings.CssClass.Split(' ').ToList() : new List<string>();
        if (settings.Disabled) {
            attributes.Add("disabled", "true");
            classList.Add("disabled");
        }
        
        if (!string.IsNullOrEmpty(settings.ConfirmText) || !string.IsNullOrEmpty(settings.ConfirmTitle))
        {
            settings.Id = !string.IsNullOrEmpty(settings.Id) ? settings.Id : Guid.NewGuid().ToString("N");
            @RenderConfirmDialog(settings);
        settings.OnClick = "document.getElementById('" + settings.Id + "ModalTrigger').checked = true";
    }

    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    if (!string.IsNullOrEmpty(settings.AltText))
    {
        attributes.Add("title", settings.AltText);
    }
    else if (!string.IsNullOrEmpty(settings.Title))
    {
        string cleanTitle = Regex.Replace(settings.Title, "<.*?>", String.Empty);
        cleanTitle = cleanTitle.Replace("&nbsp;", " ");
        attributes.Add("title", cleanTitle);
    }

    var onClickEvents = new List<string>();
    if (!string.IsNullOrEmpty(settings.OnClick))
    {
        onClickEvents.Add(settings.OnClick);
    }
    if (!string.IsNullOrEmpty(settings.Href))
    {
        onClickEvents.Add("location.href='" + settings.Href + "'");
    }
    if (onClickEvents.Count > 0)
    {
        attributes.Add("onClick", string.Join(";", onClickEvents));
    }

    if (settings.ButtonLayout != ButtonLayout.None)
    {
        classList.Add("btn");
        string btnLayout = Enum.GetName(typeof(ButtonLayout), settings.ButtonLayout).ToLower();
        if (btnLayout == "linkclean")
        {
            btnLayout = "link-clean"; //fix
        }
        classList.Add("btn--" + btnLayout);
    }

        if (settings.Icon == null)
        {
            settings.Icon = new Icon();
        }

        settings.Icon.CssClass += Enum.GetName(typeof(ButtonLayout), settings.ButtonLayout).ToLower() != "linkclean" ? " u-flex--align-center" : "";
        settings.Icon.Label = settings.Title;

    attributes.Add("type", Enum.GetName(typeof(ButtonType), settings.ButtonType).ToLower());

        <button class="@string.Join(" ", classList) dw-mod" @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@Render(settings.Icon)</button>
    }
}

@helper RenderConfirmDialog(Button settings)
{
    Modal confirmDialog = new Modal {
        Id = settings.Id,
        Width = ModalWidth.Sm,
        Heading = new Heading
        {
            Level = 2,
            Title = settings.ConfirmTitle
        },
        BodyText = settings.ConfirmText
    };

    confirmDialog.AddAction(new Button { Title = Translate("Cancel"), ButtonLayout = ButtonLayout.Secondary, OnClick = "document.getElementById('" + settings.Id + "ModalTrigger').checked = false"});
    confirmDialog.AddAction(new Button { Title = Translate("OK"), ButtonLayout = ButtonLayout.Primary, OnClick = "document.getElementById('" + settings.Id + "ModalTrigger').checked = false;" + settings.OnClick });

    @Render(confirmDialog)
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@helper RenderDashboard(Dashboard settings)
{
    var widgets = settings.GetWidgets();

    if (!string.IsNullOrEmpty(settings.WidgetsBaseBackgroundColor))
    {
        //set bg color for them

        System.Drawing.Color color = System.Drawing.ColorTranslator.FromHtml(settings.WidgetsBaseBackgroundColor);
        int r = Convert.ToInt16(color.R);
        int g = Convert.ToInt16(color.G);
        int b = Convert.ToInt16(color.B);

        var count = widgets.Length;
        var max = Math.Max(r, Math.Max(g, b));
        double step = 255.0 / (max * count);
        var i = 0;
        foreach (var widget in widgets)
        {
            i++;

            var shade = "rgb(" + Converter.ToString(r * step * i).Replace(",", ".") + ", " + Converter.ToString(g * step * i).Replace(",", ".") + ", " + Converter.ToString(b * step * i).Replace(",", ".") + ")";
            widget.BackgroundColor = shade;
        }
    }

    <div class="dashboard @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        @foreach (var widget in widgets)
        {
            <div class="dashboard__widget">
                @Render(widget)
            </div>
        }
    </div>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderDashboardWidgetLink(DashboardWidgetLink settings)
{
    if (!string.IsNullOrEmpty(settings.Link))
    {
        var backgroundStyles = "";
        if (!string.IsNullOrEmpty(settings.BackgroundColor))
        {
            backgroundStyles = "style=\"background-color:" + settings.BackgroundColor + "\"";
        }

        <a href="@settings.Link" class="widget widget--link @settings.CssClass dw-mod" @backgroundStyles title="@settings.Title" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
            <div class="u-center-middle u-color-light">
                @if (settings.Icon != null)
                {
                    settings.Icon.CssClass += "widget__icon";
                    @Render(settings.Icon)
                }
                <div class="widget__title">@settings.Title</div>
            </div>
        </a>
    }
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderDashboardWidgetCounter(DashboardWidgetCounter settings)
{
    var backgroundStyles = "";
    if (!string.IsNullOrEmpty(settings.BackgroundColor))
    {
        backgroundStyles = "style='background-color:" + settings.BackgroundColor + "'";
    }

    <div class="widget @settings.CssClass dw-mod" @backgroundStyles @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        <div class="u-center-middle u-color-light">
            @if (settings.Icon != null)
            {
                settings.Icon.CssClass += "widget__icon";
                @Render(settings.Icon)
            }
            <div class="widget__counter">@settings.Count</div>
            <div class="widget__title">@settings.Title</div>
        </div>
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@* Component *@

@helper RenderLink(Link settings)
{
    if (settings != null && !string.IsNullOrEmpty(settings.Href) && (!string.IsNullOrEmpty(settings.Title) || settings.Icon != null))
    {
        Dictionary<string, string> attributes = new Dictionary<string, string>();
        List<string> classList = settings.CssClass != null ? settings.CssClass.Split(' ').ToList() : new List<string>();
        if (settings.Disabled) 
        {
            attributes.Add("disabled", "true");
            classList.Add("disabled");
        }
        
        if (!string.IsNullOrEmpty(settings.AltText)) 
        { 
            attributes.Add("title", settings.AltText); 
        } 
        else if (!string.IsNullOrEmpty(settings.Title)) 
        { 
            attributes.Add("title", settings.Title); 
        }

        if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
        if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
        if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onClick", settings.OnClick); }
        attributes.Add("href", settings.Href);

        if (settings.ButtonLayout != ButtonLayout.None) 
        {
            classList.Add("btn");
            string btnLayout = Enum.GetName(typeof(ButtonLayout), settings.ButtonLayout).ToLower();
            if (btnLayout == "linkclean") 
            {
                btnLayout = "link-clean"; //fix
            }
            classList.Add("btn--" + btnLayout);
        }
        
        if (settings.Icon == null)
        {
            settings.Icon = new Icon();
        }
        settings.Icon.Label = settings.Title;
        
        if (settings.Target == LinkTargetType.Blank && settings.Rel == LinkRelType.None) 
        {
            settings.Rel = LinkRelType.Noopener;
        }
        if (settings.Target != LinkTargetType.None) 
        { 
            attributes.Add("target", "_" + Enum.GetName(typeof(LinkTargetType), settings.Target).ToLower()); 
        }
        if (settings.Download) 
        { 
            attributes.Add("download", "true"); 
        }
        if (settings.Rel != LinkRelType.None) 
        { 
            attributes.Add("rel", Enum.GetName(typeof(LinkRelType), settings.Rel).ToLower()); 
        }

        <a class="@string.Join(" ", classList) dw-mod" @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@Render(settings.Icon)</a>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@* Component *@

@helper RenderRating(Rating settings)
{
    if (settings.Score > 0)
    {
        int rating = settings.Score;
        string iconType = "fa-star";

        switch (settings.Type.ToString()) {
            case "Stars":
                iconType = "fa-star";
                break;
            case "Hearts":
                iconType = "fa-heart";
                break;
            case "Lemons":
                iconType = "fa-lemon";
                break;
            case "Bombs":
                iconType = "fa-bomb";
                break;
        }

        <div class="u-ta-right">
            @for (int i = 0; i < settings.OutOf; i++)
            {
                <i class="@(rating > i ? "fas" : "far") @iconType"></i>
            }
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderSelectFieldOption(SelectFieldOption settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (settings.Checked) { attributes.Add("selected", "true"); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Value != null) { attributes.Add("value", settings.Value); }
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }

    <option @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@settings.Label</option>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderNavigation(Navigation settings) {
    @RenderNavigation(new
    {
        id = settings.Id,
        cssclass = settings.CssClass,
        startLevel = settings.StartLevel,
        endlevel = settings.EndLevel,
        expandmode = settings.Expandmode,
        sitemapmode = settings.SitemapMode,
        template = settings.Template
    })
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderBreadcrumbNavigation(BreadcrumbNavigation settings) {
    settings.Id = String.IsNullOrEmpty(settings.Id) ? "breadcrumb" : settings.Id;
    settings.Template = String.IsNullOrEmpty(settings.Template) ? "Breadcrumb.xslt" : settings.Template;
    settings.StartLevel = settings.StartLevel == 0 ? 1 : settings.StartLevel;
    settings.EndLevel = settings.EndLevel == 10 ? 1 : settings.EndLevel;
    settings.Expandmode = String.IsNullOrEmpty(settings.Expandmode) ? "all" : settings.Expandmode;
    settings.SitemapMode = false;

    @RenderNavigation(settings)         
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderLeftNavigation(LeftNavigation settings) {
    settings.Id = String.IsNullOrEmpty(settings.Id) ? "breadcrumb" : settings.Id;
    settings.Template = String.IsNullOrEmpty(settings.Template) ? "Breadcrumb.xslt" : settings.Template;
    settings.StartLevel = settings.StartLevel == 0 ? 1 : settings.StartLevel;
    settings.EndLevel = settings.EndLevel == 10 ? 1 : settings.EndLevel;
    settings.Expandmode = String.IsNullOrEmpty(settings.Expandmode) ? "all" : settings.Expandmode;

    <div class="grid__cell">
        @RenderNavigation(settings) 
    </div>       
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Core

@* Component *@

@helper RenderHeading(Heading settings)
{
    if (settings != null && !string.IsNullOrEmpty(settings.Title))
    {
        string color = settings.Color != null ? "style=\"color: " + settings.Color + "\"" : "";
        string tagName = settings.Level != 0 ? "h" + settings.Level.ToString() : "div";

        @("<" + tagName + " class=\"" + settings.CssClass + " dw-mod\" " + color + ">")
            if (!string.IsNullOrEmpty(settings.Link))
            {
                @Render(new Link { Href = settings.Link, Icon = settings.Icon, Title = settings.Title, ButtonLayout = ButtonLayout.None })
            } 
            else
            {
                if (settings.Icon == null)
                {
                    settings.Icon = new Icon();
                }
                settings.Icon.Label = settings.Title;
                @Render(settings.Icon)
            }
        @("</" + tagName + ">");
    }
}
@using System.Collections.Generic
@using System.Web
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@* Component *@

@helper RenderImage(Image settings)
{
    if (settings.FilterPrimary != ImageFilter.None || settings.FilterSecondary != ImageFilter.None)
    {
        Dictionary<string, string> optionalAttributes = new Dictionary<string, string>();
        if (!string.IsNullOrEmpty(settings.FilterColor)) { optionalAttributes.Add("style", "background-color: " + settings.FilterColor); }
        
        if (settings.Caption != null)
        {
            @:<div>
        }

        var primaryFilterClass = settings.FilterPrimary.ToString().ToLower();
        var secondaryFilterClass = settings.FilterSecondary.ToString().ToLower();

        <div class="image-filter image-filter--@primaryFilterClass u-position-relative dw-mod" @ComponentMethods.AddAttributes(optionalAttributes)>
            <div class="image-filter image-filter--@secondaryFilterClass dw-mod">
                @if (settings.Link != null)
                {
                    <a href="@settings.Link">
                        @RenderTheImage(settings)
                    </a>
                }
                else
                {
                    @RenderTheImage(settings)
                }
            </div>
        </div>

        if (settings.Caption != null)
        {
            <span class="image-caption dw-mod">@settings.Caption</span>
            @:</div>
        }
    }
    else 
    {
        if (settings.Caption != null)
        {
            @:<div>
        }
        if (!string.IsNullOrEmpty(settings.Link))
        {
            <a href="@settings.Link">
                @RenderTheImage(settings)
            </a>
        }
        else
        {
            @RenderTheImage(settings)
        }

        if (settings.Caption != null)
        {
            <span class="image-caption dw-mod">@settings.Caption</span>
            @:</div>
        }
    }
}

@helper RenderTheImage(Image settings)
{
if (settings != null)
{
    string alternativeImage = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("AlternativeImage")) ? Pageview.AreaSettings.GetItem("Settings").GetFile("AlternativeImage").PathUrlEncoded : "/Images/missing_image.jpg";
    string placeholderImage = "/Files/Images/placeholder.gif";
    string imageEngine = "/Admin/Public/GetImage.ashx?";

    string imageStyle = "";

    switch (settings.Style)
    {
        case ImageStyle.Ball:
            imageStyle = "grid__cell-img--ball";
            break;

        case ImageStyle.Triangle:
            imageStyle = "grid__cell-img--triangle";
            break;
    }

    if (settings.Style == ImageStyle.Ball || settings.Style == ImageStyle.Circle || settings.Style == ImageStyle.Triangle)
    {
        settings.ImageDefault.Crop = settings.ImageDefault.Crop == 5 ? settings.ImageDefault.Crop = 0 : settings.ImageDefault.Crop;

        if (settings.ImageDefault != null)
        {
            settings.ImageDefault.Height = settings.ImageDefault.Width;
        }
        if (settings.ImageMedium != null)
        {
            settings.ImageMedium.Height = settings.ImageMedium.Width;
        }
        if (settings.ImageSmall != null)
        {
            settings.ImageSmall.Height = settings.ImageSmall.Width;
        }
    }

    string defaultImage = imageEngine;
    string imageSmall = "";
    string imageMedium = "";

    if (settings.DisableImageEngine)
    {
        defaultImage = settings.Path;
    }
    else
    {
        if (settings.ImageDefault != null)
        {
            defaultImage += Dynamicweb.Rapido.Services.Images.GetImagePathFromSettings(settings.ImageDefault);

            if (settings.Path.GetType() != typeof(string))
            {
                defaultImage += settings.Path != null ? "Image=" + settings.Path.PathUrlEncoded : "";
                defaultImage += settings.Path != null ? "&" + settings.Path.GetFocalPointParameters() : "";
            }
            else
            {
                defaultImage += settings.Path != null ? "Image=" + HttpUtility.UrlEncode(settings.Path) : "";
            }

            defaultImage += "&AlternativeImage=" + alternativeImage;
            defaultImage += "&format=webp";

            if (defaultImage.Length > 255)
            {
                defaultImage = defaultImage.Replace("&AlternativeImage=" + alternativeImage, "");
                defaultImage = defaultImage.Replace($"Crop=5&DoNotUpscale=True", "");
                defaultImage = defaultImage.Replace($"&format=webp", "");
            }
        }

        if (settings.ImageSmall != null)
        {
            imageSmall = "data-src-small=\"" + imageEngine;
            imageSmall += Dynamicweb.Rapido.Services.Images.GetImagePathFromSettings(settings.ImageSmall);

            if (settings.Path.GetType() != typeof(string))
            {
                imageSmall += settings.Path != null ? "Image=" + settings.Path.PathUrlEncoded : "";
                imageSmall += settings.Path != null ? "&" + settings.Path.GetFocalPointParameters() : "";
            }
            else
            {
                imageSmall += settings.Path != null ? "Image=" + HttpUtility.UrlEncode(settings.Path) : "";
            }
            imageSmall += "&alternativeImage=" + alternativeImage;
            imageSmall += "&format=webp";

            imageSmall += "\"";
        }

        if (settings.ImageMedium != null)
        {
            imageMedium = "data-src-medium=\"" + imageEngine;
            imageMedium += Dynamicweb.Rapido.Services.Images.GetImagePathFromSettings(settings.ImageMedium);

            if (settings.Path.GetType() != typeof(string))
            {
                imageMedium += settings.Path != null ? "Image=" + settings.Path.PathUrlEncoded : "";
                imageMedium += settings.Path != null ? "&" + settings.Path.GetFocalPointParameters() : "";
            }
            else
            {
                imageMedium += settings.Path != null ? "Image=" + HttpUtility.UrlEncode(settings.Path) : "";
            }

            imageMedium += "&alternativeImage=" + alternativeImage;
            imageMedium += "&format=webp";
            imageMedium += "\"";
        }
    }

    Dictionary<string, string> optionalAttributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.OnClick)) { optionalAttributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.Title))
    {
        optionalAttributes.Add("alt", settings.Title);
        optionalAttributes.Add("title", settings.Title);
    }

    if (settings.DisableLazyLoad)
    {
                <img id="@settings.Id" class="@imageStyle @settings.CssClass dw-mod" src="@defaultImage" @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes) />
            } 
            else 
            {
                <img id="@settings.Id" class="b-lazy @imageStyle @settings.CssClass dw-mod" src="@placeholderImage" data-src="@defaultImage" @imageSmall @imageMedium @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes) />
            }
        }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderFileField(FileField settings)
{
    var attributes = new Dictionary<string, string>();
    if (string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }
    
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (settings.Multiple) { attributes.Add("multiple", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    if (string.IsNullOrEmpty(settings.ChooseFileText)) 
    { 
        settings.ChooseFileText = Translate("Choose file");
    }
    if (string.IsNullOrEmpty(settings.NoFilesChosenText)) 
    { 
        settings.NoFilesChosenText = Translate("No files chosen...");
    }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    string setValueToFakeInput = "FileUpload.setValueToFakeInput(this)";
    attributes.Add("onchange", setValueToFakeInput + (!string.IsNullOrEmpty(settings.OnChange) ? settings.OnChange : ""));

    attributes.Add("type", "file");
    if (settings.Value != null) { attributes.Add("value", settings.Value); }
    settings.CssClass = "u-full-width " + settings.CssClass;

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group u-full-width @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        <div class="form__field-combi file-input u-no-margin dw-mod">
            <input @ComponentMethods.AddAttributes(resultAttributes) class="file-input__real-input" data-no-files-text="@settings.NoFilesChosenText" data-many-files-text="@Translate("files")" />
            <label for="@settings.Id" class="file-input__btn btn--secondary btn dw-mod">@settings.ChooseFileText</label>
            <label for="@settings.Id" class="@settings.CssClass file-input__fake-input js-fake-input dw-mod">@settings.NoFilesChosenText</label>
            @if (settings.UploadButton != null)
            {
                settings.UploadButton.CssClass += " btn--condensed u-no-margin";
                @Render(settings.UploadButton)
            }
        </div>
        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core
@using System.Linq

@* Component *@

@helper RenderDateTimeField(DateTimeField settings)
{
    if (string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    var textField = new TextField {
        Name = settings.Name,
        Id = settings.Id,
        Label = settings.Label,
        HelpText = settings.HelpText,
        Value = settings.Value,
        Disabled = settings.Disabled,
        Required = settings.Required,
        ErrorMessage = settings.ErrorMessage,
        CssClass = settings.CssClass,
        WrapperCssClass = settings.WrapperCssClass,
        OnChange = settings.OnChange,
        OnClick = settings.OnClick,
        Link = settings.Link,
        ExtraAttributes = settings.ExtraAttributes,
        //
        Placeholder = settings.Placeholder
    };

    @Render(textField)

    List<string> jsAttributes = new List<string>();

    jsAttributes.Add("mode: '" + Enum.GetName(typeof(DateTimeFieldMode), settings.Mode).ToLower() + "'");

    if (!string.IsNullOrEmpty(settings.DateFormat))
    {
        jsAttributes.Add("dateFormat: '" + settings.DateFormat + "'");
    }
    if (!string.IsNullOrEmpty(settings.MinDate))
    {
        jsAttributes.Add("minDate: '" + settings.MinDate + "'");
    }
    if (!string.IsNullOrEmpty(settings.MaxDate))
    {
        jsAttributes.Add("maxDate: '" + settings.MaxDate + "'");
    }
    if (settings.IsInline)
    {
        jsAttributes.Add("inline: " + Converter.ToString(settings.IsInline).ToLower());
    }
    if (settings.EnableTime)
    {
        jsAttributes.Add("enableTime: " + Converter.ToString(settings.EnableTime).ToLower());
    }
    if (settings.EnableWeekNumbers)
    {
        jsAttributes.Add("weekNumbers: " + Converter.ToString(settings.EnableWeekNumbers).ToLower());
    }
    
    jsAttributes.AddRange(settings.GetFlatPickrOptions().Select(x => x.Key + ": " + x.Value));

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            flatpickr("#@textField.Id", {
                @string.Join(",", jsAttributes)
            });
        });
    </script>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderTextField(TextField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/
    
    if (!string.IsNullOrEmpty(settings.OnKeyUp)) { attributes.Add("onkeyup", settings.OnKeyUp); }
    if (!string.IsNullOrEmpty(settings.OnInput)) { attributes.Add("oninput", settings.OnInput); }
    if (!string.IsNullOrEmpty(settings.OnFocus)) { attributes.Add("onfocus", settings.OnFocus); }
    if (settings.ReadOnly) { attributes.Add("readonly", "true"); }
    if (settings.MaxLength != 0) { attributes.Add("maxlength", settings.MaxLength.ToString()); }
    if (!string.IsNullOrEmpty(settings.Placeholder)) { attributes.Add("placeholder", settings.Placeholder); }
    attributes.Add("type", Enum.GetName(typeof(TextFieldType), settings.Type).ToLower());
    if (settings.Type == TextFieldType.Password) { attributes.Add("autocomplete", "off"); };
    if (settings.Value != null) { attributes.Add("value", settings.Value); }

    settings.CssClass = "u-full-width " + settings.CssClass;

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    string noMargin = "u-no-margin";
    if (!settings.ReadOnly) {
        noMargin = "";
    }

    <div class="form__field-group u-full-width @noMargin @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    settings.Link.ButtonLayout = ButtonLayout.LinkClean;

                    <div class="u-pull--right">
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @if (settings.ActionButton != null)
        {
            settings.ActionButton.CssClass += " btn--condensed u-no-margin";
            <div class="form__field-combi u-no-margin dw-mod">
                <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
                @Render(settings.ActionButton)
            </div>
        }
        else
        {
            <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderNumberField(NumberField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/

    if (!string.IsNullOrEmpty(settings.OnKeyUp)) { attributes.Add("onkeyup", settings.OnKeyUp); }
    if (!string.IsNullOrEmpty(settings.OnInput)) { attributes.Add("oninput", settings.OnInput); }
    if (!string.IsNullOrEmpty(settings.OnFocus)) { attributes.Add("onfocus", settings.OnFocus); }
    if (settings.ReadOnly) { attributes.Add("readonly", "true"); }
    if (settings.Max != null) { attributes.Add("max", settings.Max.ToString()); }
    if (settings.Min != null) { attributes.Add("min", settings.Min.ToString()); }
    if (settings.Step != 0) { attributes.Add("step", settings.Step.ToString()); }
    if (settings.Value != null && !string.IsNullOrEmpty(settings.Value.ToString())) { attributes.Add("value", settings.Value.ToString()); }
    attributes.Add("type", "number");

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group u-full-width @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @if (settings.ActionButton != null)
        {
            settings.ActionButton.CssClass += " btn--condensed u-no-margin";
            <div class="form__field-combi u-no-margin dw-mod">
                <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
                @Render(settings.ActionButton)
            </div>
        }
        else
        {
            <div class="form__field-combi u-no-margin dw-mod">
                <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
            </div>
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderTextareaField(TextareaField settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();    
    string id = settings.Id;
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(id)) 
    {
        id = Guid.NewGuid().ToString("N");
    }
    
    if (!string.IsNullOrEmpty(id)) { attributes.Add("id", id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnKeyUp)) { attributes.Add("onkeyup", settings.OnKeyUp); }
    if (!string.IsNullOrEmpty(settings.OnInput)) { attributes.Add("oninput", settings.OnInput); }
    if (!string.IsNullOrEmpty(settings.OnFocus)) { attributes.Add("onfocus", settings.OnFocus); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (!string.IsNullOrEmpty(settings.Placeholder)) { attributes.Add("placeholder", settings.Placeholder); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (settings.ReadOnly) { attributes.Add("readonly", "true"); }
    if (settings.MaxLength != 0) { attributes.Add("maxlength", settings.MaxLength.ToString()); }
    if (settings.Rows != 0) { attributes.Add("rows", settings.Rows.ToString()); }
    attributes.Add("name", settings.Name);

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    <div class="form__field-group @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div> 
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        <textarea class="u-full-width @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@settings.Value</textarea>

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderHiddenField(HiddenField settings) {
    var attributes = new Dictionary<string, string>();
    attributes.Add("type", "hidden");
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (settings.Value != null) { attributes.Add("value", settings.Value); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }

    <input @ComponentMethods.AddAttributes(attributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)/>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderCheckboxField(CheckboxField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }
    
    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/

    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }
    
    attributes.Add("type", "checkbox");
    if (settings.Checked) { attributes.Add("checked", "true"); }
    settings.CssClass = "form__control " + settings.CssClass;
    if (settings.Value != null) { attributes.Add("value", settings.Value); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group @settings.WrapperCssClass dw-mod">
        <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            <label for="@settings.Id" class="dw-mod">@settings.Label</label>
        }

        @if (settings.Link != null) {
            <span>
                @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                @Render(settings.Link)
            </span>
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text checkbox-help dw-mod">@settings.HelpText</small>
        }
        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderCheckboxListField(CheckboxListField settings)
{
    <div class="form__field-group @settings.WrapperCssClass u-margin-bottom dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div>
            
        }

        <div class="u-pull--left">
            @if (!string.IsNullOrEmpty(settings.HelpText))
            {
                <small class="form__help-text">@settings.HelpText</small>
            }

            @foreach (var item in settings.Options)
            {
                if (settings.Required)
                {
                    item.Required = true;
                }
                if (settings.Disabled)
                {
                    item.Disabled = true;
                }
                if (!string.IsNullOrEmpty(settings.Name))
                {
                    item.Name = settings.Name;
                }
                if (!string.IsNullOrEmpty(settings.CssClass))
                {
                    item.CssClass += settings.CssClass;
                }

                /* value is not supported */

                if (!string.IsNullOrEmpty(settings.OnClick))
                {
                    item.OnClick += settings.OnClick;
                }
                if (!string.IsNullOrEmpty(settings.OnChange))
                {
                    item.OnChange += settings.OnChange;
                }
                @Render(item)
            }

            @Render(new NotificationMessage { Message = settings.ErrorMessage })
        </div>
        
    </div>
}
@using Dynamicweb.Rapido.Blocks.Components.General

@* Component *@

@helper RenderSearch(Search settings)
{
    var searchValue = HttpContext.Current.Request.QueryString.Get(settings.SearchParameter) ?? "";
    var groupValue = HttpContext.Current.Request.QueryString.Get(settings.GroupsParameter) ?? "";

    if (string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    var resultAttributes = new Dictionary<string, string>();

    if (settings.PageSize != 0)
    {
        resultAttributes.Add("data-page-size", settings.PageSize.ToString());
    }
    if (!string.IsNullOrEmpty(settings.GroupItemsFeedUrl))
    {
        resultAttributes.Add("data-groups-feed-url", settings.GroupItemsFeedUrl);
        if (!string.IsNullOrEmpty(groupValue))
        {
            resultAttributes.Add("data-selected-group", groupValue);
        }
        if (!string.IsNullOrEmpty(settings.GroupsParameter))
        {
            resultAttributes.Add("data-groups-parameter", settings.GroupsParameter);
        }
    }
    resultAttributes.Add("data-force-init", "true");
    if (settings.GoToFirstSearchResultOnEnter)
    {
        resultAttributes.Add("data-go-to-first-search-result-on-enter", settings.GoToFirstSearchResultOnEnter.ToString().ToLower());
    }
    if (!string.IsNullOrEmpty(settings.SearchParameter))
    {
        resultAttributes.Add("data-search-parameter", settings.SearchParameter);
    }
    resultAttributes.Add("data-search-feed-url", settings.SearchData.SearchFeedUrl);
    resultAttributes.Add("data-results-template-id", settings.SearchData.ResultsTemplateId);

    if (settings.SecondSearchData != null) 
    {
        resultAttributes.Add("data-second-search-feed-url", settings.SecondSearchData.SearchFeedUrl);
        resultAttributes.Add("data-second-results-template-id", settings.SecondSearchData.ResultsTemplateId);
    }
    if (!string.IsNullOrEmpty(settings.ResultsPageUrl)) 
    {
        resultAttributes.Add("data-results-page-url", settings.ResultsPageUrl);
    }

    resultAttributes = resultAttributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    string searchFieldCss = (settings.SearchButton == null) ? "search--with-icon" : "";

    <div class="search @settings.CssClass @searchFieldCss js-search-data-source dw-mod" id="@settings.Id" @ComponentMethods.AddAttributes(resultAttributes)>
        @if (!string.IsNullOrEmpty(settings.GroupItemsFeedUrl))
        {
            <button type="button" class="search__groups-btn dw-mod js-search-groups-btn">@Translate("All")</button>
            <ul class="dropdown dropdown--absolute-position dw-mod search__groups-results js-search-groups-list"></ul>
        }

        <input type="text" class="search__field dw-mod js-search-field" placeholder="@settings.Placeholder" value="@searchValue">
        
        <div class="dropdown dropdown--absolute-position search__results dw-mod js-search-results @(settings.SecondSearchData != null ? "search__results--combined" : "")">
            @if (settings.SecondSearchData != null)
            {
                <div class="search__column search__column--products dw-mod">
                    <div class="search__column-header dw-mod">@Translate("Products")</div>
                    <ul class="search__results-list dw-mod js-search-results-list" id="@(settings.Id)_ResultsList"></ul>
                    @if (!string.IsNullOrEmpty(settings.SearchData.ResultsPageUrl))
                    {
                        @Render(new Link {
                            Title = Translate("View all"),
                            CssClass = "js-view-all-button u-margin",
                            Href = settings.SearchData.ResultsPageUrl
                        });
                    }
                </div>
                <div class="search__column search__column--pages dw-mod">
                    <div class="search__column-header">@Translate("Pages")</div>
                    <ul class="search__results-list dw-mod js-search-results-second-list" id="@(settings.Id)_SecondResultsList"></ul>
                    @if (!string.IsNullOrEmpty(settings.SecondSearchData.ResultsPageUrl))
                    {
                        @Render(new Link
                        {
                            Title = Translate("View all"),
                            CssClass = "js-view-all-button u-margin",
                            Href = settings.SecondSearchData.ResultsPageUrl
                        });
                    }
                </div>
            }
            else
            {
                <div class="search__column search__column--only dw-mod">
                    <ul class="search__results-list dw-mod js-search-results-list" id="@(settings.Id)_ResultsList"></ul>
                    @if (!string.IsNullOrEmpty(settings.SearchData.ResultsPageUrl))
                    {
                        @Render(new Link {
                            Title = Translate("View all"),
                            CssClass = "js-view-all-button u-margin",
                            Href = settings.SearchData.ResultsPageUrl
                        });
                    }
                </div>
            }
        </div>

        @if (settings.SearchButton != null)
        {
            settings.SearchButton.CssClass += " search__btn js-search-btn";
            if (settings.RenderDefaultSearchIcon)
            {
                settings.SearchButton.Icon = new Icon { Name = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("SearchIcon").SelectedValue };
            }
            @Render(settings.SearchButton);
        }
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderSelectField(SelectField settings)
{
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id))
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    <div class="form__field-group u-full-width @settings.WrapperCssClass dw-mod">
        @if (!string.IsNullOrEmpty(settings.Label) || settings.Link != null )
        {
            <div class="u-full-width"> 
                @if (!string.IsNullOrEmpty(settings.Label)) { <label for="@settings.Id" class="u-pull--left">@settings.Label</label> }
                @if (settings.Link != null) {
                    <div class="u-pull--right">
                        @{ settings.Link.ButtonLayout = ButtonLayout.LinkClean; }
                        @Render(settings.Link)
                    </div>
                }
            </div> 
        }

        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @if (settings.ActionButton != null)
        {
            settings.ActionButton.CssClass += " btn--condensed u-no-margin";
            <div class="form__field-combi u-no-margin dw-mod">
                @RenderSelectBase(settings)
                @Render(settings.ActionButton)
            </div>
        }
        else
        {
            @RenderSelectBase(settings)
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}

@helper RenderSelectBase(SelectField settings)
{
    var attributes = new Dictionary<string, string>();

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <select @ComponentMethods.AddAttributes(resultAttributes) class="u-full-width @settings.CssClass dw-mod">
        @if (settings.Default != null)
        {
            @Render(settings.Default)
        }

        @foreach (var item in settings.Options)
        {
            if (settings.Value != null) {
                item.Checked = item.Value == settings.Value;
            }
            @Render(item)
        }
    </select>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@* Component *@

@helper RenderRadioButtonField(RadioButtonField settings)
{
    var attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Label) && string.IsNullOrEmpty(settings.Id)) 
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/
    
    attributes.Add("type", "radio");
    if (settings.Checked) { attributes.Add("checked", "true"); }
    settings.CssClass = "form__control " + settings.CssClass;
    if (settings.Value != null) { attributes.Add("value", settings.Value); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <div class="form__field-group @settings.WrapperCssClass dw-mod">
        <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            <label for="@settings.Id" class="dw-mod">@settings.Label</label>
        }
        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }
        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderRadioButtonListField(RadioButtonListField settings)
{
    if (settings.Required && !String.IsNullOrEmpty(settings.Label)) { settings.Label += " <span class=\"required dw-mod\">*</span>"; }

    <div class="form__field-group @settings.WrapperCssClass u-margin-bottom dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            <label>@settings.Label</label>
        }
        @if (!string.IsNullOrEmpty(settings.HelpText))
        {
            <small class="form__help-text">@settings.HelpText</small>
        }

        @foreach (var item in settings.Options)
        {
            if (settings.Required)
            {
                item.Required = true;
            }
            if (settings.Disabled)
            {
                item.Disabled = true;
            }
            if (!string.IsNullOrEmpty(settings.Name))
            {
                item.Name = settings.Name;
            }
            if (settings.Value != null && settings.Value == item.Value)
            {
                item.Checked = true;
            }
            if (!string.IsNullOrEmpty(settings.OnClick))
            {
                item.OnClick += settings.OnClick;
            }
            if (!string.IsNullOrEmpty(settings.OnChange))
            {
                item.OnChange += settings.OnChange;
            }
            if (!string.IsNullOrEmpty(settings.CssClass))
            {
                item.CssClass += settings.CssClass;
            }
            @Render(item)
        }

        @Render(new NotificationMessage { Message = settings.ErrorMessage })
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderNotificationMessage(NotificationMessage settings)
{
    if (!string.IsNullOrEmpty(settings.Message))
    {
        var attributes = new Dictionary<string, string>();
        if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }

        string messageTypeClass = Enum.GetName(typeof(NotificationMessageType), settings.MessageType).ToLower();
        string messageLayoutClass = Enum.GetName(typeof(NotificationMessageLayout), settings.MessageLayout).ToLower();
        string minHeightClass = settings.Icon != null ? "u-min-h70px" : "";

        <div class="notification-message-@messageTypeClass notification-message-@messageLayoutClass @messageLayoutClass @minHeightClass @settings.CssClass u-full-width  dw-mod" @ComponentMethods.AddAttributes(attributes)>
            @if (settings.Icon != null) {
                settings.Icon.Label = !string.IsNullOrEmpty(settings.Icon.Label) ? settings.Message + settings.Icon.Label : settings.Message;
                @Render(settings.Icon)
            } else {
                @settings.Message
            }
        </div>
    }
}
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component *@

@helper RenderHandlebarsRoot(HandlebarsRoot settings) {
    string preRender = !String.IsNullOrEmpty(settings.PreRenderScriptTemplate) ? "data-pre-render-template=\"" + settings.PreRenderScriptTemplate + "\"" : "";

    <div class="@settings.CssClass dw-mod js-handlebars-root" id="@settings.Id" data-template="@settings.ScriptTemplate" data-json-feed="@settings.FeedUrl" data-init-onload="@settings.InitOnLoad.ToString()" data-preloader="@settings.Preloader" @preRender>
        @if (settings.SubBlocks != null) {
            @RenderBlockList(settings.SubBlocks)
        }
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using System.Text.RegularExpressions


@* Component *@

@helper RenderSticker(Sticker settings) {
    if (!String.IsNullOrEmpty(settings.Title)) {
        string size = settings.Size.ToString() != "None" ? "" + "stickers-container__tag--" + settings.Size.ToString().ToLower() : "";
        string style = settings.Style.ToString() != "None" ? "" + "stickers-container__tag--" + settings.Style.ToString().ToLower() : "";

        Dictionary<String, String> optionalAttributes = new Dictionary<string, string>();
        if (!String.IsNullOrEmpty(settings.Color) || !String.IsNullOrEmpty(settings.BackgroundColor)) {
            string styleTag = !String.IsNullOrEmpty(settings.Color) ? "color: " + settings.Color + "; " : "";
            styleTag += !String.IsNullOrEmpty(settings.BackgroundColor) ? "background-color: " + settings.BackgroundColor + "; " : "";
            optionalAttributes.Add("style", styleTag);
        }

        <div class="stickers-container__tag @size @style @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>@settings.Title</div>   
    }
}

@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderStickersCollection(StickersCollection settings)
{
    if (settings.Stickers.Count > 0) 
    {
        string position = "stickers-container--" + Regex.Replace(settings.Position.ToString(), "([a-z])([A-Z])", "$1-$2").ToLower();

        <div class="stickers-container @position @settings.CssClass dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
            @foreach (Sticker sticker in settings.Stickers)
            {
                @Render(sticker)
            }
        </div> 
    }
}

@using Dynamicweb.Rapido.Blocks.Components.General


@* Component *@

@helper RenderForm(Form settings) {
    if (settings != null)
    {
        Dictionary<string, string> optionalAttributes = new Dictionary<string, string>();
        if (!string.IsNullOrEmpty(settings.Action)) { optionalAttributes.Add("action", settings.Action); };
        if (!string.IsNullOrEmpty(settings.Name)) { optionalAttributes.Add("name", settings.Name); };
        if (!string.IsNullOrEmpty(settings.OnSubmit)) { optionalAttributes.Add("onsubmit", settings.OnSubmit); };
        var enctypes = new Dictionary<string, string>
        {
            { "multipart", "multipart/form-data" },
            { "text", "text/plain" },
            { "application", "application/x-www-form-urlencoded" }
        };
        if (settings.Enctype != FormEnctype.none) { optionalAttributes.Add("enctype", enctypes[Enum.GetName(typeof(FormEnctype), settings.Enctype).ToLower()]); };
        optionalAttributes.Add("method", settings.Method.ToString());

        if (!string.IsNullOrEmpty(settings.FormStartMarkup))
        {
            @settings.FormStartMarkup
        }
        else
        {
            @:<form class="@settings.CssClass u-no-margin dw-mod" @ComponentMethods.AddAttributes(optionalAttributes) @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        }

        foreach (var field in settings.GetFields())
        {
            @Render(field)
        }

        @:</form>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderText(Text settings)
{
    @settings.Content 
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderContentModule(ContentModule settings) {
    if (!string.IsNullOrEmpty(settings.Content))
    {
        @settings.Content 
    } 
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components


@* Component *@

@helper RenderModal(Modal settings) {
    if (settings != null)
    {
        string modalId = !string.IsNullOrEmpty(settings.Id) ? settings.Id : Guid.NewGuid().ToString("N");

        string onchange = !string.IsNullOrEmpty(settings.OnClose) ? "onchange=\"if(!this.checked){" + settings.OnClose + "}\"" : "";

        <input type="checkbox" id="@(modalId)ModalTrigger" class="modal-trigger" @onchange />

        <div class="modal-container">
            @if (!settings.DisableDarkOverlay)
            {
                <label for="@(modalId)ModalTrigger" id="@(modalId)ModalOverlay" class="modal-overlay"></label>
            }
            <div class="modal modal--@settings.Width.ToString().ToLower() modal-height--@settings.Height.ToString().ToLower()" id="@(modalId)Modal">
                @if (settings.Heading != null)
                {
                    if (!string.IsNullOrEmpty(settings.Heading.Title))
                    {
                        <div class="modal__header">
                            @Render(settings.Heading)
                        </div>
                    }
                }
                <div class="modal__body @(settings.Width.ToString().ToLower() == "full" ? "modal__body--full" : "")">
                    @if (!string.IsNullOrEmpty(settings.BodyText))
                    {
                        @settings.BodyText
                    }
                    @if (settings.BodyTemplate != null)
                    {
                        @settings.BodyTemplate
                    }
                    @{
                        var actions = settings.GetActions();
                    }
                </div>
                @if (actions.Length > 0)
                {
                    <div class="modal__footer">
                        @foreach (var action in actions)
                        {
                            if (Pageview.Device.ToString() != "Mobile") {
                                action.CssClass += " u-no-margin";
                            } else {
                                action.CssClass += " u-full-width u-margin-bottom";
                            }

                            @Render(action)
                        }
                    </div>
                }
                <label class="modal__close-btn" for="@(modalId)ModalTrigger"></label>
            </div>
        </div>
    } 
}
@using Dynamicweb.Rapido.Blocks.Components.General

@* Component *@

@helper RenderMediaListItem(MediaListItem settings)
{
    <div class="media-list-item @settings.CssClass dw-mod" @(!string.IsNullOrEmpty(settings.Id) ? "id=\"" + settings.Id + "\"" : "")>
        @if (!string.IsNullOrEmpty(settings.Label))
        {
            if (!string.IsNullOrEmpty(settings.Link))
            {
                @Render(new Link
                {
                    Href = settings.Link,
                    CssClass = "media-list-item__sticker dw-mod",
                    ButtonLayout = ButtonLayout.None,
                    Title = settings.Label,
                    OnClick = !string.IsNullOrEmpty(settings.OnClick) ? settings.OnClick : ""
                })
            }
            else if (!string.IsNullOrEmpty(settings.OnClick))
            {
                <span class="media-list-item__sticker dw-mod" onclick="@(settings.OnClick)">
                    <span class="u-uppercase">@settings.Label</span>
                </span>
            }
            else
            {
                <span class="media-list-item__sticker media-list-item__sticker--no-link dw-mod">
                    <span class="u-uppercase">@settings.Label</span>
                </span>
            }
        }
        <div class="media-list-item__wrap">
            <div class="media-list-item__info dw-mod">
                <div class="media-list-item__header dw-mod">
                    @if (!string.IsNullOrEmpty(settings.Title))
                    {
                        if (!string.IsNullOrEmpty(settings.Link))
                        {
                            @Render(new Link
                            {
                                Href = settings.Link,
                                CssClass = "media-list-item__name dw-mod",
                                ButtonLayout = ButtonLayout.None,
                                Title = settings.Title,
                                OnClick = !string.IsNullOrEmpty(settings.OnClick) ? settings.OnClick : ""
                            })
                        }
                        else if (!string.IsNullOrEmpty(settings.OnClick))
                        {
                            <span class="media-list-item__name dw-mod" onclick="@(settings.OnClick)">@settings.Title</span>
                        }
                        else
                        {
                            <span class="media-list-item__name media-list-item__name--no-link dw-mod">@settings.Title</span>
                        }
                    }

                    @if (!string.IsNullOrEmpty(settings.Status))
                    {
                        <div class="media-list-item__state dw-mod">@settings.Status</div>
                    }
                </div>
                @{
                    settings.InfoTable.CssClass += " media-list-item__parameters-table";
                }
            
                @Render(settings.InfoTable)
            </div>
            <div class="media-list-item__actions dw-mod">
                <div class="media-list-item__actions-list dw-mod">
                    @{
                        var actions = settings.GetActions();

                        foreach (ButtonBase action in actions)
                        {
                            action.ButtonLayout = ButtonLayout.None;
                            action.CssClass += " media-list-item__action link";

                            @Render(action)
                        }
                    }
                </div>

                @if (settings.SelectButton != null && !string.IsNullOrEmpty(settings.SelectButton.Title))
                {
                    settings.SelectButton.CssClass += " u-no-margin";

                    <div class="media-list-item__action-button">
                        @Render(settings.SelectButton)
                    </div>
                }
            </div>
        </div>
    </div>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderTable(Table settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    
    var enumToClasses = new Dictionary<TableDesign, string> 
    {
        { TableDesign.Clean, "table--clean" },
        { TableDesign.Bordered, "table--bordered" },
        { TableDesign.Striped, "table--striped" },
        { TableDesign.Hover, "table--hover" },
        { TableDesign.Compact, "table--compact" },
        { TableDesign.Condensed, "table--condensed" },
        { TableDesign.NoTopBorder, "table--no-top-border" }
    };
    string tableDesignClass = "";
    if (settings.Design != TableDesign.None) 
    {
        tableDesignClass = enumToClasses[settings.Design];
    }

    if (!string.IsNullOrEmpty(settings.CssClass) || settings.Design != TableDesign.None) { attributes.Add("class", "table " + tableDesignClass + " " + settings.CssClass + " dw-mod"); }
    
    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary(d => d.Key, d => d.Last().Value);

    <table @ComponentMethods.AddAttributes(resultAttributes)>
        @if (settings.Header != null)
        {
            <thead>
                @Render(settings.Header)
            </thead>
        }
        <tbody>
            @foreach (var row in settings.Rows)
            {
                @Render(row)
            }
        </tbody>
        @if (settings.Footer != null)
        {
            <tfoot>
                @Render(settings.Footer)
            </tfoot>
        }
    </table>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components

@helper RenderTableRow(TableRow settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    
    var enumToClasses = new Dictionary<TableRowDesign, string> 
    {
        { TableRowDesign.NoBorder, "table__row--no-border" },
        { TableRowDesign.Border, "table__row--border" },
        { TableRowDesign.TopBorder, "table__row--top-line" },
        { TableRowDesign.BottomBorder, "table__row--bottom-line" },
        { TableRowDesign.Solid, "table__row--solid" }
    };

    string tableRowDesignClass = "";
    if (settings.Design != TableRowDesign.None) 
    {
        tableRowDesignClass = enumToClasses[settings.Design];
    }

    if (!string.IsNullOrEmpty(settings.CssClass) || settings.Design != TableRowDesign.None) { attributes.Add("class", "table__row " + tableRowDesignClass + " " + settings.CssClass + " dw-mod"); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary(d => d.Key, d => d.Last().Value);

    <tr @ComponentMethods.AddAttributes(resultAttributes)>
        @foreach (var cell in settings.Cells)
        {
            if (settings.IsHeaderRow)
            {
                cell.IsHeader = true;
            }
            @Render(cell)
        }
    </tr>
}
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Core

@helper RenderTableCell(TableCell settings)
{
    Dictionary<string, string> attributes = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (settings.Colspan != 0) { attributes.Add("colspan", Converter.ToString(settings.Colspan)); }
    if (settings.Rowspan != 0) { attributes.Add("rowspan", Converter.ToString(settings.Rowspan)); }
    if (!string.IsNullOrEmpty(settings.CssClass)) { attributes.Add("class", settings.CssClass + " dw-mod"); }

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary(d => d.Key, d => d.Last().Value);

    string tagName = settings.IsHeader ? "th" : "td";

    @("<" + tagName + " " + ComponentMethods.AddAttributes(resultAttributes) + ">")
        @settings.Content
    @("</" + tagName + ">");
}
@using System.Linq
@using Dynamicweb.Rapido.Blocks.Components.General

@* Component *@

@helper RenderPagination(Dynamicweb.Rapido.Blocks.Components.General.Pagination settings)
{
    var pageNumberQueryStringName = Dynamicweb.Rapido.Services.Pagination.GetPageNumberQueryStringName(settings);    // Get the proper 'page number' query string parameter
    var queryParameters = Dynamicweb.Rapido.Services.Url.GetQueryParameters(pageNumberQueryStringName);              // Get the NameValueCollection from the querystring

    if (settings.NumberOfPages > 1)
    {
        string url = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority) + "/Default.aspx";
        string ariaLabel = !string.IsNullOrWhiteSpace(settings.AriaLabel) ? settings.AriaLabel : Translate("Page navigation");
        Dictionary<string, int> startAndEndPageNumber = Dynamicweb.Rapido.Services.Pagination.GetStartAndEndPageNumber(settings);

        <div class="pager u-margin-top dw-mod @settings.CssClass" aria-label="@ariaLabel">
            @if (settings.ShowPagingInfo)
            {
                <div class="pager__info dw-mod">
                    @Translate("Page") @settings.CurrentPageNumber @Translate("of") @settings.NumberOfPages
                </div>
            }
            <ul class="pager__list dw-mod">
                @if (!string.IsNullOrWhiteSpace(settings.FirstPageUrl) && settings.ShowFirstAndLastControls)
                {
                    @Render(new PaginationItem { Link = settings.FirstPageUrl, Icon = settings.FirstIcon })
                }
                @if (!string.IsNullOrWhiteSpace(settings.PreviousPageUrl) && settings.ShowNextAndPrevControls)
                {
                    @Render(new PaginationItem { Link = settings.PreviousPageUrl, Icon = settings.PrevIcon })
                }
                @if (settings.GetPages().Any())
                {
                    foreach (var page in settings.GetPages())
                    {
                        @Render(page)
                    }
                }
                else
                {
                    for (var page = startAndEndPageNumber["StartPage"]; page <= startAndEndPageNumber["EndPage"]; page++)
                    {
                        queryParameters = Dynamicweb.Rapido.Services.Url.UpdateQueryStringParameter(queryParameters, pageNumberQueryStringName, page.ToString());
                        @Render(new PaginationItem { Label = page.ToString(), Link = Dynamicweb.Rapido.Services.Url.BuildUri(url, queryParameters).PathAndQuery, IsActive = (settings.CurrentPageNumber == page) });
                    }
                }
                @if (!string.IsNullOrWhiteSpace(settings.NextPageUrl) && settings.ShowNextAndPrevControls)
                {
                    @Render(new PaginationItem { Link = settings.NextPageUrl, Icon = settings.NextIcon })
                }
                @if (!string.IsNullOrWhiteSpace(settings.LastPageUrl) && settings.ShowFirstAndLastControls)
                {
                    @Render(new PaginationItem { Link = settings.LastPageUrl, Icon = settings.LastIcon })
                }
            </ul>
        </div>
    }
}

@helper RenderPaginationItem(PaginationItem settings)
{
    if (settings.Icon == null)
    {
        settings.Icon = new Icon();
    }

    settings.Icon.Label = settings.Label;
    <li class="pager__btn dw-mod">
        @if (settings.IsActive)
        {
            <span class="pager__num pager__num--current dw-mod">
                @Render(settings.Icon)
            </span>
        }
        else
        {
            <a href="@settings.Link" class="pager__num dw-mod">
                @Render(settings.Icon)
            </a>
        }
    </li>
}


@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce


@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks
@using System.IO


@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce


@* Component *@

@helper RenderVariantMatrix(VariantMatrix settings) {
    if (settings != null)
    {
        int productLoopCounter = 0;
        int groupCount = 0;
        List<VariantOption> firstDimension = new List<VariantOption>();
        List<VariantOption> secondDimension = new List<VariantOption>();
        List<VariantOption> thirdDimension = new List<VariantOption>();

        foreach (VariantGroup variantGroup in settings.GetVariantGroups())
        {
            foreach (VariantOption variantOptions in variantGroup.GetVariantOptions())
            {
                if (groupCount == 0) {
                    firstDimension.Add(variantOptions);
                }
                if (groupCount == 1)
                {
                    secondDimension.Add(variantOptions);
                }
                if (groupCount == 2)
                {
                    thirdDimension.Add(variantOptions);
                }
            }
            groupCount++;
        }

        int rowCount = 0;
        int columnCount = 0;

        <script>
            var variantsCollection = [];
        </script>

        <table class="table table--compact js-variants-matrix dw-mod" id="VariantMatrixTable_@settings.ProductId">
            @if (groupCount == 1)
            {
                <tbody>
                    @foreach (VariantOption firstVariantOption in firstDimension)
                    {
                        var variantId = firstVariantOption.Id;
                        <tr>
                            <td class="u-bold">
                                @firstVariantOption.Name
                            </td>
                            <td>
                                @RenderVariantMatrixQuantityField(variantId, settings, productLoopCounter, rowCount, columnCount)
                            </td>
                        </tr>
                        productLoopCounter++;
                    }

                    <tr>
                        <td>&nbsp;</td>
                        <td>
                            <div class="qty-field js-total-qty-column-@columnCount dw-mod">0</div>
                        </td>
                    </tr>
                </tbody>
            }
            @if (groupCount == 2)
            {
                <thead>
                    <tr>
                        <td>&nbsp;</td>
                        @foreach (VariantOption variant in secondDimension)
                        {
                            <td>@variant.Name</td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (VariantOption firstVariantOption in firstDimension)
                    {
                        string variantId = "";
                        columnCount = 0;

                        <tr>
                            <td class="u-min-w120px">@firstVariantOption.Name</td>

                            @foreach (VariantOption secondVariantOption in secondDimension)
                            {
                                variantId = firstVariantOption.Id + "." + secondVariantOption.Id;
                                <td>
                                    @RenderVariantMatrixQuantityField(variantId, settings, productLoopCounter, rowCount, columnCount)
                                </td>

                                columnCount++;

                                productLoopCounter++;
                            }

                            <td>
                                <div class="qty-field js-total-qty-row-@rowCount dw-mod">0</div>
                            </td>
                        </tr>

                        rowCount++;
                    }

                    @{
                        columnCount = 0;
                    }

                    <tr>
                        <td>&nbsp;</td>
                        @foreach (VariantOption secondVariantOption in secondDimension)
                        {
                            <td>
                                <div class="qty-field js-total-qty-column-@columnCount dw-mod">0</div>
                            </td>

                            columnCount++;
                        }
                        <td>&nbsp;</td>
                    </tr>
                </tbody>
            }
            @if (groupCount == 3)
            {
                <thead>
                    <tr>
                        <td>&nbsp;</td>
                        @foreach (VariantOption thirdVariantOption in thirdDimension)
                        {
                            <td>@thirdVariantOption.Name</td>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (VariantOption firstVariantOption in firstDimension)
                    {
                        int colspan = (thirdDimension.Count + 1);

                        <tr>
                            <td colspan="@colspan" class="u-color-light-gray--bg u-bold">@firstVariantOption.Name</td>
                        </tr>

                        foreach (VariantOption secondVariantOption in secondDimension)
                        {
                            string variantId = "";
                            columnCount = 0;

                            <tr>
                                <td class="u-min-w120px">@secondVariantOption.Name</td>

                                @foreach (VariantOption thirdVariantOption in thirdDimension)
                                {
                                    variantId = firstVariantOption.Id + "." + secondVariantOption.Id + "." + thirdVariantOption.Id;

                                    <td>
                                        @RenderVariantMatrixQuantityField(variantId, settings, productLoopCounter, rowCount, columnCount)
                                    </td>

                                    columnCount++;
                                    productLoopCounter++;
                                }

                                <td>
                                    <div class="qty-field js-total-qty-row-@rowCount dw-mod">0</div>
                                </td>
                            </tr>
                            rowCount++;
                        }
                    }

                    @{
                        columnCount = 0;
                    }

                    <tr>
                        <td>&nbsp;</td>
                        @foreach (VariantOption thirdVariantOption in thirdDimension)
                        {
                            <td>
                                <div class="qty-field js-total-qty-column-@columnCount dw-mod">0</div>
                            </td>

                            columnCount++;
                        }
                        <td>&nbsp;</td>
                    </tr>
                </tbody>
            }
        </table>

        <script>
            document.addEventListener("DOMContentLoaded", function (event) {
                MatrixUpdateQuantity("@settings.ProductId");
            });

            MatrixUpdateQuantity = function (productId) {
                var currentMatrix = document.getElementById("VariantMatrixTable_" + productId);
                var allQtyFields = currentMatrix.getElementsByClassName("js-qty");

                var qtyRowArr = [];
                var qtyColumnArr = [];

                var totalQty = 0;

                for (var i = 0; i < allQtyFields.length; i++) {
                    qtyRowArr[allQtyFields[i].getAttribute("data-qty-row-group")] = 0;
                    qtyColumnArr[allQtyFields[i].getAttribute("data-qty-column-group")] = 0;
                }

                for (var i = 0; i < allQtyFields.length; i++) {
                    qtyRowArr[allQtyFields[i].getAttribute("data-qty-row-group")] += parseFloat(allQtyFields[i].value);
                    qtyColumnArr[allQtyFields[i].getAttribute("data-qty-column-group")] += parseFloat(allQtyFields[i].value);
                    totalQty += parseFloat(allQtyFields[i].value);
                }

                //Update row counters
                for (var i = 0; i < qtyRowArr.length; i++) {
                    var qtyCounter = currentMatrix.getElementsByClassName("js-total-qty-row-" + i)[0];

                    if (qtyRowArr[i] != undefined && qtyCounter != null) {
                        var currentCount = qtyCounter.innerHTML;
                        qtyCounter.innerHTML = qtyRowArr[i];

                        if (currentCount != qtyCounter.innerHTML) {
                            qtyCounter.classList.add("qty-field--active");
                        }
                    }
        
                }

                //Update column counters
                for (var i = 0; i < qtyColumnArr.length; i++) {
                    var qtyCounter = currentMatrix.getElementsByClassName("js-total-qty-column-" + i)[0];

                    if (qtyColumnArr[i] != undefined && qtyCounter != null) {
                        var currentCount = qtyCounter.innerHTML;
                        qtyCounter.innerHTML = qtyColumnArr[i];

                        if (currentCount != qtyCounter.innerHTML) {
                            qtyCounter.classList.add("qty-field--active");
                        }
                    }
                }

                if (document.getElementById("TotalQtyCount_" + productId)) {
                    document.getElementById("TotalQtyCount_" + productId).innerHTML = totalQty;
                }

                //Clean up animations
                setTimeout(function () {
                    for (var i = 0; i < qtyRowArr.length; i++) {
                        var qtyCounter = currentMatrix.getElementsByClassName("js-total-qty-row-" + i)[0];
                        if (qtyCounter != null) {
                            qtyCounter.classList.remove("qty-field--active");
                        }
                    }
                    for (var i = 0; i < qtyColumnArr.length; i++) {
                        var qtyCounter = currentMatrix.getElementsByClassName("js-total-qty-column-" + i)[0];
                        if (qtyCounter != null) {
                            qtyCounter.classList.remove("qty-field--active");
                        }
                    }
                }, 1000);
            }
        </script>
    }
}

@helper RenderVariantMatrixQuantityField(string variantId, VariantMatrix settings, int productLoopCounter, int rowCount, int columnCount)
{
    string loopCount = productLoopCounter.ToString();

    bool combinationFound = false;
    double stock = 0;
    double quantityValue = 0;
    string note = "";

    VariantProduct variantProduct = null;

    if (settings.GetVariantProducts().TryGetValue(variantId, out variantProduct))
    {
        stock = variantProduct.Stock;
        quantityValue = variantProduct.Quantity;
        combinationFound = true;
    }

    if (combinationFound)
    {
        <input type="hidden" name="ProductLoopCounter@(loopCount)" value="@loopCount" />
        <input type="hidden" name="ProductID@(loopCount)" value="@settings.ProductId" />
        <input type="hidden" name="VariantID@(loopCount)" value="@variantId" />
        <input type="hidden" name="CurrentNote@(loopCount)" id="CurrentNote_@(settings.ProductId)_@variantId" value="@note" />
        <input type="number" name="Quantity@(loopCount)" id="Quantity_@(settings.ProductId)_@variantId" value="@quantityValue" min="0" class="js-qty u-no-margin u-full-max-width" style="width: 100%; max-width: 100%" onkeyup="MatrixUpdateQuantity('@settings.ProductId')" onmouseup="MatrixUpdateQuantity('@settings.ProductId')" data-qty-row-group="@rowCount" data-qty-column-group="@columnCount">

        if (stock != 0)
        {
            <small>@Translate("Stock") @stock</small>
        }

        <script>
            var variants = '{ "ProductId" :' + '"@settings.ProductId"' + ', "VariantId": ' + '"@variantId"' +'}';
            variantsCollection.push(variants);
            document.getElementById("Quantity_@(settings.ProductId)_@variantId").closest(".js-variants-matrix").setAttribute("data-variants-collection", "[" + variantsCollection + "]" );
        </script>
    }
    else
    {
        <div class="use-btn-height" style="background-color: #a8a8a8"></div>
    }
}
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce

@* Component *@

@helper RenderAddToCart(AddToCart settings)
{
    //set Id for quantity selector to get it's value from button
    if (settings.QuantitySelector != null) 
    {
        if (string.IsNullOrEmpty(settings.QuantitySelector.Id)) 
        {
            settings.QuantitySelector.Id = Guid.NewGuid().ToString("N");
        }

        settings.AddButton.QuantitySelectorId = settings.QuantitySelector.Id;
        
        if (settings.Disabled) 
        {
            settings.QuantitySelector.Disabled = true;
        }

        if (string.IsNullOrEmpty(settings.QuantitySelector.Name)) 
        {
            settings.QuantitySelector.Name = settings.QuantitySelector.Id;
        }
    }

    if (settings.Disabled) 
    {
        settings.AddButton.Disabled = true;
    }
    
    settings.AddButton.CssClass += " btn--condensed";

    //unitsSelector
    if (settings.UnitSelector != null)
    {
        if (settings.Disabled) 
        {
            settings.QuantitySelector.Disabled = true;
        }
    }

    <div class="buttons-collection @settings.WrapperCssClass" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>        
        @if (settings.UnitSelector != null)
        {
            @Render(settings.UnitSelector)
        }
        @if (settings.QuantitySelector != null)
        {
            @Render(settings.QuantitySelector)
        }
        @Render(settings.AddButton)
    </div>
}
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce

@* Component *@

@helper RenderAddToCartButton(AddToCartButton settings)
{
    if (!settings.HideTitle)
    {
        if (string.IsNullOrEmpty(settings.Title))
        {
            if (settings.BuyForPoints)
            {
                settings.Title = Translate("Buy with points");
            }
            else
            {
                settings.Title = Translate("Add to cart");
            }
        }
    }
    else
    {
        settings.Title = "";
    }

    if (settings.Icon == null)
    {
        settings.Icon = new Icon();
        settings.Icon.LabelPosition = Dynamicweb.Rapido.Blocks.Components.General.IconLabelPosition.After;
    }

    if (string.IsNullOrEmpty(settings.Icon.Name))
    {
        settings.Icon.Name = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetList("CartIcon").SelectedValue;
    }

    settings.OnClick = "Cart.AddToCart(event, { " +
        "id: '" + settings.ProductId + "'," +
        (!string.IsNullOrEmpty(settings.VariantId) ? "variantId: '" + settings.VariantId + "'," : "") +
        (!string.IsNullOrEmpty(settings.UnitId) ? "unitId: '" + "VO84" + "'," : "") + // settings.UnitId changed to "VO84"
                       " stockLocationId: '" + "{{stockLocationId}}" + "',"  +
        (settings.BuyForPoints ? "buyForPoints: true," : "") +
        (!string.IsNullOrEmpty(settings.ProductInfo) ? "productInfo: " + settings.ProductInfo + "," : "") +
        "quantity: " + (string.IsNullOrEmpty(settings.QuantitySelectorId) ? "1" : "parseFloat(document.getElementById('" + settings.QuantitySelectorId + "').value)") +
    "});" + settings.OnClick;
    
    @RenderButton(settings)
}
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce

@* Component *@

@helper RenderUnitSelector(UnitSelector settings)
{
    if (string.IsNullOrEmpty(settings.Id))
    {
        settings.Id = Guid.NewGuid().ToString("N");
    }
    var disabledClass = settings.Disabled ? "disabled" : "";

    <input type="checkbox" id="@settings.Id" class="dropdown-trigger" />
    <div class="dropdown unit-selector @settings.CssClass @disabledClass dw-mod" @ComponentMethods.AddAttributes(settings.ExtraAttributes)>
        <label class="dropdown__header dropdown__btn dropdown__btn--unit-selector dw-mod" for="@settings.Id">@settings.SelectedOption</label>
        <div class="dropdown__content dw-mod">
            @settings.OptionsContent
        </div>
        <label class="dropdown-trigger-off" for="@settings.Id"></label>
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce

@* Component *@

@helper RenderQuantitySelector(QuantitySelector settings)
{
    var attributes = new Dictionary<string, string>();

    /*base settings*/
    if (!string.IsNullOrEmpty(settings.Id)) { attributes.Add("id", settings.Id); }
    if (!string.IsNullOrEmpty(settings.OnClick)) { attributes.Add("onclick", settings.OnClick); }
    if (!string.IsNullOrEmpty(settings.OnChange)) { attributes.Add("onchange", settings.OnChange); }
    if (settings.Disabled) { attributes.Add("disabled", "true"); }
    if (settings.Required) { attributes.Add("required", "true"); }
    if (!string.IsNullOrEmpty(settings.Name)) { attributes.Add("name", settings.Name); }
    /*end*/

    if (!string.IsNullOrEmpty(settings.OnKeyUp)) { attributes.Add("onkeyup", settings.OnKeyUp); }
    if (!string.IsNullOrEmpty(settings.OnInput)) { attributes.Add("oninput", settings.OnInput); }
    if (!string.IsNullOrEmpty(settings.OnFocus)) { attributes.Add("onfocus", settings.OnFocus); }
    if (settings.ReadOnly) { attributes.Add("readonly", "true"); }
    if (settings.Max != null) { attributes.Add("max", settings.Max.ToString()); }
    if (settings.Min == null) { settings.Min = 1; }
    attributes.Add("min", settings.Min.ToString());
    if (settings.Step != null && !string.IsNullOrEmpty(settings.Step.ToString())) { attributes.Add("step", settings.Step.ToString()); }
    if (settings.Value == null) { settings.Value = 1; }
    attributes.Add("value", settings.Value.ToString());
    attributes.Add("type", "number");

    var resultAttributes = attributes.Concat(settings.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

    <input @ComponentMethods.AddAttributes(resultAttributes) class="@settings.CssClass dw-mod" />
}
@using Dynamicweb.Rapido.Blocks.Components

@using Dynamicweb.Frontend
@using Dynamicweb.Frontend.Devices
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce
@using Dynamicweb.Rapido.Blocks.Components.General
@using System.Collections.Generic;

@* Component *@

@helper RenderCustomerCenterList(CustomerCenterList settings)
{   
    bool isTouchDevice = Pageview.Device.ToString() == "Mobile" || Pageview.Device.ToString() == "Tablet" ? true : false;
    string hideActions = isTouchDevice ? "u-block" : "";

    <table class="table data-list dw-mod">
        @if (settings.GetHeaders().Length > 0) {
            <thead>
                <tr class="u-bold">
                    @foreach (CustomerCenterListHeaderItem header in settings.GetHeaders())
                    {
                        var attributes = new Dictionary<string, string>();
                        if (!string.IsNullOrEmpty(header.Id)) { attributes.Add("id", header.Id); }
                        if (!string.IsNullOrEmpty(header.CssClass)) { attributes.Add("class", header.CssClass); }
                        attributes.Add("align", header.Align.ToString());
                        attributes = attributes.Concat(header.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);

                        <td @ComponentMethods.AddAttributes(attributes)>@header.Title</td>
                    }
                </tr>
            </thead>
        }
        @foreach (CustomerCenterListItem listItem in settings.GetItems())
        {
            int columnCount = 0;
            int totalColumns = listItem.GetInfoItems().Length;
            string rowHasActions = listItem.GetActions().Length > 0 ? "data-list__item--has-actions" : "";
            listItem.Id = !string.IsNullOrEmpty(listItem.Id) ? listItem.Id : Guid.NewGuid().ToString("N");

            var attributes = new Dictionary<string, string>();
            if (!string.IsNullOrEmpty(listItem.Title)) { attributes.Add("title", listItem.Title); };

            attributes = attributes.Concat(listItem.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);
            <tbody class="data-list__item @rowHasActions @listItem.CssClass dw-mod" @ComponentMethods.AddAttributes(attributes)>
                <tr>
                    @if (!string.IsNullOrEmpty(listItem.Title) || !string.IsNullOrEmpty(listItem.Description)) {
                        string onClick = !string.IsNullOrEmpty(listItem.OnClick) ? "onclick=\"" + listItem.OnClick + "\"" : "";

                        <td rowspan="2" @onClick class="data-list__main-item dw-mod">
                            @if (!string.IsNullOrEmpty(listItem.Title)) {
                                <div class="u-bold">@listItem.Title</div>
                            }
                            @if (!string.IsNullOrEmpty(listItem.Description)) {
                                <div>@listItem.Description</div>
                            }
                        </td>
                    }

                    @foreach (CustomerCenterListInfoItem infoItem in listItem.GetInfoItems())
                    {
                        var infoAttributes = new Dictionary<string, string>();
                        if (!string.IsNullOrEmpty(infoItem.Id)) { infoAttributes.Add("id", infoItem.Id); };
                        if (!string.IsNullOrEmpty(infoItem.OnClick)) { infoAttributes.Add("onclick", infoItem.OnClick); };
                        infoAttributes.Add("align", infoItem.Align.ToString());
                    
                        infoAttributes = infoAttributes.Concat(infoItem.ExtraAttributes).GroupBy(d => d.Key).ToDictionary (d => d.Key, d => d.Last().Value);
                        string columnClick = columnCount < (totalColumns-1) && !string.IsNullOrEmpty(listItem.OnClick) ? "onclick=\"" + listItem.OnClick + "\"" : "";

                        <td @ComponentMethods.AddAttributes(infoAttributes) @columnClick class="data-list__info-item dw-mod">
                            @if (!string.IsNullOrEmpty(infoItem.Title)) {
                                <div>@infoItem.Title</div>
                            }
                            @if (!string.IsNullOrEmpty(infoItem.Subtitle)) {
                                <div><small>@infoItem.Subtitle</small></div>
                            }
                        </td>

                        columnCount++;
                    }
                </tr>
                <tr>
                    <td colspan="7" align="right" class="u-va-bottom u-no-border">
                        <div class="data-list__actions @hideActions dw-mod" id="ActionsMenu_@listItem.Id">
                            @foreach (ButtonBase action in listItem.GetActions())
                            {
                                action.ButtonLayout = ButtonLayout.LinkClean;
                                action.Icon.CssClass += " u-full-height";
                                action.CssClass += " data-list__action-button link";

                                @Render(action)   
                            }
                        </div>
                    </td>
                </tr>
            </tbody> 
        }
    </table>
}
@using Dynamicweb.Frontend
@using System.Reflection
@using Dynamicweb.Content.Items
@using System.Web.UI.HtmlControls
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.Articles

@* Components for the articles *@
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleBanner(dynamic settings) { 
    string filterClasses = "image-filter image-filter--darken";
    settings.Layout = ArticleHeaderLayout.Banner;

    if (settings.Image != null)
    {
        if (settings.Image.Path != null)
        {
            <section class="multiple-paragraphs-container u-color-light paragraph-container--full-width">
                <div class="background-image @filterClasses dw-mod">
                    <div class="background-image__wrapper @filterClasses dw-mod">
                        @{ 
                            settings.Image.CssClass += "background-image__cover dw-mod";
                        }
                        @Render(settings.Image)
                    </div>
                </div>
                <div class="center-container dw-mod">
                    <div class="grid">
                        <div class="grid__col-md-8 grid__col-xs-12 paragraph-container paragraph-container--height-lg">
                            <div class="u-left-middle">
                                <div>
                                    @if (!String.IsNullOrEmpty(settings.Heading))
                                    {
                                        <h1 class="article__header article__header--giant dw-mod" style="color: @settings.TextColor">@settings.Heading</h1>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Subheading))
                                    {
                                        <div class="article__leadtext dw-mod" style="color: @settings.TextColor">@settings.Subheading</div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                                    {
                                        <small class="article__post-info u-margin-bottom--lg dw-mod" style="color: @settings.TextColor">@settings.Author @settings.Date</small>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Link)) {
                                        <div class="grid__cell">
                                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        @if (settings.ExternalParagraphId != 0)
                        {
                            <div class="grid__col-md-4 grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-auto dw-mod">
                                <div class="u-color-light-gray--bg u-color-dark dw-mod">
                                    @RenderParagraphContent(settings.ExternalParagraphId)
                                </div>
                            </div> 
                        }
                        
                    </div>
                </div>
            </section>
            if (!String.IsNullOrEmpty(settings.Image.Caption)) {
                <div class="image-caption dw-mod">@settings.Image.Caption</div>
            }
        }
        else 
        {
            settings.Layout = ArticleHeaderLayout.Clean;
            @RenderArticleCleanHeader(settings);
        }
    }
    else
    {
        settings.Layout = ArticleHeaderLayout.Clean;
        @RenderArticleCleanHeader(settings);
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleHeader(ArticleHeader settings) {
    dynamic[] methodParameters = new dynamic[1]; 
    methodParameters[0] = settings; 
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleHeaderCustom");

    if (customMethod != null)
    {  
        @customMethod.Invoke(this, methodParameters).ToString();                                         
    } else {
        switch (settings.Layout)
        {
            case ArticleHeaderLayout.Clean:
                @RenderArticleCleanHeader(settings);
                break;
            case ArticleHeaderLayout.Split:
                @RenderArticleSplitHeader(settings);
                break;
            case ArticleHeaderLayout.Banner:
                @RenderArticleBannerHeader(settings);
                break;
            case ArticleHeaderLayout.Overlay:
                @RenderArticleOverlayHeader(settings);
                break;
            default:
                @RenderArticleCleanHeader(settings);
                break;
        }
    }
}

@helper RenderArticleCleanHeader(ArticleHeader settings) {
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleCleanHeaderCustom");

    if (customMethod != null)
    {
            @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        string contentColumns = settings.TextLayout != ArticleHeaderTextLayout.Full ? "8" : "12";

        <div class="grid grid--align-content-start grid--justify-start">
            <div class="grid__col-md-@contentColumns grid__col-sm-12 u-padding--lg dw-mod">
                @if (!String.IsNullOrEmpty(settings.Category) || !String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date) || settings.RatingOutOf != 0)
                {
                    <div class="u-border-bottom u-padding-bottom">
                        @if (!String.IsNullOrEmpty(settings.Category))
                        {
                            <div class="u-pull--left">
                                <div class="article__category dw-mod" style="color: @settings.CategoryColor">@settings.Category</div>
                            </div>
                        }
                        <div class="u-pull--right">
                            @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                            {
                                <small class="article__post-info dw-mod">@settings.Author @settings.Date</small>
                            }
                            @if (settings.RatingOutOf != 0)
                            {
                                @Render(new Rating { Score = settings.RatingScore, OutOf = settings.RatingOutOf })
                            }
                        </div>
                    </div>
                }

                <div class="grid__cell">
                   @if (!String.IsNullOrEmpty(settings.Heading))
                   {
                        <h1 class="article__header article__header--giant dw-mod">@settings.Heading</h1>
                   }
                    @if (settings.Image != null)
                    {
                        if (settings.Image.Path != null)
                        {
                            <div class="u-padding-bottom--lg">
                                @Render(settings.Image)
                            </div>
                        }
                    }
                    @if (!String.IsNullOrEmpty(settings.Subheading))
                    {
                        <div class="article__leadtext dw-mod">@settings.Subheading</div>
                    }
                    @if (!String.IsNullOrEmpty(settings.Link))
                    {
                        <div class="grid__cell">
                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                        </div>
                    }
                </div>
            </div>
            @if (settings.ExternalParagraphId != 0)
            {
                <div class="grid__col-md-4 grid__col-sm-12 u-padding--lg u-color-light-gray--bg dw-mod">
                    @RenderParagraphContent(settings.ExternalParagraphId)
                </div>
            }
        </div>
    }
}

@helper RenderArticleSplitHeader(ArticleHeader settings) { 
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleSplitHeaderCustom");

    if (customMethod != null)
    {
        @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        string headerColumnWidth = settings.ExternalParagraphId != 0 ? "4" : "6";
    
        if (settings.Image != null)
        {
            if (settings.Image.Path != null)
            {
                <section class="multiple-paragraphs-container paragraph-container--full-width">
                    <div class="grid">
                        <div class="grid__col-md-@headerColumnWidth grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-xl dw-mod">
                            <div class="u-left-middle u-padding--lg">
                                <div>
                                    @if (!String.IsNullOrEmpty(settings.Category))
                                    {
                                        <div class="article__category dw-mod" style="color: @settings.CategoryColor">@settings.Category</div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Heading))
                                    {
                                        <h1 class="article__header article__header--giant dw-mod">@settings.Heading</h1>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Subheading))
                                    {
                                        <div class="article__leadtext dw-mod">@settings.Subheading</div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                                    {
                                        <small class="article__post-info u-pull--left dw-mod">@settings.Author @settings.Date</small>
                                    }
                                    @if (settings.RatingOutOf != 0)
                                    {
                                        <div class="u-pull--right">
                                            @Render(new Rating { Score = settings.RatingScore, OutOf = settings.RatingOutOf })
                                        </div>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Link)) {
                                        <div class="u-full-width u-pull--left u-margin-top">
                                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="grid__col-md-@headerColumnWidth grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-auto dw-mod" style="background-image:url(/Admin/Public/GetImage.ashx?width=1800&amp;height=1100&amp;crop=0&amp;Compression=85&amp;DoNotUpscale=true&amp;image=@settings.Image.Path); background-position: center center; background-size: cover;"></div>
                        @if (settings.ExternalParagraphId != 0)
                        {
                            <div class="grid__col-md-4 grid__col-sm-12 grid__col-xs-12 paragraph-container paragraph-container--height-auto u-color-light-gray--bg dw-mod">
                                @RenderParagraphContent(settings.ExternalParagraphId)
                            </div> 
                        }
                    </div>
                </section>
            }
        }
        else
        {
            @RenderArticleCleanHeader(settings);
        } 
    }   
}

@helper RenderArticleOverlayHeader(ArticleHeader settings) {
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleOverlayHeaderCustom");

    if (customMethod != null)
    {
        @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        string contentColumns = settings.TextLayout != ArticleHeaderTextLayout.Full ? "8" : "12";
        string contentAlignment = settings.TextLayout == ArticleHeaderTextLayout.Center ? "grid--justify-center" : "";

        if (settings.Image != null)
        {
            if (settings.Image.Path != null)
            {
                if (settings.ExternalParagraphId == 0)
                {
                    <section class="multiple-paragraphs-container u-color-light paragraph-container--full-width">
                        <div class="background-image image-filter image-filter--darken dw-mod">
                            <div class="background-image__wrapper image-filter image-filter--darken dw-mod">
                                @{ 
                                    settings.Image.CssClass += "background-image__cover dw-mod";
                                }
                                @Render(settings.Image)
                            </div>
                        </div>
                        <div class="center-container dw-mod">
                            <div class="grid @contentAlignment">
                                <div class="grid__col-md-@contentColumns grid__col-xs-12 paragraph-container paragraph-container--height-xl dw-mod">
                                    @if (!string.IsNullOrEmpty(settings.Heading))
                                    {
                                        <h1 class="article__header article__header--giant u-padding-top--lg dw-mod" style="color: @settings.TextColor">@settings.Heading</h1>
                                    }
                                    @if (!String.IsNullOrEmpty(settings.Subheading))
                                    {
                                        <div class="article__leadtext dw-mod" style="color: @settings.TextColor">@settings.Subheading</div>
                                    }
                                    <div class="u-margin-top">
                                        @if (!String.IsNullOrEmpty(settings.Author) || !String.IsNullOrEmpty(settings.Date))
                                        {
                                            <small class="article__post-info u-pull--left dw-mod" style="color: @settings.TextColor">@settings.Author @settings.Date</small>
                                        }
                                        @if (settings.RatingOutOf != 0)
                                        {
                                            <div class="u-pull--right">
                                                @Render(new Rating { Score = settings.RatingScore, OutOf = settings.RatingOutOf })
                                            </div>
                                        }
                                    </div>
                                    @if (!String.IsNullOrEmpty(settings.Link))
                                    {
                                        <div class="grid__cell">
                                            @Render(new Link { Href = settings.Link, Title = settings.LinkText, ButtonLayout = settings.ButtonLayout })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </section>
                }
                else
                {
                    @RenderArticleBanner(settings);
                }
            }
        }
        else
        {
            @RenderArticleCleanHeader(settings);
        }
    }
}

@helper RenderArticleBannerHeader(dynamic settings) { 
    dynamic[] methodParameters = new dynamic[1];
    methodParameters[0] = settings;
    MethodInfo customMethod = this.GetType().GetMethod("RenderArticleBannerHeaderCustom");

    if (customMethod != null)
    {
        @customMethod.Invoke(this, methodParameters).ToString();
    }
    else
    {
        @RenderArticleBanner(settings);
    }
}
@using System.Reflection
@using System.Text.RegularExpressions;
@using Dynamicweb.Frontend
@using Dynamicweb.Content.Items
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleBodyRow(ArticleBodyRow settings)
{
    string position = settings.TopLayout == "overlay" ? "article__overlay-offset" : "";
    string contentAlignment = settings.TextLayout == "center" ? "grid--justify-center" : "";

    <div class="grid grid--align-content-start @contentAlignment @position dw-mod">
        @RenderBlockList(settings.SubBlocks)
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleImage(ArticleImage settings)
{
    if (settings.Image != null)
    {
        if (settings.Image.Path != null)
        {
            <div class="u-margin-bottom--lg">
                @Render(settings.Image)
            </div>
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleSubHeader(ArticleSubHeader settings)
{
    if (!String.IsNullOrEmpty(settings.Title))
    {
        <h2 class="article__header">@settings.Title</h2>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleText(ArticleText settings)
{
    if (!String.IsNullOrEmpty(settings.Text))
    {
        string greatTextClass = settings.EnableLargeText == true ? "article__paragraph--great-text" : "";

        <div class="article__paragraph @greatTextClass dw-mod">
            @settings.Text
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleQuote(ArticleQuote settings)
{
    string text = Regex.Replace(settings.Text, "<.*?>", String.Empty);

    <div class="grid u-padding-bottom--lg">
        @if (settings.Image != null)
        {
            if (settings.Image.Path != null) {
                <div class="grid__col-3">
                    <div class="grid__cell-img">
                        @{ 
                            settings.Image.Title = !String.IsNullOrEmpty(settings.Image.Title) ? settings.Image.Title : settings.Author;
                            settings.Image.CssClass += " article__image article__image--ball";
                            settings.Image.ImageDefault.Width = 200;
                            settings.Image.ImageDefault.Height = 200;
                        }
                        @Render(settings.Image)
                    </div>
                </div>
            }
        }
        <div class="grid__col-auto">
            @if (!String.IsNullOrEmpty(settings.Text))
            {
            <div class="article__quote dw-mod">
                <i class="fas fa-quote-right u-margin-bottom--lg"></i>
                @settings.Text
                <i class="fas fa-quote-right"></i>
            </div>
            }
            @if (!String.IsNullOrEmpty(settings.Author))
            {
            <div class="article__quote-author dw-mod">
                - @settings.Author
            </div>
            }
        </div>
    </div>
} 
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleInfoTable(ArticleInfoTable settings)
{
    <table class="table table--clean">
        @foreach (var row in settings.Rows)
        {
            string iconColor = row.IconColor != null ? row.IconColor : "u-brand-color-two";

            <tr>
                @if (!String.IsNullOrEmpty(row.Icon))
                {
                    <td class="u-w32px"><i class="@row.Icon fa-2x @row.IconColor"></i></td>
                }
                <td class="u-no-margin-on-p-elements">
                    <div class="u-bold">@row.Title</div>
                    @if (!String.IsNullOrEmpty(row.SubTitle))
                    {
                        if (row.Link == null)
                        {
                        <div>@row.SubTitle</div>
                        }
                        else
                        {
                        <a href="@row.Link" class="u-color-inherit">@row.SubTitle</a>
                        }
                    }
                </td>
            </tr>
        }
    </table>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleGalleryModal(ArticleGalleryModal settings)
{
    Modal galleryModal = new Modal
    {
        Id = "ParagraphGallery",
        Width = ModalWidth.Full,
        BodyTemplate = RenderArticleGalleryModalContent()
    };

    @Render(galleryModal)
}

@helper RenderArticleGalleryModalContent() {
    <div class="modal__image-min-size-wrapper">
        @Render(new Image {
            Id = "ParagraphGallery",
            Path = "#",
            CssClass = "modal--full__img",
            DisableLazyLoad = true,
            DisableImageEngine = true
        })
    </div>

    <div class="modal__images-counter" id="ParagraphGallery_counter"></div>

    @Render(new Button {
        Id = "ParagraphGallery_prev",
        ButtonType = ButtonType.Button,
        ButtonLayout = ButtonLayout.None,
        CssClass = "modal__prev-btn",
        Icon = new Icon { Prefix = "far", Name = "fa-angle-left", LabelPosition = IconLabelPosition.After },
        OnClick = "Gallery.prevImage('ParagraphGallery')"
    })

    @Render(new Button {
        Id = "ParagraphGallery_next",
        ButtonType = ButtonType.Button,
        ButtonLayout = ButtonLayout.None,
        CssClass = "modal__next-btn",
        Icon = new Icon { Prefix = "far", Name = "fa-angle-right", LabelPosition = IconLabelPosition.After },
        OnClick = "Gallery.nextImage('ParagraphGallery')"
    })
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleRelated(ArticleRelated settings)
{
    string cardClass = Pageview.Device.ToString() != "Tablet" ? "card u-color-light--bg u-full-height" : "";
    string cardFooterClass = Pageview.Device.ToString() != "Tablet" ? "card-footer u-color-light--bg" : "";

    <section class="multiple-paragraphs-container u-color-light-gray--bg paragraph-container--full-width">
        <div class="center-container dw-mod">
            <div class="grid u-padding">
                <div class="grid__col-md-12 grid__col-xs-12">
                    <h2 class="article__header u-no-margin u-margin-top">@settings.Title</h2>
                </div>
            </div>

            <div class="js-handlebars-root u-padding" id="@settings.Title.Replace("  ", String.Empty)" data-template="RelatedSimpleTemplate" data-json-feed="/Default.aspx?ID=@settings.FeedPageId&@settings.Query&ExcludeItemID=@settings.CurrentPageId&PageSize=@settings.PageSize"></div>

            <script id="RelatedSimpleTemplate" type="text/x-template">
                {{#.}}
                <div class="grid u-padding-bottom--lg">
                    {{#Cases}}
                    <div class="grid__col-lg-3 grid__col-sm-6 image-hover--zoom dw-mod">
                        <a href="{{link}}" class="u-full-height u-color-light--bg u-flex u-flex--column">
                            {{#if image}}
                            <div class="u-color-light--bg u-no-padding dw-mod">
                                <div class="flex-img image-hover__wrapper">
                                    <img class="b-lazy" src="/Files/Images/placeholder.gif" data-src="/Admin/Public/GetImage.ashx?width=680&height=314&amp;crop=1&amp;DoNotUpscale=True&amp;Compression=75&amp;image={{image}}" alt="{{title}}" />
                                </div>
                            </div>
                            {{/if}}

                            <div class="card u-color-light--bg u-full-height dw-mod">
                                <h3 class="article-list__item-header u-truncate-text dw-mod">{{title}}</h3>
                                <p class="article__short-summary dw-mod">{{summary}}</p>
                            </div>
                        </a>
                    </div>
                    {{/Cases}}
                </div>
                {{/.}}
            </script>
        </div>
    </section>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks


@* Component for the articles *@

@helper RenderArticleMenu(ArticleMenu settings)
{
    if (!String.IsNullOrEmpty(settings.Title)) {
        <div class="u-margin u-border-bottom">
            <h3 class="u-no-margin">@settings.Title</h3>
        </div>
    }

    <ul class="menu-left u-margin-bottom dw-mod">
        @foreach (var item in settings.Items)
        {
            @Render(item)
        }
    </ul>
}

@helper RenderArticleMenuItem(ArticleMenuItem settings)
{
    string link = !String.IsNullOrEmpty(settings.Link) ? settings.Link : "#";

    if (!String.IsNullOrEmpty(settings.Title)) {
        <li class="menu-left__item dw-mod">
            <a href="@link" onclick="@settings.OnClick" class="menu-left__link dw-mod">@settings.Title</a>
        </li>
    } 
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleList(ArticleList settings)
{
    if (Pageview != null)
    {
        bool isParagraph = Pageview.CurrentParagraph != null ? true : false;
        string[] sortArticlesListBy = new string[2];

        if (isParagraph) {
            sortArticlesListBy = Pageview.CurrentParagraph.Item["SortArticlesListBy"] != null && !string.IsNullOrEmpty(Pageview.CurrentParagraph.Item["SortArticlesListBy"].ToString()) ? Pageview.CurrentParagraph.Item["SortArticlesListBy"].ToString().Split('+') : new string[] { "Date", "ASC" };
        }
        else {
            sortArticlesListBy = Pageview.Item["SortArticlesListBy"] != null && !string.IsNullOrEmpty(Pageview.Item["SortArticlesListBy"].ToString()) ? Pageview.Item["SortArticlesListBy"].ToString().Split('+') : new string[] { "Date", "ASC" };
        }

        string sourcePage = settings.SourcePage != null ? settings.SourcePage : Pageview.ID.ToString();

        if (!settings.DisablePagination) {
            @RenderItemList(new
            {
                ItemType = !String.IsNullOrEmpty(settings.ItemType) ? settings.ItemType : "DynamicArticle",
                ListSourceType = settings.SourceType,
                ListSourcePage = sourcePage,
                ItemFieldsList = "*",
                Filter = settings.Filter,
                ListOrderBy = sortArticlesListBy[0],
                ListOrderByDirection = sortArticlesListBy[1],
                ListSecondOrderBy = sortArticlesListBy[0] == "Date" ? "InFocusSortId" : "Date",
                ListSecondOrderByDirection = "ASC",
                IncludeAllChildItems = true,
                ListTemplate = settings.Template,
                ListPageSize = settings.PageSize.ToString()
            });
        } else {
            @RenderItemList(new
            {
                ItemType = !String.IsNullOrEmpty(settings.ItemType) ? settings.ItemType : "DynamicArticle",
                ListSourceType = settings.SourceType,
                ListSourcePage = sourcePage,
                ItemFieldsList = "*",
                Filter = settings.Filter,
                ListOrderBy = sortArticlesListBy[0],
                ListOrderByDirection = sortArticlesListBy[1],
                ListSecondOrderBy = sortArticlesListBy[0] == "Date" ? "InFocusSortId" : "Date",
                ListSecondOrderByDirection = "ASC",
                IncludeAllChildItems = true,
                ListTemplate = settings.Template,
                ListPageSize = settings.PageSize.ToString(),
                ListViewMode = "Partial",
                ListShowTo = settings.PageSize + 1
            });
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleSummary(ArticleSummary settings)
{
    if (!String.IsNullOrEmpty(settings.Text))
    {
        <div class="article__summary dw-mod">@settings.Text</div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleListCategoryFilter(ArticleListCategoryFilter settings)
{
    string pageId =  Pageview.ID.ToString();
    string selectedFilter = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get("sourcePage")) ? HttpContext.Current.Request.QueryString.Get("sourcePage") : Translate("All");
    var query = HttpUtility.ParseQueryString(HttpContext.Current.Request.QueryString.ToString());

    foreach (var option in settings.Categories)
    {
        selectedFilter = selectedFilter == option.Value ? option.Key : selectedFilter;
    }

    if (selectedFilter == pageId)
    {
        selectedFilter = Translate("All");
    }

    if (Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet")
    {
        <div class="u-pull--right u-margin-left">
            <div class="collection u-no-margin">
                <h5>@Translate("Category")</h5>
                <input type="checkbox" id="CategorySelector" class="dropdown-trigger" />
                <div class="dropdown u-w180px dw-mod">
                    <label class="dropdown__header dropdown__btn dw-mod" for="CategorySelector">@Translate(selectedFilter)</label>
                    <div class="dropdown__content dw-mod">
                        @foreach (var option in settings.Categories)
                        {
                        <div class="dropdown__item" onclick="QueryArray.setParametersInCurrentURL({ sourceType: 'Page', sourcePage: '@(option.Key.ToLower() == "all" ? pageId : option.Value)' })">@Translate(option.Key)</div>
                        }
                    </div>
                    <label class="dropdown-trigger-off" for="CategorySelector"></label>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="u-full-width u-margin-bottom">
            <h5 class="u-no-margin">@Translate("Category")</h5>
            <input type="checkbox" id="CategorySelector" class="dropdown-trigger" />
            <div class="dropdown u-full-width dw-mod">
                <label class="dropdown__header dropdown__btn dw-mod" for="CategorySelector">@Translate(selectedFilter)</label>
                <div class="dropdown__content dw-mod">
                    @foreach (var option in settings.Categories)
                    {
                    <div class="dropdown__item" onclick="QueryArray.setParametersInCurrentURL({ sourceType: 'Page', sourcePage: '@(option.Key.ToLower() == "all" ? pageId : option.Value)' })">@Translate(option.Key)</div>
                    }
                </div>
                <label class="dropdown-trigger-off" for="CategorySelector"></label>
            </div>
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks
@using System.Collections.Generic

@* Component for the articles *@

@helper RenderArticleListFilter(ArticleListFilter settings)
{
    string selectedFilter = !String.IsNullOrEmpty(HttpContext.Current.Request.QueryString.Get(settings.SystemName)) ? HttpContext.Current.Request.QueryString.Get(settings.SystemName) : Translate("All");
    var query = HttpUtility.ParseQueryString(HttpContext.Current.Request.QueryString.ToString());

    if (settings.Options != null)
    {
        if (settings.Options is IEnumerable<dynamic>)
        {
            var options = (IEnumerable<dynamic>) settings.Options;
            settings.Options = options.OrderBy(item => item.Name);
        }

        foreach (var option in settings.Options)
        {
            selectedFilter = selectedFilter == option.Value ? option.Name : selectedFilter;
        }

        if (Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet")
        {
            <div class="u-pull--right u-margin-left">
                <div class="collection u-no-margin">
                    <h5>@settings.Label</h5>
                    <input type="checkbox" id="@(settings.SystemName)Selector" class="dropdown-trigger" />
                    <div class="dropdown u-w180px dw-mod">
                        <label class="dropdown__header dropdown__btn dw-mod" for="@(settings.SystemName)Selector">@Translate(selectedFilter)</label>
                        <div class="dropdown__content dw-mod">
                            <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '')">@Translate("All")</div>
                            @foreach (var option in settings.Options)
        {
                                <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '@option.Value')">@Translate(option.Name)</div>
                            }
                        </div>
                        <label class="dropdown-trigger-off" for="@(settings.SystemName)Selector"></label>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="u-full-width u-margin-bottom">
                <h5 class="u-no-margin">@settings.Label</h5>
                <input type="checkbox" id="@(settings.SystemName)Selector" class="dropdown-trigger" />
                <div class="dropdown u-full-width w-mod">
                    <label class="dropdown__header dropdown__btn dw-mod" for="@(settings.SystemName)Selector">@Translate(selectedFilter)</label>
                    <div class="dropdown__content dw-mod">
                        <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '')">@Translate("All")</div>
                        @foreach (var option in settings.Options)
{
                            <div class="dropdown__item" onclick="QueryArray.setParameterInCurrentURL('@settings.SystemName', '@option.Value')">@Translate(option.Name)</div>
                        }
                    </div>
                    <label class="dropdown-trigger-off" for="@(settings.SystemName)Selector"></label>
                </div>
            </div>
        }
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleListSearch(ArticleListSearch settings)
{
    string searchParameter = !string.IsNullOrEmpty(settings.SearchParameter) ? settings.SearchParameter : "Title";
    string searchWord = HttpContext.Current.Request.QueryString.Get(searchParameter);
    string searchString = !string.IsNullOrEmpty(searchWord) ? searchWord.Trim('*') : "";
    string className = "u-w340px u-pull--right u-margin-left";

    if (Pageview.Device.ToString() == "Mobile" || Pageview.Device.ToString() == "Tablet")
    {
        className = "u-full-width";
    }
    
    <div class="typeahead u-color-inherit u-margin-bottom dw-mod @className">
        <input type="text" class="typeahead-search-field u-no-margin dw-mod" placeholder="@Translate("Search in list")" value="@searchString" id="ArticleListSearchInput" onchange="QueryArray.setParameterInCurrentURL('@searchParameter', '*' + document.getElementById('ArticleListSearchInput').value + '*')">
        <button type="button" class="btn btn--condensed btn--primary u-no-margin dw-mod"><i class="fas fa-search"></i></button>
    </div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleListNoResultsInfo(ArticleListNoResultsInfo settings)
{
    <div class="u-margin-top--lg u-bold u-ta-center u-bold">@Translate(settings.Message)</div>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks
@using System.Text.RegularExpressions

@* Component for the articles *@

@helper RenderArticleListItem(ArticleListItem settings)
{
    switch (settings.Type) {
        case ArticleListItemType.Card:
            @RenderArticleListItemCard(settings);
            break;
        case ArticleListItemType.List:
            @RenderArticleListItemList(settings);
            break;
        case ArticleListItemType.Simple:
            @RenderArticleListItemSimple(settings);
            break;
        default:
            @RenderArticleListItemCard(settings);
        break;
    }
}

@helper RenderArticleListItemCard(ArticleListItem settings) {
    <a href="@settings.Link" class="u-full-height u-color-light--bg u-flex u-flex--column">
        <div class="u-color-light--bg u-no-padding dw-mod">
            @if (settings.Logo != null)
            {
                string backgroundImage = settings.Image != null ? "background-image:url(/Admin/Public/GetImage.ashx?width=992&amp;height=760&amp;crop=0&amp;Compression=75&amp;DoNotUpscale=True&amp;image=" + settings.Image.Path + "); background-size: cover;" : "";
                settings.Logo.ImageDefault.Crop = 5;
                settings.Logo.ImageDefault.Width = settings.Logo.ImageDefault.Width == 1920 ? 240 : settings.Logo.ImageDefault.Width;
                settings.Logo.ImageDefault.Height = settings.Logo.ImageDefault.Height == 1080 ? 200 : settings.Logo.ImageDefault.Height;
                <div class="image-hover__wrapper layered-image layered-image--tinted dw-mod" style="@backgroundImage">
                    @if (settings.Stickers != null)
                    {
                        if (settings.Stickers.Position != StickersListPosition.Custom && settings.Stickers.Position != StickersListPosition.None)
                        {
                            @Render(settings.Stickers);
                        } 
                    }
                    @RenderImage(settings.Logo)
                </div>
            } else if (settings.Image != null)
            {
                <div class="flex-img image-hover__wrapper u-position-relative dw-mod">
                    @if (settings.Stickers != null)
                    {
                        if (settings.Stickers.Position != StickersListPosition.Custom && settings.Stickers.Position != StickersListPosition.None)
                        {
                            @Render(settings.Stickers);
                        }                                                        
                    }
                    @Render(settings.Image)
                </div>
            }
        </div>

        @if (!String.IsNullOrEmpty(settings.Title) || !String.IsNullOrEmpty(settings.Summary))
        {
            <div class="card u-color-light--bg u-full-height dw-mod">
                @if (settings.Stickers != null)
                {
                    if (settings.Stickers.Position == StickersListPosition.Custom)
                    {
                        @Render(settings.Stickers);
                    }                                                        
                }
                @if (!String.IsNullOrEmpty(settings.Title))
                {
                    <h3 class="article-list__item-header u-truncate-text dw-mod">@settings.Title</h3>
                }
                @if (!String.IsNullOrEmpty(settings.SubTitle))
                {
                    <div class="article-list__item-micro-info u-truncate-text dw-mod">@settings.SubTitle</div>
                }
                @if (!String.IsNullOrEmpty(settings.Summary))
                {
                    <p class="article__short-summary dw-mod">@settings.Summary</p>
                }
            </div>
        }
    </a>
}

@helper RenderArticleListItemList(ArticleListItem settings) { 
    <a href="@settings.Link">
        <div class="grid u-color-light--bg u-no-padding dw-mod">
            <div class="grid__col-md-3">
                <div class="u-color-light--bg u-no-padding dw-mod">
                    @if (settings.Logo != null)
                    {
                        string backgroundImage = settings.Image != null ? "background-image:url(/Admin/Public/GetImage.ashx?width=992&amp;height=760&amp;crop=0&amp;Compression=75&amp;DoNotUpscale=True&amp;image=" + settings.Image.Path + "); background-size: cover;" : "";
                        settings.Logo.ImageDefault.Crop = 5;
                        settings.Logo.ImageDefault.Width = settings.Logo.ImageDefault.Width == 1920 ? 240 : settings.Logo.ImageDefault.Width;
                        settings.Logo.ImageDefault.Height = settings.Logo.ImageDefault.Height == 1080 ? 200 : settings.Logo.ImageDefault.Height;
                        <div class="image-hover__wrapper layered-image layered-image--tinted dw-mod" style="@backgroundImage">
                            @if (settings.Stickers != null)
                            {
                                if (settings.Stickers.Position != StickersListPosition.Custom)
                                {
                                    @Render(settings.Stickers);
                                }                                                        
                            }
                            @RenderImage(settings.Logo)
                        </div>
                    } else if (settings.Image != null)
                    {
                        <div class="flex-img image-hover__wrapper dw-mod">
                            @if (settings.Stickers != null)
                            {
                                if (settings.Stickers.Position != StickersListPosition.Custom)
                                {
                                    @Render(settings.Stickers);
                                }                                                        
                            }
                            @Render(settings.Image)
                        </div>
                    }
                </div>
            </div>

            @if (!String.IsNullOrEmpty(settings.Title) || !String.IsNullOrEmpty(settings.Summary))
            {
                <div class="grid__col-md-9">
                    @if (!String.IsNullOrEmpty(settings.Title))
                    {
                        <h3 class="article-list__item-header u-truncate-text dw-mod">@settings.Title</h3>
                    }
                    @if (settings.Stickers != null)
                    {
                        if (settings.Stickers.Position == StickersListPosition.Custom)
                        {
                            @Render(settings.Stickers);
                        }
                    }
                    @if (!String.IsNullOrEmpty(settings.SubTitle))
                    {
                        <div class="article-list__item-micro-info u-truncate-text dw-mod">@settings.SubTitle</div>
                    }
                    @if (!String.IsNullOrEmpty(settings.Summary))
                    {
                    <p class="article__short-summary dw-mod">@settings.Summary</p>
                    }
                </div>
            }
        </div>
    </a>
}

@helper RenderArticleListItemSimple(ArticleListItem settings) {
    <a href="@settings.Link" class="u-color-inherit">
        <div class="grid u-color-light--bg u-no-padding dw-mod">
            <div class="grid__col-md-12">
                @if (!String.IsNullOrEmpty(settings.Title))
                {
                    <div class="article-list-item__header u-truncate-text u-no-margin dw-mod">@settings.Title</div>
                }
                @if (!String.IsNullOrEmpty(settings.SubTitle))
                {
                    <div class="article-list__item-micro-info u-truncate-text dw-mod">@settings.SubTitle</div>
                }
            </div>
        </div>
    </a>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles


@* Component for the articles *@

@helper RenderArticleAuthorAndDate(ArticleAuthorAndDate settings)
{
    <small class="article__subscription">
        @if (!(string.IsNullOrWhiteSpace(settings.Author) && string.IsNullOrWhiteSpace(settings.Date)))
        {
            <text>@Translate("Written")</text>
        }
        @if (!string.IsNullOrWhiteSpace(settings.Author))
        {
            <text>@Translate("by") @settings.Author</text>
        }
        @if (!string.IsNullOrWhiteSpace(settings.Date))
        {
            <text>@Translate("on") @settings.Date</text>
        }
    </small>
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component for the articles *@

@helper RenderArticleLink(ArticleLink settings)
{
    if (!string.IsNullOrEmpty(settings.Title))
    {
        Button link = new Button {
            ConfirmText = settings.ConfirmText,
            ConfirmTitle = settings.ConfirmTitle,
            ButtonType = settings.ButtonType,
            Id = settings.Id,
            Title = settings.Title,
            AltText = settings.AltText,
            OnClick = settings.OnClick,
            CssClass = settings.CssClass,
            Disabled = settings.Disabled,
            Icon = settings.Icon,
            Name = settings.Name,
            Href = settings.Href,
            ButtonLayout = settings.ButtonLayout,
            ExtraAttributes = settings.ExtraAttributes
        };
        <div class="grid__cell">
            @Render(link)
        </div>
    }
}
@using System.Reflection
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.General


@* Component for the articles *@

@helper RenderArticleCarousel(ArticleCarousel settings)
{
    <div class="grid">
        <div class="grid__col-12 u-no-padding u-margin-bottom">
            <div class="carousel" id="carousel_@settings.Id">
                <div class="carousel__container js-carousel-slides dw-mod">
                    @RenderBlockList(settings.SubBlocks)
                </div>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            new CarouselModule("#carousel_@settings.Id", {
                slideTime: 0,
                dots: true
            });
        });
    </script>
}

@helper RenderArticleCarouselSlide(ArticleCarouselSlide settings)
{
    string imageEngine = "/Admin/Public/GetImage.ashx?";

    string defaultImage = settings.ImageSettings != null ? imageEngine : settings.Image;
    if (settings.ImageSettings != null)
    {
        defaultImage += settings.ImageSettings.Width != 0 ? "Width=" + settings.ImageSettings.Width + "&" : "";
        defaultImage += settings.ImageSettings.Height != 0 ? "Height=" + settings.ImageSettings.Height + "&" : "";
        defaultImage += "Crop=" + settings.ImageSettings.Crop + "&";
        defaultImage += "Compression=" + settings.ImageSettings.Compression + "&";
        defaultImage += "DoNotUpscale=" + settings.ImageSettings.DoNotUpscale.ToString() + "&";
        defaultImage += "FillCanvas=" + settings.ImageSettings.FillCanvas.ToString() + "&";
    }
    defaultImage += "&Image=" + settings.Image;

    <div class="carousel__slide u-min-h300px u-flex dw-mod" style="background-size:cover; background-image:url('@defaultImage')">
        <a class="article-carousel-item__wrap" href="@settings.Link" title="@settings.Title">
            <h2 class="article-list__item-header u-truncate-text u-color-light dw-mod">@settings.Title</h2>
            <div class="article-list__item-info">
                @if (settings.Stickers != null)
                {
                    settings.Stickers.Position = StickersListPosition.Custom;
                    @Render(settings.Stickers);
                }

                <small class="u-margin-top--lg u-color-light">
                    @if (!(string.IsNullOrWhiteSpace(settings.Author) && string.IsNullOrWhiteSpace(settings.Date)))
                    {
                    <text>@Translate("Written")</text>
                    }
                    @if (!string.IsNullOrWhiteSpace(settings.Author))
                    {
                    <text>@Translate("by") @settings.Author</text>
                    }
                    @if (!string.IsNullOrWhiteSpace(settings.Date))
                    {
                    <text>@Translate("on") @settings.Date</text>
                    }
                </small>
            </div>

            <h3 class="article__short-summary u-color-light">@settings.Summary</h3>
        </a>
        @if (settings.UseFilters == true)
        {
            <div class="background-image image-filter image-filter--darken dw-mod"></div>
        }
    </div>
}
@using System.Text.RegularExpressions
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderArticleVideo(ArticleVideo settings)
{
    if (settings.Url != null)
    {
        //getting video ID from youtube URL
        string videoCode = settings.Url;
        Regex regex = new Regex(@".be\/(.[^?]*)");
        Match match = regex.Match(videoCode);
        string videoId = "";
        if (match.Success)
        {
            videoId = match.Groups[1].Value;
        }
        else
        {
            regex = new Regex(@"v=([^&]+)");
            match = regex.Match(videoCode);
            if (match.Success)
            {
                videoId = match.Groups[1].Value;
            }
        }

        int autoPlay = settings.AutoPlay == "true" ? 1 : 0;

        <div class="video-wrapper">
            <div class="js-youtube-video" data-video="@videoId" id="ytPlayer@(Guid.NewGuid().ToString("N"))" data-auto-play="@autoPlay" data-enable-controls="1"></div>
        </div> 
    }
}



@* Simple helpers *@

@*Requires the Gallery ItemType that comes with Rapido*@
@helper RenderArticleItemGallery(IList<ItemViewModel> gallery) {
    if (gallery != null && gallery.Count > 0)
    {
        int count = 1;

        foreach (var item in gallery)
        {
            if (item.GetFile("ImagePath") != null)
            {
                string image = item.GetFile("ImagePath").PathUrlEncoded;
                string imagePrefix = "/Admin/Public/GetImage.ashx?width=1200&amp;height=820&amp;crop=5&amp;Compression=75&amp;DoNotUpscale=1&amp;image=";
                int imagesCount = gallery.Count;

                if (count == 1)
                {
                    <label class="gallery" for="ParagraphGalleryModalTrigger" onclick="Gallery.openImage(this.querySelector('.js-gallery'))">
                        <span class="gallery__main-image">
                            <img src="/Files/Images/placeholder.gif" data-src="/Admin/Public/GetImage.ashx?width=992&amp;height=760&amp;crop=0&amp;Compression=75&amp;DoNotUpscale=1&amp;image=@image" class="b-lazy flex-img js-gallery" alt="" data-for="ParagraphGallery" data-image="@imagePrefix@image" />
                        </span>
                        <span class="gallery__image-counter">
                            <i class="fas fa-camera fa-2x"></i> <span class="gallery__image-counter__number">@imagesCount</span>
                            <span class="gallery__image-counter__text">@Translate("See all") <i class="fas fa-angle-right"></i></span>
                        </span>
                    </label>
                }
                else
                {
                    <div class="u-hidden js-gallery" data-for="ParagraphGallery" data-image="@imagePrefix@image"></div>
                }

                count++;
            }
        }

        @Render(new ArticleGalleryModal())
    }
}

@helper RenderMobileFilters(List<Block> subBlocks)
{
    if (subBlocks.Count > 0)
    {
        <div class="grid__col-12">
            <input type="checkbox" id="CheckFilters" class="js-remember-state u-hidden" data-expand="CheckFilters" />
            <div class="grid u-margin-bottom dw-mod" data-trigger="CheckFilters">
                @RenderBlockList(subBlocks)  
            </div>
            <label for="CheckFilters" class="btn btn--secondary btn--full dw-mod js-expand-hide" data-trigger="CheckFilters">@Translate("Select filters")</label>
            <label for="CheckFilters" class="btn btn--secondary btn--full dw-mod expandable--collapsed" data-trigger="CheckFilters">@Translate("Close filters")</label>
        </div>
    }
} 
@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>

@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks


@* Components *@
@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System.Text.RegularExpressions;
@using Dynamicweb.Frontend
@using System.Reflection
@using Dynamicweb.Content.Items
@using System.Web.UI.HtmlControls
@using Dynamicweb.Content.Items
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Documentation
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderComponentInfo(dynamic settings)
{
    <div class="u-color-light-gray--bg">
        <div class="u-bold u-margin u-margin-bottom--lg">@Translate("Settings")</div>
        <table>
            @{
                PropertyInfo[] properties = settings.Content.GetType().GetProperties();
                foreach (PropertyInfo property in properties)
                {
                    string longNameCssClass = property.Name.Length > 22 ? "u-break-word" : "";

                    <tr>
                        <td class="@longNameCssClass">
                            @property.Name  
                        </td>
                        <td style="word-break: break-all" class="u-italic">
                            @if (property.PropertyType.BaseType != null) {
                                if (property.PropertyType.BaseType.ToString() == "System.Enum") {
                                    string parameterId = property.PropertyType.Name;
                                    string selection = HttpContext.Current.Request.QueryString.Get(parameterId) != null ? HttpContext.Current.Request.QueryString.Get(parameterId) : "";
                                    SelectField enumSelector = new SelectField { OnChange = "QueryArray.setParametersInCurrentURL({ " + parameterId + ": this.value, scrollToId: this.closest('.js-component-info').id });" };

                                    foreach (var en in property.PropertyType.GetEnumNames())
                                    {
                                        if (selection.ToLower() == en.ToLower()) {
                                            enumSelector.Options.Add(new SelectFieldOption { Label = en.ToString(), Value = en.ToString(), Checked = true });
                                        } else {
                                            enumSelector.Options.Add(new SelectFieldOption { Label = en.ToString(), Value = en.ToString() });
                                        }
                                    }
                                    @Render(enumSelector);
                                }
                                else if (property.PropertyType.ToString().Contains("Dynamicweb.Rapido.Blocks.Components"))
                                {
                                    <div class="u-bold">Component {</div>

                                    PropertyInfo[] subProperties = property.PropertyType.GetProperties();
                                    foreach (PropertyInfo subProperty in subProperties)
                                    {
                                        <div>@subProperty.Name</div>
                                    }

                                    <div class="u-bold">}</div>
                                } else {
                                    @property.PropertyType
                                }
                            }
                        </td>
                    </tr>
                }
            }
        </table>
    </div>
}
@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@using System.Text.RegularExpressions;
@using Dynamicweb.Frontend
@using System.Reflection
@using System.Web.UI.HtmlControls
@using Dynamicweb.Content.Items
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Documentation
@using Dynamicweb.Rapido.Blocks

@* Component for the articles *@

@helper RenderComponentCode(dynamic settings)
{
    string methodName = settings.Content.component.HelperName;
    dynamic[] methodsettings = new dynamic[1];
    methodsettings[0] = settings.Content.component;

    string uniqueExampleId = !String.IsNullOrEmpty(settings.Content.Name) ? settings.Content.Name.Replace(" ", "").Replace("(", "").Replace(")", "") : "";
    uniqueExampleId = uniqueExampleId == "" ? settings.Content.component.GetType().Name.ToString() : uniqueExampleId;

    Type methodType = this.GetType();
    MethodInfo helperMethod = methodType.GetMethod(methodName);

    <div class="u-color-light-gray--bg u-border u-padding--lg u-margin-bottom--lg">
        <div class="u-bold u-margin-bottom--lg">@Translate("Basic usage")</div>
        <div>
            <div>Block myBlock = new Block</div>
            <div>{</div>
            <div>&nbsp;&nbsp;&nbsp;Id = "MyBlock",</div>
            <div>&nbsp;&nbsp;&nbsp;SortId = 10,</div>
            <div>&nbsp;&nbsp;&nbsp;Component = new @settings.Content.component.GetType().Name.ToString() { OPTIONAL_settings }</div>
            <div>};</div>
            <div>myPage.Add("MyContainer", myBlock);</div>
        </div>
        <p></p>
        <div class="u-bold">@Translate("Or")</div>
        <p></p>
        <div>
            <div>@@Render(new @settings.Content.component.GetType().Name.ToString() { OPTIONAL_settings })</div>
        </div>
    </div>
    
    if (!String.IsNullOrEmpty(settings.Content.CodeExample)) {
    <div class="u-bold u-margin-bottom--lg">@Translate("Implementation example")</div>
<textarea class="u-color-dark--bg u-color-light u-padding" id="@(uniqueExampleId)__CodeExample" name="@(uniqueExampleId)__CodeExample">  
@settings.Content.CodeExample
</textarea>
    @Render(new Button { Title = Translate("Copy to clipboard"), OnClick = "CopyCode(document.getElementById('" + uniqueExampleId + "__CodeExample'))", ButtonLayout = ButtonLayout.Secondary })
    <br />
    }

    <div class="u-bold u-margin-bottom--lg">@Translate("Markup result")</div>
<textarea class="u-color-dark--bg u-color-light u-padding" id="@(uniqueExampleId)__Code" name="@(uniqueExampleId)__Code">
@{
    try
    {
        HtmlElement finalHtmlElement = new HtmlElement();
        var helperMethodAsString = helperMethod.Invoke(this, methodsettings);
        @helperMethodAsString
    }
    catch (Exception ex)
    {
        throw new Exception(settings.GetType().Name + " method '" + methodName + "' could not be invoked", ex);
    }
}
</textarea>
@Render(new Button { Title = Translate("Copy to clipboard"), OnClick = "CopyCode(document.getElementById('" + uniqueExampleId + "__Code'))", ButtonLayout = ButtonLayout.Secondary })

    <style>
        .CodeMirror {   
          height: auto;
        }
    </style>

    <script>
        @if (!String.IsNullOrEmpty(settings.Content.CodeExample)) {
            <text>
            var myCodeExample = CodeMirror.fromTextArea(document.getElementById("@(uniqueExampleId)__CodeExample"), {
                lineNumbers: true,
                lineSeparator: "-newline",
                indentUnit: 4,
                mode: "coffeescript",
                tabMode: "indent",
                theme: "cobalt"
            });
            </text>
        }

        var myCodeMirror = CodeMirror.fromTextArea(document.getElementById("@(uniqueExampleId)__Code"), {
            lineNumbers: true,
            mode: "xml",
            tabMode: "indent",
            theme: "cobalt"
        });
    </script>
}

@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks.Extensibility
@using Dynamicweb.Rapido.Blocks
@using Dynamicweb.Ecommerce.Common

@{ 
    BlocksPage referencesBlocksPage = BlocksPage.GetBlockPage("Master");

    Block masterScriptReferences = new Block()
    {
        Id = "MasterScriptReferences",
        SortId = 1,
        Template = RenderMasterScriptReferences()
    };
    referencesBlocksPage.Add(MasterBlockId.MasterReferences, masterScriptReferences);
}

@helper RenderMasterScriptReferences() {
    <script src="/Files/Templates/Designs/Rapido/js/handlebars-v4.0.12.min.js"></script>
    <script src="/Files/Templates/Designs/Rapido/js/master.min.js"></script>

    if (Model.Area.Item.GetItem("Custom").GetBoolean("UseCustomJavascript"))
    {
        <script src="/Files/Templates/Designs/Rapido/js/custom.min.js"></script>
        PushPromise("/Files/Templates/Designs/Rapido/js/custom.min.js");
    }

    PushPromise("/Files/Templates/Designs/Rapido/js/handlebars-v4.0.12.min.js");
    PushPromise("/Files/Templates/Designs/Rapido/js/master.min.js");
}
@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>

@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks.Extensibility
@using Dynamicweb.Rapido.Blocks

@{
    BlocksPage bottomSnippetsBlocksPage = BlocksPage.GetBlockPage("Master");

    Block primaryBottomSnippets = new Block()
    {
        Id = "MasterJavascriptInitializers",
        SortId = 100,
        Template = RenderPrimaryBottomSnippets()
    };
    bottomSnippetsBlocksPage.Add(MasterBlockId.MasterReferences, primaryBottomSnippets);

    if (Dynamicweb.Rapido.Services.User.IsBuyingAllowed())
    {
        Block miniCartPageId = new Block
        {
            Id = "MiniCartPageId",
            Template = RenderMiniCartPageId()
        };
        bottomSnippetsBlocksPage.Add(MasterBlockId.MasterReferences, miniCartPageId);
    }
}

@helper RenderPrimaryBottomSnippets()
{
    bool isWireframeMode = Model.Area.Item.GetItem("Settings").GetBoolean("WireframeMode");
    bool useGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));

    if (isWireframeMode)
    {
        <script>
            Wireframe.Init(true);
        </script>
    }


    if (useGoogleTagManager)
    {
        <script>
            document.addEventListener('addToCart', function(event) {
                var googleImpression = JSON.parse(event.detail.productInfo.googleImpression);
                if (typeof googleImpression == "string") {
                    googleImpression = JSON.parse(event.detail.productInfo.googleImpression);
                }
                dataLayer.push({
                    'event': 'addToCart',
                    'ecommerce': {
                        'currencyCode': googleImpression.currency,
                        'add': {
                            'products': [{
                                'name': googleImpression.name,
                                'id': googleImpression.id,
                                'price': googleImpression.price,
                                'brand': googleImpression.brand,
                                'category': googleImpression.category,
                                'variant': googleImpression.variant,
                                'quantity': event.detail.quantity
                            }]
                        }
                    }
                });
            });
        </script>
    }

    //if digitalwarehouse
    if (Model.Area.Item.GetItem("Layout").GetItem("Header").GetBoolean("ShowDownloadCart"))
    {
        string cartContextId = Converter.ToString(HttpContext.Current.Application["DownloadCartContext"]);

        if (string.IsNullOrEmpty(cartContextId))
        {
            var moduleProps = Dynamicweb.Modules.Properties.GetParagraphModuleSettings(GetPageIdByNavigationTag("DownloadCart"), "eCom_CartV2");
            var cartSettings = new Dynamicweb.Ecommerce.Cart.ModuleSettings(moduleProps);
            cartContextId = cartSettings.OrderContextID;
            HttpContext.Current.Application["DownloadCartContext"] = cartContextId;
        }

        <script>
            let downloadCart = new DownloadCart({
                cartPageId: @GetPageIdByNavigationTag("MiniCartFeed"),
                contextId: "@cartContextId",
                addButtonText: "@Translate("Add")",
                removeButtonText: "@Translate("Remove")"
            });
        </script>
    }

    <!--@Javascripts-->
}

@helper RenderMiniCartPageId()
{
    int miniCartFeedPageId = GetPageIdByNavigationTag("MiniCartFeed");
    <script>
        window.cartId = "@miniCartFeedPageId";
    </script>
} 
@using System
@using System.Web
@using System.Collections.Generic
@using Dynamicweb.Rapido.Blocks

@{ 
    BlocksPage pageCustomBlocksPage = BlocksPage.GetBlockPage("Master");

}


<!DOCTYPE html>
<html lang="@Pageview.Area.CultureInfo.TwoLetterISOLanguageName">

@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(masterPage.BlocksRoot.BlocksList)



@helper RenderMasterHead() { 
    List<Block> subBlocks = this.masterPage.GetBlockListById("Head").OrderBy(item => item.SortId).ToList();

    <head>
        <meta charset="utf-8" />
        <title>@Model.Title</title>

        <!-- Mobile specific meta -->
        <meta name="viewport" content="width=device-width, initial-scale=1">

       @RenderBlockList(subBlocks)
    </head>   
}

@helper RenderMasterCss() { 
    var fonts = new string[] {
        getFontFamily("Layout", "HeaderFont"),
        getFontFamily("Layout", "SubheaderFont"),
        getFontFamily("Layout", "TertiaryHeaderFont"),
        getFontFamily("Layout", "Header", "ToolsFont"),
        getFontFamily("Layout", "Header", "NavigationFont"),
        getFontFamily("Layout", "MobileNavigation", "Font"),
        getFontFamily("ProductList", "Facets", "HeaderFont"),
        getFontFamily("ProductPage", "PriceFontDesign"),
        getFontFamily("Ecommerce", "SaleSticker", "Font"),
        getFontFamily("Ecommerce", "NewSticker", "Font"),
        getFontFamily("Ecommerce", "CustomSticker", "Font")
    };

    string autoCssLink = "/Files/Templates/Designs/Rapido/css/rapido/rapido_" + Model.Area.ID.ToString() + ".min.css?ticks=" + Model.Area.UpdatedDate.Ticks;
    bool useFontAwesomePro = Pageview.AreaSettings.GetItem("Layout").GetItem("Icons").GetBoolean("UseFontAwesomePro");
    var family = string.Join("%7C", fonts.Where(x => !string.IsNullOrEmpty(x)).Distinct().Select(x => string.Format("{0}:100,200,300,400,500,600,700,800,900", x)));

    <!-- Base (Default, wireframe) styles -->
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/base/base.min.css" type="text/css">

    <!-- Rapido Css from Website Settings -->
    <link rel="stylesheet" href="@autoCssLink" type="text/css">

    <!-- Ignite Css (Custom site specific styles) -->
    <link type="text/css" href="/Files/Templates/Designs/Rapido/css/ignite/ignite.min.css" rel="stylesheet">

    <!-- Font awesome -->
    <link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/fonts/FontAwesomePro/css/fontawesome-all.min.css" type="text/css">

    <!-- Google fonts -->
    <link href="https://fonts.googleapis.com/css?family=@family" rel="stylesheet">
}

@helper RenderMasterBody() { 
    List<Block> subBlocks = this.masterPage.GetBlockListById("Body").OrderBy(item => item.SortId).ToList();

    <body>
       @RenderBlockList(subBlocks)
    </body>   
}

@helper RenderMain()
{
    List<Block> subBlocks = this.masterPage.GetBlockListById("MasterMain").OrderBy(item => item.SortId).ToList();

    <main class="site dw-mod">
        @RenderBlockList(subBlocks)
    </main>
}

@helper RenderPageContent()
{
    bool isNavigationStickyMenu = Pageview.Device.ToString() != "Mobile" && Pageview.Device.ToString() != "Tablet" && Model.Area.Item.GetItem("Layout").GetItem("Header").GetBoolean("StickyTop");
    string pagePos = isNavigationStickyMenu ? "js-page-pos" : "";

    <div id="Page" class="page @pagePos">
        <section class="center-container content-container dw-mod" id="content">
            @RenderSnippet("Content")
        </section>
    </div>
}

@helper RenderNoLayoutFooter() {
    <footer class="footer dw-mod">
        <div class="grid__col-12 footer__copyright dw-mod">
            <p>@Model.Area.Item.GetItem("Layout").GetString("FooterCopyrightText")</p>
        </div>
    </footer>
}

@* Hack to support nested helpers *@
@SnippetStart("Content")
@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>


@using Dynamicweb.Extensibility
@using Dynamicweb.Rapido.Blocks.Components.Documentation
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks.Components.Ecommerce
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks

<style>
    .test-table-class td, .test-table-class th {
        border: 1px solid #d3d3d3;
    }

    .cm-invalidchar {
        display: none;
    }

    .fixed-doc-navigation {
        position: fixed;
        top: 0;
        left: 0;
        z-index: 100;
        background-color: #fff;
        box-shadow: 0px 2px 20px 1px rgba(0,0,0,0.25);
    }

    .fixed-doc-navigation-search {
        position: relative;
        background-color: #fff;
        z-index: 20;
        width: 285px;
    }

    .fixed-doc-navigation-container {
        overflow-y: scroll;
        height: 100vh;
        z-index: 10;
    }

    .doc-to-top-btn {
        position: fixed;
        bottom: 0;
        right: 0;
        z-index: 100;
    }
</style>

@functions {
    public class DocItem
    {
        public string Name { get; set; }
        public ComponentBase component { get; set; }
        public string CodeExample { get; set; }
    }

    BlocksPage componentsDocPage = BlocksPage.GetBlockPage("ComponentsDoc");

    List<DocItem> GeneralComponentsList = new List<DocItem>();
    List<DocItem> EcommerceComponentsList = new List<DocItem>();
    List<DocItem> ArticleComponentsList = new List<DocItem>();

    int count = 10;

    public dynamic GetEnumSetting(dynamic enumSetting, string name = null)
    {
        string enumName = name == null ? enumSetting.GetType().Name : name;
        enumSetting = HttpContext.Current.Request.QueryString.Get(enumName) != null ? System.Enum.Parse(enumSetting.GetType(), HttpContext.Current.Request.QueryString.Get(enumName)) : enumSetting;
        return enumSetting;
    }
}

@{
    Dynamicweb.Frontend.FileViewModel DummyImage = new Dynamicweb.Frontend.FileViewModel();
    DummyImage.Path = "/Files/Images/Demo/8026157750_b98560948c_b.jpg";

    SelectField selectField = new SelectField
    {
        Id = "MySelectField",
        Label = Translate("Select field"),
        ErrorMessage = Translate("There is an error"),
        Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" },
        ActionButton = new Button { OnClick = "#", Icon = new Icon { Prefix = "fas", Name = "fa-plus", LabelPosition = IconLabelPosition.After } }
    };
    selectField.Options.Add(new SelectFieldOption { Label = Translate("One"), Value = "one" });
    selectField.Options.Add(new SelectFieldOption { Label = Translate("Two"), Value = "two" });
    selectField.Options.Add(new SelectFieldOption { Label = Translate("Three"), Value = "three", Disabled = true });

    string selectFieldCodeExample = "SelectField selectField = new SelectField " +
    "{" +
        "Id = \"MySelectField\"," +
        "Label = Translate(\"Select field\")," +
        "ErrorMessage = Translate(\"There is an error\")," +
        "ActionButton = new Button { OnClick = \"#\", Icon = new Icon { Prefix = \"fas\", Name = \"fa-plus\", LabelPosition = IconLabelPosition.After } }" +
    "};" +
    "-newline" +
    "selectField.Options.Add(new SelectFieldOption { Label = Translate(\"One\"), Value = \"one\" });";

    RadioButtonListField radioButtonListField = new RadioButtonListField
    {
        Id = "MyRadioButtons",
        Name = "MyRadioButtons",
        Label = Translate("Select option"),
        ErrorMessage = Translate("There is an error"),
        Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" },
        Options = new List<RadioButtonField> {
            new RadioButtonField { Label = Translate("One"), Value = "one", Id = "RadioOne", Checked = true },
            new RadioButtonField { Label = Translate("Two"), Value = "two", Id = "RadioTwo"},
            new RadioButtonField { Label = Translate("Three"), Value = "three", Id = "RadioThree", Disabled = true }
        }
    };

    CheckboxListField checkboxListField = new CheckboxListField
    {
        Id = "MyCheckboxes",
        Label = Translate("Select multiple options"),
        Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" },
        ErrorMessage = Translate("There is an error")
    };
    checkboxListField.Options.Add(new CheckboxField { Label = Translate("One"), Id = "CheckOne", Checked = true });
    checkboxListField.Options.Add(new CheckboxField { Label = Translate("Two"), Id = "CheckTwo", Checked = true });
    checkboxListField.Options.Add(new CheckboxField { Label = Translate("Three"), Id = "CheckThree", Disabled = true });

    string checkboxListFieldCodeExample = "CheckboxListField checkboxListField = new CheckboxListField " +
    "{" +
        "Id = \"MyCheckboxes\"," +
        "Label = Translate(\"Select multiple options\")," +
        "ErrorMessage = Translate(\"There is an error\")" +
    "};" +
    "-newline" +
    "checkboxListField.Options.Add(new CheckboxField { Label = Translate(\"One\"), Id = \"CheckOne\", Checked = true });";

    StickersCollection stickersCollection = new StickersCollection { CssClass = "u-block", Position = GetEnumSetting(StickersListPosition.TopLeft) };
    stickersCollection.Stickers.Add(new Sticker { Title = "On sale", Style = StickerStyle.Sale });
    stickersCollection.Stickers.Add(new Sticker { Title = "New", Style = StickerStyle.New });
    stickersCollection.Stickers.Add(new Sticker { Title = "Black friday", Style = StickerStyle.Custom });

    Form formComponent = new Form { Method = FormMethod.Get };
    formComponent.Add(new CheckboxField { Checked = true, Label = Translate("My label") });
    formComponent.Add(new TextField { Required = true, Label = Translate("My text") });
    formComponent.Add(new NumberField { Required = true, Label = Translate("My number"), Min = 2 });
    formComponent.Add(new NumberField { Required = true, Label = Translate("My number"), Min = 2 });

    //here used custom styles from end of this page
    var table = new Table
    {
        Id = "MyTable",
        Design = GetEnumSetting(TableDesign.Clean),
        CssClass = "test-table-class",
        Header = new TableRow
        {
            CssClass = "test-tr-class",
            Id = "tr1",
            Cells = new List<TableCell> {
                    new TableCell { Content = "Meat" },
                    new TableCell { Content = "Proteins (g)" },
                    new TableCell { Content = "Fats (g)" },
                    new TableCell { Content = "Carbs (g)" }
                }
        },
        Rows = new List<TableRow> {
                new TableRow ("Chicken", "20,8", "8,8", "0,6"),
                new TableRow ("Pork", "19,4", "7,1", "0"),
                new TableRow ("Beef", "18,9", "12,4", "0"),
                new TableRow (
                    new TableCell { IsHeader = true, Content = "CustomCell", Colspan = 2 },
                    new TableCell { Content = "CustomCell2", Rowspan = 2, Colspan = 2, CssClass = "u-brand-color-one--bg-lighten-20 u-color-light" }
                ),
                new TableRow {
                    IsHeaderRow = true,
                    Cells = new List<TableCell> {
                        new TableCell { Content = "string1" },
                        new TableCell { Content = "string2" }
                    }
                }
            },
        Footer = new TableRow
        {
            CssClass = "u-color-light-gray--bg",
            Cells = new List<TableCell> {
                    new TableCell { Content = "1" },
                    new TableCell { Content = "2" },
                    new TableCell { Content = "3" },
                    new TableCell { Content = "4" }
                }
        }
    };

    var simpleTable = new Table
    {
        Id = "MySimpleTable",
        CssClass = "test-table-class",
        Design = GetEnumSetting(TableDesign.Striped),
        Rows = new List<TableRow> {
                new TableRow ("Color", "Blue"),
                new TableRow ("Size", "M")
            }
    };
    string simpleTableCodeExample = "new Table { " +
        "Id = \"MySimpleTable\"," +
        "Design = GetEnumSetting(TableDesign.Striped), " +
        "Rows = new List<TableRow> { " +
                "new TableRow (\"Color\", \"Blue\"), " +
                "new TableRow (\"Size\", \"M\") " +
             "} " +
    "};";

    Dashboard dashboard = new Dashboard { WidgetsBaseBackgroundColor = "#0582c4" };
    dashboard.AddWidget(new DashboardWidgetLink { Link = "#", Title = "Example", Icon = new Icon { Prefix = "fas", Name = "fa-code" } });
    dashboard.AddWidget(new DashboardWidgetLink { Link = "#", Title = "Widget", Icon = new Icon { Prefix = "fas", Name = "fa-bell" } });
    dashboard.AddWidget(new DashboardWidgetLink { Link = "#", Title = "Sample", Icon = new Icon { Prefix = "fas", Name = "fa-bomb" } });

    string dashboardCodeExample = "Dashboard dashboard = new Dashboard { WidgetsBaseBackgroundColor = \"#0582c4\" }; " + "-newline " +
    "dashboard.AddWidget(new DashboardWidgetLink { Link = \"#\", Title = \"Example\", Icon = new Icon { Prefix = \"fas\", Name = \"fa-code\" } }); " + "-newline " +
    "dashboard.AddWidget(new DashboardWidgetLink { Link = \"#\", Title = \"Widget\", Icon = new Icon { Prefix = \"fas\", Name = \"fa-bell\" } }); " + "-newline " +
    "dashboard.AddWidget(new DashboardWidgetLink { Link = \"#\", Title = \"Sample\", Icon = new Icon { Prefix = \"fas\", Name = \"fa-bomb\" } });";

    Dashboard dashboard2 = new Dashboard { WidgetsBaseBackgroundColor = "#32b132" };
    dashboard2.AddWidget(new DashboardWidgetCounter { Count = 120, Title = "Orders", Icon = new Icon { Prefix = "fas", Name = "fa-code" } });
    dashboard2.AddWidget(new DashboardWidgetCounter { Count = 1105, Title = "Count" });
    dashboard2.AddWidget(new DashboardWidgetCounter { Count = 5, Title = "Quotes", Icon = new Icon { Prefix = "fas", Name = "fa-quote-right" } });
    dashboard2.AddWidget(new DashboardWidgetCounter { Count = 15, Title = "Days", Icon = new Icon { Prefix = "fas", Name = "fa-calendar" } });

    string dashboard2CodeExample = "Dashboard dashboard = new Dashboard { WidgetsBaseBackgroundColor = \"#32b132\" }; " + "-newline " +
    "dashboard.AddWidget(new DashboardWidgetCounter { Count = 120, Title = \"Orders\", Icon = new Icon { Prefix = \"fas\", Name = \"fa-code\" } }); " + "-newline " +
    "dashboard.AddWidget(new DashboardWidgetCounter { Count = 1105, Title = \"Count\" }); ";

    VariantMatrix variantMatrix = new VariantMatrix { ProductId = "PRODTEST" };

    VariantGroup variantGroup1 = new VariantGroup
    {
        Name = "Colors"
    };

    VariantOption option1 = new VariantOption
    {
        Name = "Blue",
        Id = "V0"
    };
    variantGroup1.AddVariantOption(option1);

    VariantOption option2 = new VariantOption
    {
        Name = "Red",
        Id = "V1"
    };
    variantGroup1.AddVariantOption(option2);

    variantMatrix.AddVariantGroup(variantGroup1);

    variantMatrix.AddVariantProduct("V0.V1", new VariantProduct { ProductId = "PROD0", VariantId = "V0.V1" });
    variantMatrix.AddVariantProduct("V0.V2", new VariantProduct { ProductId = "PROD1", VariantId = "V0.V2" });
    variantMatrix.AddVariantProduct("V1.V2", new VariantProduct { ProductId = "PROD2", VariantId = "V1.V2" });

    GeneralComponentsList.Add(new DocItem
    {
        component = new Button { Id = "MyButton", ButtonLayout = GetEnumSetting(ButtonLayout.Primary), Title = Translate("Read more"), Icon = new Icon { Prefix = "fas", Name = "fa-plus", LabelPosition = IconLabelPosition.After }, OnClick = "document.getElementById('MyButtonModalTrigger').checked = false" },
        CodeExample = "new Button { Id = \"MyButton\", ButtonLayout = GetEnumSetting(ButtonLayout.Primary), Title = Translate(\"Read more\"), Icon = new Icon { Prefix = \"fas\", Name = \"fa-plus\", LabelPosition = IconLabelPosition.After }, OnClick = \"document.getElementById('MyButtonModalTrigger').checked = false\" }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Link { Id = "MyLink", ButtonLayout = GetEnumSetting(ButtonLayout.Primary), Target = GetEnumSetting(LinkTargetType.Blank), Href = "#", Title = "Read more", Icon = new Icon { Prefix = "fas", Name = "fa-plus", LabelPosition = IconLabelPosition.After }, OnClick = "document.getElementById('MyButtonModalTrigger').checked = false" },
        CodeExample = "new Link { Id = \"MyButton\", ButtonLayout = GetEnumSetting(ButtonLayout.Primary), Target = GetEnumSetting(LinkTargetType.Blank), Href = \"#\", Title = \"Read more\", Icon = new Icon { Prefix=\"fas\", Name=\"fa-plus\", LabelPosition = IconLabelPosition.After }, OnClick=\"document.getElementById('MyButtonModalTrigger').checked = false\" }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Heading { Title = Translate("My new heading"), Level = 1, Icon = new Icon { Prefix = "fas", Name = "fa-plus", LabelPosition = IconLabelPosition.After } },
        CodeExample = "new Heading { Title= Translate(\"My new heading\"), Level = 1, Icon = new Icon { Prefix = \"fas\", Name = \"fa-plus\", LabelPosition = IconLabelPosition.After } }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Image { Path = DummyImage, Caption = Translate("Image caption"), ImageDefault = new ImageSettings { Width = 1000, Height = 600, Crop = 1, Compression = 75 }, ImageSmall = new ImageSettings { Width = 500, Height = 300, Crop = 1, Compression = 75 }, Style = GetEnumSetting(ImageStyle.None), FilterPrimary = GetEnumSetting(ImageFilter.None), FilterSecondary = GetEnumSetting(ImageFilter.None) },
        CodeExample = "new Image { Path = DummyImage, Caption = Translate(\"Image caption\"), ImageDefault = new ImageSettings { Width = 1000, Height = 600, Crop = 1, Compression = 75 }, ImageSmall = new ImageSettings { Width = 500, Height = 300, Crop = 1, Compression = 75 }, Style = GetEnumSetting(ImageStyle.None), FilterPrimary = GetEnumSetting(ImageFilter.None), FilterSecondary = GetEnumSetting(ImageFilter.None) }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Icon { Prefix = "fas", Name = "fa-plus", Label = Translate("Icon label"), LabelPosition = GetEnumSetting(IconLabelPosition.After) },
        CodeExample = "new Icon { Prefix = \"fas\", Name = \"fa-plus\", Label = Translate(\"Icon label\"), LabelPosition = GetEnumSetting(IconLabelPosition.After) }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new FileField { Id = "MyFileField", ChooseFileText = Translate("Choose file"), NoFilesChosenText = Translate("No files chosen"), Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" } },
        CodeExample = "new FileField { Id = \"MyFileField\", ChooseFileText = Translate(\"Choose file\"), NoFilesChosenText = Translate(\"No files chosen\") }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new TextField { Id = "MyTextField", Label = Translate("Text field"), Placeholder = "Text", MaxLength = 160, ErrorMessage = Translate("There is an error"), ExtraAttributes = new Dictionary<string, string> { { "data-extend", "true" } }, Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" } },
        CodeExample = "new TextField { Id = \"MyTextField\", Label = Translate(\"Text field\"), Placeholder = \"Text\", MaxLength = 160, ErrorMessage = Translate(\"There is an error\"), ExtraAttributes = new Dictionary<string, string> { { \"data-extend\", \"true\" } }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = selectField,
        CodeExample = selectFieldCodeExample
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new NumberField { Label = Translate("My number"), Max = 10, Min = 0, Step = 1, Value = "1", Id = "MyNumber", Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" } },
        CodeExample = "new NumberField { Label = Translate(\"My number\"), Max = 10, Min = 0, Step = 1, Value = \"1\", Id = \"MyNumber\" }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new HiddenField { Id = "HiddenField", Value = "HiddenValue" },
        CodeExample = "new HiddenField { Id=\"HiddenField\", Value=\"HiddenValue\" }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new CheckboxField { Checked = true, Id = "MyCheckbox", Label = "Check this", ErrorMessage = Translate("There is an error"), Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" } },
        CodeExample = "new CheckboxField { Checked = true, Id=\"MyCheckbox\", Label= \"Check this\", ErrorMessage= Translate(\"There is an error\") }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = checkboxListField,
        CodeExample = checkboxListFieldCodeExample
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new TextareaField { Id = "MyTextareaField", Label = Translate("Comment"), Rows = 4, Placeholder = Translate("Comment"), ErrorMessage = Translate("There is an error"), Link = new Link { Icon = new Icon { Name = "fa-info-circle", Prefix = "fal" }, Href = "#" } },
        CodeExample = "new TextareaField { Id = \"MyTextareaField\", Label = Translate(\"Comment\"), Rows = 4, Placeholder = Translate(\"Comment\"), ErrorMessage = Translate(\"There is an error\") }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        Name = "Table (Simple demo)",
        component = simpleTable,
        CodeExample = simpleTableCodeExample
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = table,
        CodeExample = simpleTableCodeExample
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new DashboardWidgetLink { Link = "#", Title = "My cart", BackgroundColor = "#002240", Icon = new Icon { Prefix = "fas", Name = "fa-shopping-cart" } },
        CodeExample = "new DashboardWidgetLink { Link = \"#\", Title = \"My cart\", BackgroundColor = \"#002240\", Icon = new Icon { Prefix = \"fas\", Name = \"fa-shopping-cart\" } }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new DashboardWidgetCounter { Count = 167, Title = "Products", BackgroundColor = "#002240", Icon = new Icon { Prefix = "fas", Name = "fa-shopping-cart" } },
        CodeExample = "new DashboardWidgetCounter { Count = 167, Title =\"Products\", BackgroundColor = \"#002240\", Icon = new Icon { Prefix = \"fas\", Name = \"fa-shopping-cart\" } }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = dashboard,
        CodeExample = dashboardCodeExample
    });
    GeneralComponentsList.Add(new DocItem
    {
        Name = "Dashboard (Counters)",
        component = dashboard2,
        CodeExample = dashboard2CodeExample
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new NotificationMessage { Message = Translate("There is an error"), MessageType = GetEnumSetting(NotificationMessageType.Error) },
        CodeExample = "new NotificationMessage { Message = Translate(\"There is an error\"), MessageType = GetEnumSetting(NotificationMessageType.Error) }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Rating { Score = 4, OutOf = 5, Type = GetEnumSetting(RatingType.Stars) },
        CodeExample = "new Rating { Score = 4, OutOf = 5, Type = GetEnumSetting(RatingType.Stars) }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Sticker { Title = "On sale", Style = GetEnumSetting(StickerStyle.Sale), Size = GetEnumSetting(StickerSize.Medium) },
        CodeExample = "new Sticker { Title = \"On sale\", Style = GetEnumSetting(StickerStyle.Sale), Size = GetEnumSetting(StickerSize.Medium) }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Text { Content = Translate("My text") },
        CodeExample = "new Text { Content = Translate(\"My text\") }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new ContentModule { Content = Translate("Add the module as a text string") },
        CodeExample = "new ContentModule { Content = Translate(\"Add the module as a text string\") }"
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = stickersCollection
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = formComponent
    });
    GeneralComponentsList.Add(new DocItem
    {
        component = new Modal { Id = "ModalTest", Heading = new Heading { Title = Translate("My text") }, BodyText = "To trigger a modal, simply force the associated checkbox to true with javascript. E.g. document.getElementById('ModalTestModalTrigger').value = true;", Height = ModalHeight.Md },
        CodeExample = "new Modal { Id = \"ModalTest\", Heading = new Heading { Title = Translate(\"My text\") }, BodyText = \"To trigger a modal, simply force the associated checkbox to true with javascript. E.g. document.getElementById('ModalTestModalTrigger').value = true;\", Height = ModalHeight.Md }"
    });

    <script>
        window.cartId = 530;
        document.addEventListener('addToCart', function (event) {
            console.log(event.detail)
            alert("Product added to cart: " + event.detail.quantity + " x " + event.detail.productInfo.name + " ( product id = " + event.detail.id + ", unit id = " + event.detail.unitId + ")");
        });
        window.selectedTestUnit = "";
        function selectTestUnit(unit) {
            window.selectedTestUnit = unit.getAttribute('data-value');
            unit.closest('.unit-selector').previousElementSibling.checked = false;
            unit.closest('.unit-selector').querySelector('.dropdown__header').innerText = unit.innerText;
        }
    </script>


    EcommerceComponentsList.Add(new DocItem
    {
        component = new AddToCart {
            AddButton = new AddToCartButton {
                ProductId = "PROD102", UnitId = "' + window.selectedTestUnit + '", ProductInfo = "{name: 'Test product'}"
            },
            UnitSelector = new UnitSelector {
                SelectedOption = "Select unit",
                OptionsContent = "<div class='dropdown__item dw-mod' onclick='selectTestUnit(this)' data-value=''>Select unit</div><div class='dropdown__item dw-mod' onclick='selectTestUnit(this)' data-value='VO53'>Piece</div><div class='dropdown__item dw-mod' onclick='selectTestUnit(this)' data-value='VO44'>Pkg. of 8</div>" },
            QuantitySelector = new QuantitySelector { } },
        CodeExample = "new AddToCart { AddButton = new AddToCartButton { ProductId = \"PROD102\", UnitId = \"VO53\", ProductInfo = \"{name: 'Test product'}\" }, UnitSelector = new UnitSelector { SelectedOption = \"Select unit\" }, QuantitySelector = new QuantitySelector { } }"
    });

    EcommerceComponentsList.Add(new DocItem
    {
        component = new UnitSelector { SelectedOption = "Select unit", OptionsContent = "<div class='dropdown__item dw-mod' onclick='alert(\"Unit selected\")'>Select unit</div><div class='dropdown__item dw-mod' onclick='alert(\"Unit selected\")'>Piece</div><div class='dropdown__item dw-mod' onclick='alert(\"Unit selected\")'>Test unit</div>" },
        CodeExample = "new UnitSelector { SelectedOption = \"All\", OptionsContent = \"<div class='dropdown__item dw-mod' onclick='**js event**'>Test unit</div>\" }"
    });

    EcommerceComponentsList.Add(new DocItem
    {
        component = new QuantitySelector { Id = "MyQuantitySelector", max = "MyQuantitySelectorMax", onkeyup = "MyQuantitySelectorOnKeyUp" },
        CodeExample = "new QuantitySelector { Id = \"MyQuantitySelector\", max = \"MyQuantitySelectorMax\", onkeyup = \"MyQuantitySelectorOnKeyUp\" }"
    });

    EcommerceComponentsList.Add(new DocItem
    {
        component = new AddToCartButton { ProductId = "PROD102", UnitId = "VO53", ProductInfo = "{name: 'Test product'}", QuantitySelectorId = "MyQuantitySelector", QuantitySelectorMax = "MyQuantitySelectorMax", QuantitySelectorOnKeyUp = "MyQuantitySelectorOnKeyUp" },
        CodeExample = "new AddToCartButton { ProductId = \"PROD102\", UnitId = \"VO53\", ProductInfo = \"{name: 'Test product'}\", QuantitySelectorId = \"MyQuantitySelector\", QuantitySelectorMax = \"MyQuantitySelectorMax\", QuantitySelectorOnKeyUp = \"MyQuantitySelectorOnKeyUp\" }"
    });

    EcommerceComponentsList.Add(new DocItem
    {
        component = variantMatrix
    });

    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleHeader { Heading = "Header clean layout", Author = "Me", ButtonLayout = GetEnumSetting(ButtonLayout.Primary), Category = "Guides", CategoryColor = "#c21212", Date = "01-01-2020", Image = new Image { Path = DummyImage, ImageDefault = new ImageSettings { Width = 1000, Height = 600, Crop = 1, Compression = 75 } }, Link = "#", LinkText = "Read more", Subheading = "This is new", TextLayout = GetEnumSetting(ArticleHeaderTextLayout.Center), Layout = GetEnumSetting(ArticleHeaderLayout.Clean) },
        CodeExample = " new ArticleHeader { Heading = \"Header clean layout\", Author = \"Me\", ButtonLayout = GetEnumSetting(ButtonLayout.Primary), Category = \"Guides\", CategoryColor = \"#c21212\", Date = \"01-01-2020\", Image = new Image { Path = DummyImage, ImageDefault = new ImageSettings { Width = 1000, Height = 600, Crop = 1, Compression = 75 } }, Link = \"#\", LinkText = \"Read more\", Subheading = \"This is new\", TextLayout = GetEnumSetting(ArticleHeaderTextLayout.Center), Layout = GetEnumSetting(ArticleHeaderLayout.Clean) }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleImage { Image = new Image { Path = DummyImage, ImageDefault = new ImageSettings { Height = 650, Width = 1300 }, Style = GetEnumSetting(ImageStyle.None), Title = "ComponentImage", Caption = "This is the caption for the image" } },
        CodeExample = "new ArticleImage { Image = new Image { Path = DummyImage, ImageDefault = new ImageSettings { Height = 650, Width = 1300 }, Style = GetEnumSetting(ImageStyle.None), Title = \"ComponentImage\", Caption = \"This is the caption for the image\" } }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleBanner { Image = new Image { Path = DummyImage, ImageDefault = new ImageSettings { Width = 1000, Height = 600, Crop = 1, Compression = 75 } }, Heading = "A perfect banner" },
        CodeExample = "new ArticleBanner { Image = new Image { Path = DummyImage, ImageDefault = new ImageSettings { Width = 1000, Height = 600, Crop = 1, Compression = 75 } }, Heading = \"A perfect banner\" }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleQuote { Author = "The user", Image = new Image { Path = DummyImage }, Text = "I would like to quote that this is so." },
        CodeExample = "new ArticleQuote { Author = \"The user\", Image = new Image { Path = DummyImage }, Text = \"I would like to quote that this is so.\" }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleSubHeader { Title = "My sub header" },
        CodeExample = "new ArticleSubHeader { Title = \"My sub header\" },"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleText { Text = "Normal body text..." },
        CodeExample = "new ArticleText { Text = \"Normal body text...\" }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleMenu { Items = new List<ArticleMenuItem>() { new ArticleMenuItem { Title = "Menu item" } } },
        CodeExample = "new ArticleMenu { Items = new List<ArticleMenuItem>() { new ArticleMenuItem { Title = \"Menu item\" } } }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleMenuItem { Title = "Menu item" },
        CodeExample = "new ArticleMenuItem { Title = \"Menu item\" }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleBodyRow { TextLayout = "left", TopLayout = "center" },
        CodeExample = "new ArticleBodyRow { TextLayout = \"left\", TopLayout = \"center\" }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleLink { Title = Translate("More"), OnClick = "#", ButtonLayout = ButtonLayout.Primary },
        CodeExample = "new ArticleLink { Title = Translate(\"More\"), OnClick = \"#\", ButtonLayout = ButtonLayout.Primary }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleSummary { Text = Translate("This is a summary") },
        CodeExample = "new ArticleSummary { Text = Translate(\"This is a summary\") }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleAuthorAndDate { Author = "Me", Date = "27-03-1984" },
        CodeExample = "new ArticleAuthorAndDate { Author = \"Me\", Date = \"27-03-1984\" }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleListSearch { },
        CodeExample = "new ArticleListSearch { }"
    });
    ArticleComponentsList.Add(new DocItem
    {
        component = new ArticleListFilter { Label = Translate("Filter") },
        CodeExample = "new ArticleListFilter { Label = Translate(\"Filter\") }"
    });

    GeneralComponentsList = GeneralComponentsList.OrderBy(x => x.component.HelperName).ToList();
    ArticleComponentsList = ArticleComponentsList.OrderBy(x => x.component.HelperName).ToList();
    EcommerceComponentsList = EcommerceComponentsList.OrderBy(x => x.component.HelperName).ToList();

    int itemCount = 0;

    ArticleMenu generalMenu = new ArticleMenu();
    generalMenu.Title = Translate("General components");
    foreach (DocItem docItem in GeneralComponentsList)
    {
        ArticleMenuItem item = new ArticleMenuItem();
        item.Title = String.IsNullOrEmpty(docItem.Name) ? docItem.component.HelperName.Replace("Render", "") : docItem.Name;
        item.OnClick = "event.preventDefault(); document.getElementById('Block__Component" + (itemCount + 10) + "').scrollIntoView();";
        generalMenu.Items.Add(item);

        itemCount++;
    }

    ArticleMenu ecommerceMenu = new ArticleMenu();
    ecommerceMenu.Title = Translate("Ecommerce components");
    foreach (DocItem docItem in EcommerceComponentsList)
    {
        ArticleMenuItem item = new ArticleMenuItem();
        item.Title = String.IsNullOrEmpty(docItem.Name) ? docItem.component.HelperName.Replace("Render", "") : docItem.Name;
        item.OnClick = "event.preventDefault(); document.getElementById('Block__Component" + (itemCount + 10) + "').scrollIntoView();";
        ecommerceMenu.Items.Add(item);

        itemCount++;
    }

    ArticleMenu articleMenu = new ArticleMenu();
    articleMenu.Title = Translate("Article components");
    foreach (DocItem docItem in ArticleComponentsList)
    {
        ArticleMenuItem item = new ArticleMenuItem();
        item.Title = String.IsNullOrEmpty(docItem.Name) ? docItem.component.HelperName.Replace("Render", "") : docItem.Name;
        item.OnClick = "event.preventDefault(); document.getElementById('Block__Component" + (itemCount + 10) + "').scrollIntoView();";
        articleMenu.Items.Add(item);

        itemCount++;
    }
}

@{
    Block site = new Block
    {
        Id = "SiteContainer",
        SortId = 10,
        Design = new Design
        {
            RenderType = RenderType.Row
        },
        BlocksList = new List<Block> {
            new Block {
                Id = "EmptyColumn",
                SortId = 30,
                Design = new Design
                {
                    RenderType = RenderType.Column,
                    Size = "3"
                }
            },
            new Block {
                Id = "Main",
                SortId = 40,
                Design = new Design
                {
                    RenderType = RenderType.Column,
                    Size = "9"
                },
                BlocksList = new List<Block> {
                    new Block {
                        Id = "MainRow",
                        SortId = 20,
                        Design = new Design
                        {
                            RenderType = RenderType.Row
                        }
                    }
                }
            }
        }
    };
    componentsDocPage.Add(site);

    if (Pageview.Device.ToString() != "Mobile")
    {
        Block navigationBlock = new Block
        {
            Id = "Navigation",
            SortId = 10,
            Design = new Design
            {
                CssClass = "fixed-doc-navigation"
            },
            BlocksList = new List<Block> {
                new Block {
                    Id = "Search",
                    SortId = 10,
                    Component = new TextField { Placeholder = Translate("Search"), CssClass = "u-margin", OnKeyUp = "FilterComponents(event);" },
                    Design = new Design {
                        CssClass = "fixed-doc-navigation-search"
                    }
                },
                new Block {
                    Id = "NavigationContainer",
                    SortId = 20,
                    Design = new Design {
                        CssClass = "fixed-doc-navigation-container"
                    },
                    BlocksList = new List<Block> {
                        new Block {
                            Id = "GeneralComponents",
                            SortId = 20,
                            Component = generalMenu
                        },
                        new Block {
                            Id = "EcommerceComponents",
                            SortId = 30,
                            Component = ecommerceMenu
                        },
                        new Block {
                            Id = "GeneralComponents",
                            SortId = 40,
                            Component = articleMenu
                        }
                    }
                }
            }
        };
        componentsDocPage.Add("Main", navigationBlock);
    }

    Block pageHeader = new Block
    {
        Id = "PageHeader",
        SortId = 0,
        Component = new Heading { Level = 1, Title = Translate("Components documentation") },
        Design = new Design
        {
            RenderType = RenderType.Column,
            Size = "12"
        }
    };
    componentsDocPage.Add("MainRow", pageHeader);

    Block pageInfo = new Block
    {
        Id = "PageInfo",
        SortId = 1,
        Template = RenderPageInfo(),
        Design = new Design
        {
            RenderType = RenderType.Column,
            Size = "12",
        }
    };
    componentsDocPage.Add("MainRow", pageInfo);

    Block pageToTop = new Block
    {
        Id = "BackToTop",
        SortId = 5,
        Component = new Button { Id = "ScrollToTopBtn", OnClick = "window.scroll(0, 0);", Icon = new Icon { Prefix = "fas", Name = "fa-arrow-circle-up" }, CssClass = "doc-to-top-btn" }
    };
    componentsDocPage.Add("SiteContainer", pageToTop);

    BuildComponents(GeneralComponentsList);
    BuildComponents(EcommerceComponentsList);
    BuildComponents(ArticleComponentsList);
}

@functions {
    public void BuildComponents(List<DocItem> componentsList)
    {
        foreach (DocItem docItem in componentsList)
        {
            Block componentNameBlock = new Block
            {
                Id = "Component" + count,
                SortId = 10 * count,
                Component = new ArticleSubHeader { Title = "Helper method: " + docItem.component.HelperName },
                Design = new Design
                {
                    RenderType = RenderType.Column,
                    Size = "12",
                    CssClass = "u-border"
                }
            };
            componentsDocPage.Add("MainRow", componentNameBlock);

            Block componentBlock = new Block
            {
                Id = "ComponentContainer" + count,
                SortId = (10 * count) + 1,
                Design = new Design
                {
                    RenderType = RenderType.Column,
                    Size = "12",
                    CssClass = "u-border"
                },
                BlocksList = new List<Block> {
                    new Block {
                        Id = "Component" + count,
                        SortId = 10,
                        Component = docItem.component,
                        Design = new Design { CssClass= "grid__cell" }
                    }
                }
            };
            componentsDocPage.Add("MainRow", componentBlock);

            Block componentInfoBlock = new Block
            {
                Id = "ComponentInfo" + count,
                SortId = (10 * count) + 2,
                Component = new ComponentInfo { Content = docItem.component },
                Design = new Design
                {
                    RenderType = RenderType.Column,
                    Size = "4",
                    CssClass = "js-component-info"
                }
            };
            componentsDocPage.Add("MainRow", componentInfoBlock);

            if (docItem.component.HelperName != "RenderTextareaField")
            {
                Block componentCodeBlock = new Block
                {
                    Id = "ComponentCode" + count,
                    SortId = (10 * count) + 3,
                    Component = new ComponentCode { Content = docItem },
                    Design = new Design
                    {
                        RenderType = RenderType.Column,
                        Size = "8"
                    }
                };
                componentsDocPage.Add("MainRow", componentCodeBlock);
            }
            else
            {
                Block componentCodeBlock = new Block
                {
                    Id = "ComponentCode" + count,
                    SortId = (10 * count) + 3,
                    Component = new NotificationMessage { Message = Translate("Code preview is not available for this component") },
                    Design = new Design
                    {
                        RenderType = RenderType.Column,
                        Size = "8"
                    }
                };
                componentsDocPage.Add("MainRow", componentCodeBlock);
            }

            Block componentSpacingBlock = new Block
            {
                Id = "ComponentSpacing" + count,
                SortId = (10 * count) + 4,
                Design = new Design
                {
                    RenderType = RenderType.Column,
                    Size = "12",
                    CssClass = "u-padding-bottom--lg"
                }
            };
            componentsDocPage.Add("MainRow", componentSpacingBlock);

            count++;
        }
    }
}

<link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/codemirror/codemirror.css">
<link rel="stylesheet" href="/Files/Templates/Designs/Rapido/css/codemirror/cobalt.css">
<script src="/Files/Templates/Designs/Rapido/js/codemirror/codemirror.js"></script>
<script src="/Files/Templates/Designs/Rapido/js/codemirror/xml.js"></script>
<script src="/Files/Templates/Designs/Rapido/js/codemirror/clike.js"></script>
<script src="/Files/Templates/Designs/Rapido/js/codemirror/coffeescript.js"></script>

<script>
    FilterComponents = function (e) {
        var currentFilter = e.currentTarget;
        var searchString = currentFilter.value.toLowerCase();
        var menuItems = document.querySelectorAll('.menu-left__link');

        menuItems.forEach(function (menuItem) {
            menuItem.parentNode.classList.add("u-hidden");
        });

        menuItems.forEach(function (menuItem) {
            var filterValue = menuItem.innerHTML.toLowerCase();

            console.log(searchString);
            console.log(filterValue);

            if (filterValue.indexOf(searchString) != -1) {
                menuItem.parentNode.classList.remove("u-hidden");
            }
        });
    }
</script>

@helper RenderPageInfo()
{
    <p>
        @Translate("This page contains an overview + examples on all available components on the current solution.")
        @Translate("The code for the components are found in /Templates/Designs/Rapido/Components.")
    </p>

    @Render(new Link { Title = Translate("How to overwrite existing components"), Href = "https://doc.dynamicweb.com/rapido/development/blocks/example-8-components#sideNavTitle1-4", ButtonLayout = ButtonLayout.Link, CssClass = "u-ta-left u-no-padding", Icon = new Icon { Prefix = "fas", Name = "fa-link", LabelPosition = IconLabelPosition.After }, Target = LinkTargetType.Blank })
    @Render(new Link { Title = Translate("How to write your own components"), Href = "https://doc.dynamicweb.com/rapido/development/blocks/example-8-components#sideNavTitle1-5", ButtonLayout = ButtonLayout.Link, CssClass = "u-ta-left u-no-padding", Icon = new Icon { Prefix = "fas", Name = "fa-link", LabelPosition = IconLabelPosition.After }, Target = LinkTargetType.Blank })
    @Render(new Link { Title = Translate("The detailed Components documentation"), Href = "https://doc.dynamicweb.com/rapido/development/blocks/example-8-components", ButtonLayout = ButtonLayout.Link, CssClass = "u-ta-left u-no-padding", Icon = new Icon { Prefix = "fas", Name = "fa-link", LabelPosition = IconLabelPosition.After }, Target = LinkTargetType.Blank })
    @Render(new Link { Title = Translate("The detailed Blocks documentation"), Href = "https://doc.dynamicweb.com/rapido/development/blocks/introduction-quickstart", ButtonLayout = ButtonLayout.Link, CssClass = "u-ta-left u-no-padding", Icon = new Icon { Prefix = "fas", Name = "fa-link", LabelPosition = IconLabelPosition.After }, Target = LinkTargetType.Blank })

    <br />
    <br />
}

@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(componentsDocPage.BlocksRoot.BlocksList)


<script>
    document.addEventListener("DOMContentLoaded", function (event) {
        if (QueryArray.getParameterFromCurrentURL("scrollToId")) {
            document.getElementById(QueryArray.getParameterFromCurrentURL("scrollToId")).scrollIntoView();
            window.scrollBy(0, -200);
        }
    });

    CopyCode = function (targetArea) {
        targetArea.style.display = "block";
        targetArea.innerHTML = targetArea.innerHTML.replace("-newline", "");
        targetArea.select();
        document.execCommand('copy');
        targetArea.style.display = "none";
    }

    document.addEventListener("scroll", function () {
        var scrollPos = document.documentElement.scrollTop || document.body.scrollTop;

        if (scrollPos > 500) {
            document.getElementById("ScrollToTopBtn").style.display = "block";
        } else {
            document.getElementById("ScrollToTopBtn").style.display = "none";
        }
    });
</script>



@SnippetEnd("Content")

</html>
