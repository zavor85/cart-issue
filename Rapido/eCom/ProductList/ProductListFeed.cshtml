@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Web;
@using System.Linq;
@using Dynamicweb.Configuration;
@using Dynamicweb.Core;
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Services

@Include("../Stickers.cshtml")
@Include("../../GetProductImage.cshtml")

@{
    string feedType = HttpContext.Current.Request.QueryString.Get("feedtype");
    string sortBy = HttpContext.Current.Request.QueryString.Get("SortBy");
    string sortOrder = HttpContext.Current.Request.QueryString.Get("SortOrder");
    int pageNum = Converter.ToInt32(HttpContext.Current.Request.QueryString.Get("pagenum"));
    int pageSize = !string.IsNullOrEmpty(HttpContext.Current.Request["pagesize"]) ? Converter.ToInt32(HttpContext.Current.Request.QueryString.Get("pagesize")) : Converter.ToInt32(GetString("Ecom:ProductList.PageSize"));
    string searchParameter = !string.IsNullOrEmpty(HttpContext.Current.Request["Search"]) ? HttpContext.Current.Request.QueryString.Get("Search") : "";
    bool expressBuy = Converter.ToBoolean(HttpContext.Current.Request["ExpressBuy"]);
    string groupId = !string.IsNullOrEmpty(HttpContext.Current.Request["GroupID"]) ? HttpContext.Current.Request.QueryString.Get("GroupID") : "";
    string groupName = !string.IsNullOrEmpty(HttpContext.Current.Request["GroupName"]) ? HttpContext.Current.Request.QueryString.Get("GroupName") : "";
    string template = !string.IsNullOrEmpty(HttpContext.Current.Request["Template"]) ? HttpContext.Current.Request.QueryString.Get("Template") : "SearchProductsTemplate";
    string quickAddFavoriteListId = HttpContext.Current.Request["QuickAddFavoriteListId"];
    bool isLoadMore = !string.IsNullOrEmpty(HttpContext.Current.Request["pagenum"]);
    bool isCombinedSearch = HttpContext.Current.Request.QueryString.Get("searchType") == "combined";
    bool pointShopOnly = Pageview.AreaSettings.GetItem("Ecommerce").GetBoolean("PointShopOnly");
    bool useFacebookPixel = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("FacebookPixelID"));
    bool useGoogleTagManager = !string.IsNullOrEmpty(Pageview.AreaSettings.GetItem("Settings").GetString("GoogleTagManagerID"));
    string listId = HttpContext.Current.Request.QueryString.Get("ListID");

    //Layout
    Dictionary<string, bool> views = new Dictionary<string, bool>()
    {
        { "ProductItemContainer", Pageview.AreaSettings.GetItem("ProductList").GetBoolean("EnableListView") },
        { "ProductGridItemContainer", Pageview.AreaSettings.GetItem("ProductList").GetBoolean("EnableGridView") },
        { "ProductDetailsItemContainer", Pageview.AreaSettings.GetItem("ProductList").GetBoolean("EnableDetailsView") },
        { "ProductTilesViewContainer", Pageview.AreaSettings.GetItem("ProductList").GetBoolean("EnableTilesView") }
    };
    string listCookie = HttpContext.Current.Request.Cookies["ProductsContainerTemplate"] != null ? HttpContext.Current.Request.Cookies["ProductsContainerTemplate"].Value : "";
    string defaultView = Pageview.AreaSettings.GetItem("ProductList").GetList("DefaultListView") != null ? Pageview.AreaSettings.GetItem("ProductList").GetList("DefaultListView").SelectedValue : "";
    string listMode = "";
    if (!string.IsNullOrEmpty(listCookie) && (!views.ContainsKey(listCookie) || views[listCookie]))
    {
        //if it's custom mode or
        //if cookie mode is available in settings
        listMode = listCookie;
    }
    else if (!string.IsNullOrEmpty(defaultView) && views[defaultView])
    {
        //if default mode is available in settings
        listMode = defaultView;
    }
    else
    {
        //get any available mode or standart ProductItemContainer
        listMode = views.FirstOrDefault(x => x.Value).Key ?? "ProductItemContainer";
    }

    int defaultFacetsState = Pageview.AreaSettings.GetItem("ProductList").GetList("OpenFacetGroups") != null ? Converter.ToInt32(Pageview.AreaSettings.GetItem("ProductList").GetList("OpenFacetGroups").SelectedValue) : 1000;
}

@functions {
    public class FacetSelection
    {
        public string template { get; set; }
        public string group { get; set; }
        public string name { get; set; }
        public string label { get; set; }
        public string value { get; set; }
        public string queryParameter { get; set; }
    }

    public class FacetOption
    {
        public string template { get; set; }
        public string name { get; set; }
        public string value { get; set; }
        public string queryParameter { get; set; }
        public string label { get; set; }
        public string count { get; set; }
        public string disabled { get; set; }
        public string selected { get; set; }
    }

    public class FacetGroup
    {
        public string counter { get; set; }
        public string name { get; set; }
        public string defaultState { get; set; }
        public string showFilter { get; set; }
        public List<FacetOption> FacetOptions { get; set; }
    }

    public class VariantSelectionName
    {
        public string name { get; set; }
    }

    public class Combi
    {
        public string id { get; set; }
    }

    public class VariantOption
    {
        public string id { get; set; }
        public string variantId { get; set; }
        public string productId { get; set; }
        public string template { get; set; }
        public string name { get; set; }
        public string groupId { get; set; }
        public string selected { get; set; }
        public string disabled { get; set; }
        public string color { get; set; }
        public string image { get; set; }
    }

    public class Variant
    {
        public string id { get; set; }
        public string name { get; set; }
        public bool isFirstGroup { get; set; }
        public List<VariantOption> VariantOptions { get; set; }
    }

    public class FavoriteItem
    {
        public int listId { get; set; }
        public string name { get; set; }
        public string addLink { get; set; }
        public string removeLink { get; set; }
        public bool isInFavoriteList { get; set; }
        public string facebookPixelAddAction { get; set; }
    }

    public class Favorite
    {
        public string id { get; set; }
        public bool isInAnyFavoriteList { get; set; }
        public List<FavoriteItem> FavoriteLists { get; set; }
    }

    public class CustomField
    {
        public string name { get; set; }
        public string value { get; set; }
    }

    public class Unit
    {
        public string value { get; set; }
        public string name { get; set; }
        public string link { get; set; }
    }

    public class Product
    {
        public string id { get; set; }
        public string template { get; set; }
        public string productId { get; set; }
        public string zIndex { get; set; }
        public string name { get; set; }
        public string number { get; set; }
        public string price { get; set; }
        public double priceDouble { get; set; }
        public string priceWithVAT { get; set; }
        public string priceWithoutVAT { get; set; }
        public string priceRRP { get; set; }
        public double points { get; set; }
        public bool havePointPrice { get; set; }
        public bool canBePurchasedWithPoints { get; set; }
        public string disabledBuyButton { get; set; }
        public string discount { get; set; }
        public string stockState { get; set; }
        public string stockText { get; set; }
        public string outOfStock { get; set; }
        // For stock matrix
        public int stockLocationId { get; set; }    
        public double stockLocationsTotalQuantity { get; set; }
        public double stockCurrentLocationsQuantity { get; set; }
        public string stockCurrentLocationsQuantityMax5 { get; set; }
        public double CurrentLocationPriceWithVAT { get; set; }
        public double CurrentLocationPriceWithoutVAT { get; set; }
        public string CurrentLocationPrice { get; set; }
        
        public string deliveryText { get; set; }
        public string link { get; set; }
        public string variantid { get; set; }
        public string description { get; set; }
        public string onSale { get; set; }
        public string image { get; set; }
        public string secondaryImage { get; set; }
        public string noImage { get; set; }
        public string hasVariants { get; set; }
        public string hideHelpText { get; set; }
        public string hideViewMore { get; set; }
        public string viewMoreText { get; set; }
        public bool hideAddToCartButton { get; set; }
        public string hasUnits { get; set; }
        public bool hasOnlyOneUnit { get; set; }
        public string variantName { get; set; }

        public string facebookPixelAction { get; set; }
        public string googleImpression { get; set; }
        public string googleImpressionClick { get; set; }
        public string productInfo { get; set; }

        public string unitName { get; set; }
        public string unitId { get; set; }
        public string groupId { get; set; }
        public string searchParameter { get; set; }
        public string stickToBottom { get; set; } //for combined search
        public string currency { get; set; }
        public List<Unit> unitOptions { get; set; }
        public List<Favorite> Favorite { get; set; }
        public List<Combi> Combinations { get; set; }
        public List<Variant> Variants { get; set; }
        public List<StickersCollection> StickersContainers { get; set; }
        public List<CustomField> CustomFields { get; set; }
        public List<VariantSelectionName> VariantSelectionNames { get; set; }
        public int variantGroupsCount { get; set; }
        public string combinationsStringArray { get; set; }
        public string variantsStringArray { get; set; }
        public string variantSelections { get; set; }

        //Quick add
        public string quickAddToFavoritesLink { get; set; }
        public string quickRemoveFromFavoritesLink { get; set; }
    }

    public class ProductsContainer
    {
        public string template { get; set; }
        public string id { get; set; }
        public List<Product> Product { get; set; }
    }

    public class Root
    {
        public string listTemplate { get; set; }
        public string groupName { get; set; }
        public string groupDescription { get; set; }
        public string groupPromotionImage { get; set; }
        public string groupPromotionLink { get; set; }
        public string groupPromotionLinkText { get; set; }
        public string currentPage { get; set; }
        public string totalPages { get; set; }
        public string pageSize { get; set; }
        public int pageSizeText { get; set; }
        public string header { get; set; }
        public string selectedSort { get; set; }
        public string prevdisabled { get; set; }
        public string nextdisabled { get; set; }
        public string prevPage { get; set; }
        public string nextPage { get; set; }
        public string loadMoreFeedParams { get; set; }
        public List<ProductsContainer> ProductsContainer { get; set; }
        public List<FacetGroup> FacetGroups { get; set; }
        public List<FacetSelection> FacetSelections { get; set; }
        public List<CustomField> AvailableCustomFields { get; set; }
    }

    public class GoogleImpression
    {
        public string name { get; set; }
        public string id { get; set; }
        public double price { get; set; }
        public string brand { get; set; }
        public string category { get; set; }
        public string variant { get; set; }
        public string list { get; set; }
        public string url { get; set; }
        public string currency { get; set; }
        public int position { get; set; }
    }

    public class FacebookAction
    {
        public string content_name { get; set; }
        public List<string> content_ids { get; set; }
        public string content_type { get; set; }
        public double value { get; set; }
        public string currency { get; set; }
    }
}

@{
    List<Root> feedObject = new List<Root>();
    List<ProductsContainer> productFeedObject = new List<ProductsContainer>();

    string pageName = GetString("Ecom:Group.Name") != "" ? GetString("Ecom:Group.Name") : Translate("Products");
    string listHeader = HttpContext.Current.Request.QueryString.Get("Search") != null ? Translate("Search result for") + " \"" + HttpContext.Current.Request.QueryString.Get("Search") + "\" : " : pageName;
    listHeader = HttpContext.Current.Request.QueryString.Get("ListName") != null ? HttpContext.Current.Request.QueryString.Get("ListName") : listHeader;
    listHeader += "<span class=\"product-list-products-counter dw-mod\">(" + GetString("Ecom:ProductList.PageProdCnt") + " " + Translate("results") + ")</span>";

    Dictionary<string, string> Sorts = new Dictionary<string, string>()
    {
        {"CreatedDESC", Translate("Newest")},
        {"NameForSortASC", Translate("Name A - Z")},
        {"NameForSortDESC", Translate("Name Z - A")},
        {"PriceDESC", Translate("Price high - low")},
        {"PriceASC", Translate("Price low - high")}
    };

    Root feedRoot = new Root();
    feedRoot.listTemplate = listMode;
    feedRoot.groupName = !string.IsNullOrEmpty(GetString("Ecom:Group.Name")) ? GetString("Ecom:Group.Name") : groupName;
    feedRoot.groupDescription = GetString("Ecom:Group.Description");
    feedRoot.groupPromotionImage = GetString("Ecom:Group:Field.ctaImage.Clean");
    feedRoot.groupPromotionLink = GetString("Ecom:Group:Field.ctaLink");
    feedRoot.groupPromotionLinkText = GetString("Ecom:Group:Field.ctaLinkText");
    feedRoot.groupDescription = GetString("Ecom:Group.Description");
    feedRoot.currentPage = GetString("Ecom:ProductList.CurrentPage");
    feedRoot.totalPages = GetString("Ecom:ProductList.TotalPages");
    feedRoot.pageSize = GetString("Ecom:ProductList.PageSize");
    feedRoot.pageSizeText = GetInteger("Ecom:ProductList.CurrentPage") != GetInteger("Ecom:ProductList.TotalPages") - 1 ? GetInteger("Ecom:ProductList.PageSize") : GetInteger("Ecom:ProductList.PageProdCnt") - (GetInteger("Ecom:ProductList.PageSize") * (GetInteger("Ecom:ProductList.TotalPages") - 1));
    feedRoot.header = listHeader;
    feedRoot.selectedSort = Sorts.ContainsKey(sortBy + sortOrder) ? Sorts[sortBy + sortOrder] : Translate("Default");
    feedRoot.prevdisabled = string.IsNullOrWhiteSpace(GetString("Ecom:ProductList.PrevPage.Clean")) ? "u-hidden" : "";
    feedRoot.nextdisabled = string.IsNullOrWhiteSpace(GetString("Ecom:ProductList.NextPage.Clean")) ? "u-hidden" : "";
    feedRoot.prevPage = GetString("Ecom:ProductList.PrevPage.Clean");
    feedRoot.nextPage = GetString("Ecom:ProductList.NextPage.Clean");
    feedRoot.loadMoreFeedParams = "&SortBy=" + sortBy + "&SortOrder=" + sortOrder;
    feedRoot.ProductsContainer = new List<ProductsContainer>();
    feedRoot.AvailableCustomFields = new List<CustomField>();
    var filledVariantCustomField = new HashSet<string>();
    var availableCustomFieldsHash = new HashSet<string>();

    //PRODUCTS
    int zIndex = GetLoop("Products").Count;
    int count = 0;

    if (pageNum > 1)
    {
        count = (pageSize - 1) * pageNum;
    }

    foreach (LoopItem product in GetLoop("Products"))
    {
        zIndex--;
        count++;
        bool isFamilyMember = false;
        bool isFamilyMaster = false;

        var uniqueId = Guid.NewGuid().ToString("N");

        ProductsContainer productsContainerObject = new ProductsContainer();
        productsContainerObject.template = listMode;
        productsContainerObject.id = uniqueId;
        productsContainerObject.Product = new List<Product>();

        Product productObject = new Product();

        var variantGroups = product.GetLoop("VariantGroups");
        bool hasVariants = variantGroups.Count > 0;

        productObject.template = template;
        productObject.id = uniqueId;
        productObject.productId = product.GetString("Ecom:Product.ID");
        productObject.zIndex = zIndex.ToString();
        productObject.name = product.GetString("Ecom:Product.Name");
        productObject.number = product.GetString("Ecom:Product.Number");
        if (expressBuy && productObject.number == "")
        {
            continue;
        }
        productObject.price = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Discount.Price.PriceFormatted") : product.GetString("Ecom:Product.Price.PriceFormatted");
        productObject.price = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.price : "0";
        productObject.priceWithoutVAT = product.GetString("Ecom:Product.Discount.Price.PriceWithoutVATFormatted");
        productObject.priceWithoutVAT = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.priceWithoutVAT : "0";
        productObject.priceWithVAT = product.GetString("Ecom:Product.Discount.Price.PriceWithVATFormatted");
        productObject.priceWithVAT = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.priceWithVAT : "0";
        productObject.priceDouble = product.GetDouble("Ecom:Product.Discount.Price.Price") != product.GetDouble("Ecom:Product.Price.Price") ? product.GetDouble("Ecom:Product.Discount.Price.Price") : product.GetDouble("Ecom:Product.Price.Price");
        productObject.priceDouble = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.priceDouble : 0;
        productObject.priceRRP = !String.IsNullOrEmpty(product.GetString("Ecom:Product.InformativePrice")) ? product.GetString("Ecom:Product.InformativePrice") : "";
        productObject.priceRRP = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.priceRRP : "0";
        productObject.discount = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Price.PriceFormatted") : "";
        productObject.discount = Dynamicweb.Rapido.Services.User.IsPricesAllowed() ? productObject.discount : "";
        productObject.points = product.GetDouble("Ecom:Product.PointPrice");
        productObject.havePointPrice = productObject.points != 0;
        var user = Dynamicweb.Security.UserManagement.User.get_Current(Dynamicweb.Security.UserManagement.PagePermissionLevels.Frontend);
        if (user != null)
        {
            var availablePoints = user.PointBalance;
            var cart = Dynamicweb.Ecommerce.Common.Context.Cart;
            var pointsUsedInCart = cart != null ? cart.TotalPoints : 0;
            productObject.canBePurchasedWithPoints = productObject.points > 0 && availablePoints - pointsUsedInCart >= productObject.points;
        }
        productObject.onSale = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") == product.GetString("Ecom:Product.Price.PriceFormatted") ? "u-hidden" : "";
        
//        productObject.stockState = product.GetInteger("Ecom:Product.Stock") > 0 ? "stock-icon--in" : "stock-icon--not";
//        productObject.stockText = product.GetString("Ecom:Product:Stock.Text");
//        productObject.outOfStock = product.GetInteger("Ecom:Product.Stock") <= 0 ? "disabled" : "";
        
    // StockUnits
  @*  if(productObject.name.ToLower().Contains("electrolux") ||
       productObject.name.ToLower().Contains("aeg") ||
       productObject.name.ToLower().Contains("voss") ||
       productObject.name.ToLower().Contains("siemens") ||
       productObject.name.ToLower().Contains("bosch") ||
       productObject.name.ToLower().Contains("zanussi"))
    {*@
        productObject.stockState = product.GetLoop("StockUnits")[0].GetDouble("Ecom:StockUnit.TotalQuantity") > 0 ? "stock-icon--in" : "stock-icon--not";
        productObject.stockText = $"{(product.GetLoop("StockUnits")[0].GetDouble("Ecom:StockUnit.TotalQuantity") > 2 ? "På lager" : product.GetLoop("StockUnits")[0].GetDouble("Ecom:StockUnit.TotalQuantity") <= 2 && product.GetLoop("StockUnits")[0].GetDouble("Ecom:StockUnit.TotalQuantity") > 0 ? "Få tilbage" : "Ikke på lager")}";
        productObject.outOfStock = product.GetLoop("StockUnits")[0].GetDouble("Ecom:StockUnit.TotalQuantity") <= 0 ? "disabled" : "";
        productObject.stockLocationsTotalQuantity = product.GetLoop("StockUnits")[0].GetDouble("Ecom:StockUnit.TotalQuantity");
        
        // Stock Locations
        if (product.GetLoop("StockLocations")[0] != null)
        {
            Dictionary<int, double> stockLocationDictionary = new Dictionary<int, double>();
            foreach (var stock in product.GetLoop("StockLocations"))
            {
                stockLocationDictionary.Add(stock.GetInteger("Ecom:StockLocation.ID"), stock.GetDouble("Ecom:StockLocation.Quantity"));
            }
            if (stockLocationDictionary[4] > 0) // 4 Local lager
            {
                productObject.stockLocationId = 4; 
            }
            if (stockLocationDictionary[4] == 0 && stockLocationDictionary[3] > 0) // 3 Fjernlager
            {
                productObject.stockLocationId = 3;
            }
        }
        
		foreach(LoopItem SL in product.GetLoop("StockLocations")){
			if(productObject.stockLocationId == SL.GetInteger("Ecom:StockLocation.ID")){
				productObject.stockCurrentLocationsQuantity = SL.GetDouble("Ecom:StockLocation.Quantity");
			}
//			if(productObject.stockCurrentLocationsQuantity <= 5 && productObject.stockCurrentLocationsQuantity > 0){
//				productObject.stockCurrentLocationsQuantityMax5 = productObject.stockCurrentLocationsQuantity.ToString();
//			}
            if(productObject.stockCurrentLocationsQuantity <= 10 && productObject.stockCurrentLocationsQuantity > 0){
                productObject.stockCurrentLocationsQuantityMax5 = productObject.stockCurrentLocationsQuantity.ToString();
            }else{productObject.stockCurrentLocationsQuantityMax5 = "10";}
        
		}
        
    @*}
    else
    {
        productObject.stockState = product.GetInteger("Ecom:Product.Stock") > 0 ? "stock-icon--in" : "stock-icon--not";
        productObject.stockText = product.GetString("Ecom:Product:Stock.Text");
        productObject.outOfStock = product.GetInteger("Ecom:Product.Stock") <= 0 ? "disabled" : "";

    }
    *@        
        
        
        
// Price matrix for stock Location
string VariId = product.GetString("Ecom:Product.VariantID");
double VATpercent = product.GetDouble("Ecom:Product.Price.VATPercent");
Dynamicweb.Ecommerce.Products.ProductService productService = new Dynamicweb.Ecommerce.Products.ProductService();
var thisproduct = productService.GetProductById(productObject.productId, VariId, "LANG2");
foreach(var price in thisproduct.Prices){
    if(price.StockLocationId == productObject.stockLocationId){
        if(price.IsWithVat){
            productObject.CurrentLocationPriceWithVAT = price.Amount;
            productObject.CurrentLocationPriceWithoutVAT = price.Amount/((100+VATpercent)/100);
        }else{
            productObject.CurrentLocationPriceWithVAT = price.Amount*((100+VATpercent)/100);
            productObject.CurrentLocationPriceWithoutVAT = price.Amount;
        }
   }
}
if(productObject.CurrentLocationPriceWithVAT>0){
    productObject.CurrentLocationPrice = productObject.CurrentLocationPriceWithVAT.ToString("C");  
    productObject.price = productObject.CurrentLocationPriceWithVAT.ToString("C");
    productObject.priceWithVAT = productObject.CurrentLocationPriceWithVAT.ToString("C");
    productObject.priceWithoutVAT = productObject.CurrentLocationPriceWithoutVAT.ToString("C");
}
        
        
        
        
        
        
        productObject.deliveryText = !string.IsNullOrEmpty(product.GetString("Ecom:Product:Stock.DeliveryText")) ? Translate("Delivery") + " " + product.GetString("Ecom:Product:Stock.DeliveryText") + " " + product.GetString("Ecom:Product:Stock.DeliveryUnit") : "";
        productObject.variantid = !string.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? product.GetString("Ecom:Product.VariantID") : product.GetString("Ecom:Product.VariantID.Extented");
        productObject.description = product.GetString("Ecom:Product.ShortDescription");
        productObject.image = System.Web.HttpContext.Current.Server.UrlEncode(GetProductImage(product));
        productObject.noImage = string.IsNullOrEmpty(GetProductImage(product)) ? "u-hidden" : "";
        productObject.hasVariants = hasVariants ? "disabled" : "";
        productObject.hideAddToCartButton = hasVariants && string.IsNullOrEmpty(productObject.variantid);
        productObject.hideViewMore = hasVariants ? "" : "u-hidden";
        productObject.hasUnits = product.GetLoop("Units").Count > 0 ? "" : "u-hidden";
        productObject.hasOnlyOneUnit = product.GetLoop("Units").Count == 1;
        productObject.currency = product.GetString("Ecom:Product.Price.Currency.Code");
        productObject.variantName = product.GetString("Ecom:Product.SelectedVariantComboName");

        productObject.secondaryImage = product.GetLoop("Ecom:Product.AlternativeImages").FirstOrDefault(im => !string.IsNullOrEmpty(im.GetString("Ecom:Product.AlternativeImages.Image"))) != null ? product.GetLoop("Ecom:Product.AlternativeImages").FirstOrDefault(im => !string.IsNullOrEmpty(im.GetString("Ecom:Product.AlternativeImages.Image"))).GetString("Ecom:Product.AlternativeImages.Image") : String.Empty;

        List<string> facebookPixelContentIds = null;
        if (useFacebookPixel)
        {
            facebookPixelContentIds = new List<string>(new string[] { product.GetString("Ecom:Product.Number") });
            productObject.searchParameter = searchParameter;

            //Pixel
            FacebookAction facebookPixelAction = new FacebookAction()
            {
                content_name = productObject.name,
                content_ids = facebookPixelContentIds,
                content_type = "product",
                value = productObject.priceDouble,
                currency = productObject.currency
            };
            productObject.facebookPixelAction = "fbq('track', 'AddToCart', " + Newtonsoft.Json.JsonConvert.SerializeObject(facebookPixelAction) + ");";
        }

        productObject.StickersContainers = GetStickersContainersList(
            product.GetLoop("ProductDiscounts"),
            product.GetDouble("Ecom:Product.Discount.Price.Price"),
            product.GetDouble("Ecom:Product.Price.Price"),
            product.GetDate("Ecom:Product.Created"),
            product.GetString("Ecom:Product:Field.CustomSticker.Value")
        );

        //is family member?
        if (variantGroups.Count == 1)
        {
            var firstVariantGroup = Dynamicweb.Ecommerce.Services.VariantGroups.GetVariantGroup(Dynamicweb.Ecommerce.Common.Context.LanguageID, variantGroups[0]?.GetString("Ecom:VariantGroup.ID"));
            if (firstVariantGroup != null)
            {
                if (firstVariantGroup.Family)
                {
                    isFamilyMember = true;
                    productObject.variantName = "";
                    if (string.IsNullOrEmpty(productObject.variantid))
                    {
                        productObject.disabledBuyButton = "disabled";
                        productObject.hideAddToCartButton = true;
                        isFamilyMaster = true;
                        productObject.hasUnits = "u-hidden";
                    }
                }
            }
        }

        productObject.unitOptions = new List<Unit>();

        //Custom fields
        productObject.CustomFields = new List<CustomField>();

        IEnumerable<string> availableCustomFields;
        if (isFamilyMember)
        {
            availableCustomFields = Pageview.AreaSettings.GetItem("ProductPage").GetList("FamilyTableColumns") != null ? Pageview.AreaSettings.GetItem("ProductPage").GetList("FamilyTableColumns").SelectedValues : new string[] { };
        }
        else
        {
            availableCustomFields = Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsTableColumns") != null ? Pageview.AreaSettings.GetItem("ProductPage").GetList("VariantsTableColumns").SelectedValues : new string[] { };
        }

        foreach (string availableField in availableCustomFields)
        {
            foreach (LoopItem field in product.GetLoop("CustomFieldValues"))
            {
                if (field.GetString("Product.CustomField.Template").ToLower() == availableField.ToLower())
                {
                    if (!String.IsNullOrEmpty(field.GetString("Product.CustomField.Value")))
                    {
                        filledVariantCustomField.Add(field.GetString("Product.CustomField.Name"));
                        productObject.CustomFields.Add(new CustomField()
                        {
                            name = availableField,
                            value = field.GetString("Product.CustomField.Value")
                        });
                    }
                    else if (filledVariantCustomField.Contains(field.GetString("Product.CustomField.Name")))
                    {
                        productObject.CustomFields.Add(new CustomField()
                        {
                            name = availableField,
                            value = string.Empty
                        });
                    }
                }
            }
        }

        //Favorites
        if (Pageview.User != null)
        {
            productObject.Favorite = new List<Favorite>();
            Favorite favoriteObject = new Favorite();
            favoriteObject.id = Guid.NewGuid().ToString();
            favoriteObject.isInAnyFavoriteList = product.GetBoolean("Ecom:Product.IsProductInFavoriteList");
            favoriteObject.FavoriteLists = new List<FavoriteItem>();
            string addToWishList = "";
            if (useFacebookPixel)
            {
                //Pixel
                FacebookAction addToWishlistPixelAction = new FacebookAction() {
                    content_name = productObject.name,
                    content_ids = facebookPixelContentIds,
                    content_type = "product",
                    value = productObject.priceDouble,
                    currency = productObject.currency
                };
                addToWishList = Newtonsoft.Json.JsonConvert.SerializeObject(addToWishlistPixelAction);
            }

            if (product.GetLoop("CustomerCenter.ListTypes").Count > 0)
            {
                foreach (LoopItem favoriteList in product.GetLoop("CustomerCenter.ListTypes"))
                {
                    foreach (LoopItem favoriteItem in favoriteList.GetLoop("CustomerCenter.ProductLists"))
                    {
                        FavoriteItem favoriteItemObject = new FavoriteItem();
                        favoriteItemObject.listId = favoriteItem.GetInteger("Ecom:CustomerCenter.ListTypes.List.ID");
                        favoriteItemObject.name = favoriteItem.GetString("Ecom:CustomerCenter.List.Name");
                        favoriteItemObject.isInFavoriteList = favoriteItem.GetBoolean("Ecom:Product.List.IsProductInThisList");
                        favoriteItemObject.addLink = favoriteItem.GetString("Ecom:Product.AddToThisListAction");
                        favoriteItemObject.removeLink = favoriteItem.GetString("Ecom:Product.RemoveFromThisList");
                        favoriteItemObject.facebookPixelAddAction = addToWishList;

                        if (favoriteItem.GetString("Ecom:CustomerCenter.ListTypes.List.ID") == quickAddFavoriteListId && !favoriteItemObject.isInFavoriteList)
                        {
                            productObject.quickAddToFavoritesLink = favoriteItem.GetString("Ecom:Product.AddToThisListAction");
                            productObject.quickRemoveFromFavoritesLink = favoriteItem.GetString("Ecom:Product.RemoveFromThisList");
                        }
                        favoriteObject.FavoriteLists.Add(favoriteItemObject);
                    }
                }

                //skip this product if it's in the current list already
                if (!string.IsNullOrEmpty(quickAddFavoriteListId) && string.IsNullOrEmpty(productObject.quickAddToFavoritesLink))
                {
                    continue;
                }
            }
            else
            {
                FavoriteItem favoriteItemObject = new FavoriteItem();
                favoriteItemObject.name = Translate("My favorites");
                favoriteItemObject.addLink = product.GetString("Ecom:Product.AddToFavorites") + "&CCListType=0&CCCreateNewList=My favorites";
                favoriteItemObject.isInFavoriteList = false;
                favoriteItemObject.facebookPixelAddAction = addToWishList;
                favoriteObject.FavoriteLists.Add(favoriteItemObject);
            }

            //not needed info in this mode
            if (string.IsNullOrEmpty(quickAddFavoriteListId))
            {
                productObject.Favorite.Add(favoriteObject);
            }
        }

        //Variant current selection names
        productObject.VariantSelectionNames = new List<VariantSelectionName>();
        string[] variantSelectionNamesArr = product.GetString("Ecom:Product.VariantText").Replace(" - ", ".").Split('.');

        foreach (string name in variantSelectionNamesArr)
        {
            VariantSelectionName variantName = new VariantSelectionName();
            variantName.name = name;
            productObject.VariantSelectionNames.Add(variantName);
        }

        //Variants
        productObject.variantGroupsCount = variantGroups.Count;
        productObject.Variants = new List<Variant>();
        bool hasSelection = false;

        if (!isFamilyMember)
        {
            var simpleVariantGroupsList = new List<List<String>>();

            if (product.GetBoolean("Ecom:Product.ShowInProductList") && !string.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) && variantGroups.Count > 1)
            {
                variantGroups.RemoveAt(0);
            }

            bool isFirstGroup = true;
            foreach (LoopItem variantgroup in variantGroups)
            {
                Variant variantObject = new Variant();
                var simpleVariantsList = new List<String>();

                variantObject.id = variantgroup.GetString("Ecom:VariantGroup.ID");
                variantObject.name = variantgroup.GetString("Ecom:VariantGroup.Name");
                variantObject.isFirstGroup = isFirstGroup;
                variantObject.VariantOptions = new List<VariantOption>();

                isFirstGroup = false;

                foreach (LoopItem variantoption in variantgroup.GetLoop("VariantAvailableOptions"))
                {
                    VariantOption variantOptionObject = new VariantOption();
                    variantOptionObject.id = uniqueId;
                    variantOptionObject.variantId = variantoption.GetString("Ecom:VariantOption.ID");
                    variantOptionObject.productId = product.GetString("Ecom:Product.ID");
                    variantOptionObject.name = variantoption.GetString("Ecom:VariantOption.Name");
                    variantOptionObject.groupId = variantgroup.GetString("Ecom:VariantGroup.ID");
                    if (variantoption.GetBoolean("Ecom:VariantOption.Selected"))
                    {
                        variantOptionObject.selected = "checked";
                        hasSelection = true;
                    }
                    else
                    {
                        variantOptionObject.selected = "";
                    }
                    variantOptionObject.selected = variantoption.GetBoolean("Ecom:VariantOption.Selected") ? "checked" : "";
                    variantOptionObject.disabled = "";
                    variantOptionObject.color = variantoption.GetString("Ecom:VariantOption.Color");
                    variantOptionObject.color = !String.IsNullOrEmpty(variantOptionObject.color) ? variantOptionObject.color : variantoption.GetString("Ecom:VariantOption.Colorcode");
                    variantOptionObject.image = variantoption.GetString("Ecom:VariantOption.ImgSmall.Clean");
                    if (!string.IsNullOrEmpty(variantOptionObject.image))
                    {
                        variantOptionObject.template = "VariantOptionImage";
                    }
                    else
                    {
                        variantOptionObject.template = "VariantOption";
                    }

                    simpleVariantsList.Add(variantoption.GetString("Ecom:VariantOption.ID"));
                    variantObject.VariantOptions.Add(variantOptionObject);
                }

                simpleVariantGroupsList.Add(simpleVariantsList);
                productObject.Variants.Add(variantObject);
            }


            productObject.disabledBuyButton = (!hasSelection && hasVariants && string.IsNullOrEmpty(product.GetString("Ecom:Product.DefaultVariantComboID"))) || (pointShopOnly && !productObject.canBePurchasedWithPoints) ? "disabled" : "";
            productObject.variantsStringArray = Newtonsoft.Json.JsonConvert.SerializeObject(simpleVariantGroupsList).Replace("\"", "\'");
        }

        if (hasSelection || isFamilyMember)
        {
            productObject.hasVariants = "";
            productObject.hideHelpText = "u-visibility-hidden";
        }

        //Combinations
        productObject.Combinations = new List<Combi>();
        var variantCombinationsList = new List<Array>();

        foreach (LoopItem variantcomb in product.GetLoop("VariantCombinations"))
        {
            Combi combiObject = new Combi();
            combiObject.id = variantcomb.GetString("Ecom:VariantCombination.VariantID");
            productObject.Combinations.Add(combiObject);

            string[] combinations = variantcomb.GetString("Ecom:VariantCombination.VariantID").Split('.');
            variantCombinationsList.Add(combinations);
        }

        productObject.combinationsStringArray = Newtonsoft.Json.JsonConvert.SerializeObject(variantCombinationsList).Replace("\"", "\'");
        productObject.variantSelections = "";

        //Units
        if (!isFamilyMaster)
        {
            string productLink = product.GetString("Ecom:Product.LinkGroup.Clean") + (!string.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? "&VariantID=" + product.GetString("Ecom:Product.VariantID") : "");
            bool hasDefaultUnit = false;
            bool hasSelectedUnit = false;
            string defaultUnitId = product.GetString("Ecom:Product.DefaultUnitID");
            //loop units
            foreach (LoopItem unitOption in product.GetLoop("Units"))
            {
                var unitId = unitOption.GetString("Ecom:VariantOption.ID");
                var unitName = unitOption.GetString("Ecom:VariantOption.Name");

                //has default variant in units list
                if (unitId == defaultUnitId)
                {
                    hasDefaultUnit = true;
                }

                productObject.unitOptions.Add(new Unit
                {
                    value = unitId,
                    name = unitName,
                    link = productLink
                });

                if (unitOption.GetString("Ecom:VariantOption.Selected") == "SELECTED")
                {
                    productObject.unitId = unitId;
                    productObject.unitName = unitName;
                    hasSelectedUnit = true;
                }
            }

            if (!hasDefaultUnit)
            {
                //create nothing selected option
                productObject.unitOptions.Insert(0, new Unit
                {
                    name = Translate("Select unit"),
                    link = productLink
                });

                productObject.hasOnlyOneUnit = false;

                if (!hasSelectedUnit)
                {
                    //set default selected option
                    productObject.unitName = Translate("Select unit");
                }
            }
        }

        //Set the link, now that we know the variant id
        productObject.link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(product.GetString("Ecom:Product.LinkGroup.Clean") + (!string.IsNullOrWhiteSpace(productObject.variantid) ? "&VariantID=" + productObject.variantid : ""));

        if (useGoogleTagManager)
        {
            var groupObject = Dynamicweb.Ecommerce.Services.ProductGroups.GetGroup(product.GetString("Ecom:Product.PrimaryOrFirstGroupID"));
            var googleImpression = new GoogleImpression()
            {
                name = productObject.name,
                brand = product.GetString("Ecom:Product:Field.brand.Value"),
                category = (groupObject != null ? groupObject.Name : feedRoot.groupName),
                id = productObject.productId,
                position = count,
                price = productObject.priceDouble,
                variant = productObject.variantid,
                url = productObject.link,
                currency = productObject.currency,
                list = !string.IsNullOrEmpty(searchParameter) ? "Search results" : "Product catalogue"
            };
            productObject.googleImpression = Newtonsoft.Json.JsonConvert.SerializeObject(googleImpression);
        }

        productObject.productInfo = Newtonsoft.Json.JsonConvert.SerializeObject(new
        {
            link = Dynamicweb.Frontend.SearchEngineFriendlyURLs.GetFriendlyUrl(productObject.link),
            image = productObject.image,
            name = productObject.name,
            variantName = Dynamicweb.Ecommerce.Services.Variants.GetVariantName(productObject.variantid),
            unitName = !string.IsNullOrEmpty(productObject.unitId) ? productObject.unitName : "",
            googleImpression = productObject.googleImpression
        });

        //Available custom fields
        foreach (string availableField in availableCustomFields)
        {
            bool fieldExists = false;
            string fieldName = null;
            foreach (LoopItem field in product.GetLoop("CustomFieldValues"))
            {
                if (field.GetString("Product.CustomField.Template").ToLower() == availableField.ToLower())
                {
                    if (!String.IsNullOrEmpty(field.GetString("Product.CustomField.Value")))
                    {
                        fieldExists = true;
                        fieldName = field.GetString("Product.CustomField.Name");
                    }
                }
            }

            if (fieldExists && !availableCustomFieldsHash.Contains(fieldName))
            {
                CustomField customFieldObject = new CustomField();
                customFieldObject.name = fieldName;
                customFieldObject.value = availableField;
                feedRoot.AvailableCustomFields.Add(customFieldObject);
                availableCustomFieldsHash.Add(fieldName);
            }
        }

        productsContainerObject.Product.Add(productObject);
        feedRoot.ProductsContainer.Add(productsContainerObject);

        if (feedType == "productsOnly")
        {
            productFeedObject.Add(productsContainerObject);
        }

        //FACETS

        string currencySymbol = product.GetString("Ecom:Product.Price.Currency.Symbol");
        string weightUnit = SystemConfiguration.Instance.GetValue("/Globalsettings/Ecom/Unit/Weight");

        if (feedType != "productsOnly")
        {
            feedRoot.FacetGroups = new List<FacetGroup>();

            foreach (LoopItem facetGroup in GetLoop("FacetGroups"))
            {
                foreach (LoopItem facetItem in facetGroup.GetLoop("Facets"))
                {
                    if (facetItem.GetInteger("Facet.OptionWithResultCount") > 0 && facetItem.GetInteger("Facet.OptionResultTotalCount") > 0)
                    {
                        FacetGroup facetGroupObject = new FacetGroup();
                        facetGroupObject.counter = facetItem.GetString("Facets.LoopCounter");
                        facetGroupObject.name = Translate(facetItem.GetString("Facet.Name"));
                        facetGroupObject.defaultState = facetItem.GetInteger("Facets.LoopCounter") <= defaultFacetsState ? "checked" : "";
                        facetGroupObject.defaultState = Pageview.Device.ToString() == "Mobile" ? "" : facetGroupObject.defaultState;
                        facetGroupObject.showFilter = facetItem.GetLoop("FacetOptions").Count >= 10 ? "" : "u-hidden";
                        facetGroupObject.FacetOptions = new List<FacetOption>();
                        var renderType = facetItem.GetString("Facet.RenderType");

                        foreach (LoopItem facetOption in facetItem.GetLoop("FacetOptions"))
                        {
                            string facetLabel = facetOption.GetString("FacetOption.Label");

                            if (facetLabel.ToLower() == "true")
                            {
                                facetLabel = Translate("Yes");
                            }

                            if (facetLabel.ToLower() == "false")
                            {
                                facetLabel = Translate("No");
                            }

                            FacetOption facetOptionObject = new FacetOption();
                            facetOptionObject.template = renderType;
                            facetOptionObject.name = facetOption.GetString("FacetOption.Name");
                            facetOptionObject.count = facetOption.GetString("FacetOption.Count");
                            if (renderType == "Weight") { facetLabel += " " + weightUnit; }
                            if (renderType == "Range") { facetLabel += " " + currencySymbol; }
                            facetOptionObject.label = facetLabel;
                            facetOptionObject.value = facetOption.GetString("FacetOption.Value");
                            facetOptionObject.queryParameter = facetItem.GetString("Facet.QueryParameter");
                            facetOptionObject.disabled = facetOption.GetInteger("FacetOption.Count") <= 0 ? "disabled" : "";
                            facetOptionObject.selected = facetOption.GetBoolean("FacetOption.Selected") ? "checked" : "";
                            facetGroupObject.FacetOptions.Add(facetOptionObject);
                        }

                        feedRoot.FacetGroups.Add(facetGroupObject);
                    }
                }
            }

            feedRoot.FacetSelections = new List<FacetSelection>();

            int facetSelectionCount = 0;

            foreach (LoopItem facetGroup in GetLoop("FacetGroups"))
            {
                foreach (LoopItem facetItem in facetGroup.GetLoop("Facets"))
                {
                    if (facetItem.GetInteger("Facet.OptionWithResultCount") > 0 && facetItem.GetInteger("Facet.OptionResultTotalCount") > 0)
                    {
                        foreach (LoopItem facetOption in facetItem.GetLoop("FacetOptions"))
                        {
                            if (facetOption.GetBoolean("FacetOption.Selected"))
                            {
                                FacetSelection facetSelectionObject = new FacetSelection();
                                facetSelectionObject.template = facetOption.GetString("FacetOption.Value").Contains("#") ? "SelectedColorFilter" : "SelectedFilter";
                                facetSelectionObject.group = Translate(facetItem.GetString("Facet.Name"));
                                facetSelectionObject.name = facetOption.GetString("FacetOption.Name");
                                facetSelectionObject.label = facetOption.GetString("FacetOption.Label");
                                facetSelectionObject.value = facetOption.GetString("FacetOption.Value");
                                facetSelectionObject.queryParameter = facetItem.GetString("Facet.QueryParameter");
                                feedRoot.FacetSelections.Add(facetSelectionObject);

                                facetSelectionCount++;
                            }
                        }
                    }
                }
            }

            if (facetSelectionCount > 2)
            {
                FacetSelection facetAllObject = new FacetSelection();
                facetAllObject.template = "ResetFilters";
                feedRoot.FacetSelections.Insert(0, facetAllObject);
            }
        }
    }

    feedObject.Add(feedRoot);

    string jsonFeed = "";

    if (GetLoop("Products").Count == 0)
    {
        jsonFeed = "[]";
    }
    else if (feedType == "productsOnly")
    {
        if (!string.IsNullOrEmpty(searchParameter) && !isLoadMore && !expressBuy)
        {
            ProductsContainer productsContainerObject = new ProductsContainer();
            productsContainerObject.Product = new List<Product>();

            Product searchMoreObject = new Product();
            searchMoreObject.template = "SearchMore";
            searchMoreObject.searchParameter = searchParameter;
            if (!string.IsNullOrEmpty(listId))
            {
                searchMoreObject.searchParameter += "&ListId=" + listId;
            }
            searchMoreObject.groupId = groupId;
            searchMoreObject.stickToBottom = isCombinedSearch ? "grid__cell-footer u-margin-top--auto" : "";

            productsContainerObject.Product.Add(searchMoreObject);
            productFeedObject.Add(productsContainerObject);
        }

        jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(productFeedObject);
    }
    else
    {
        jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(feedObject);
    }
}

@jsonFeed
