@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks
@using System.Linq

@functions {
    BlocksPage addAddressPage = BlocksPage.GetBlockPage("AddAddressPage");
}

@{
    bool isAdd = !string.IsNullOrWhiteSpace(GetString("UserManagement:User.ManageAddresses.AddAddress"));

    Form form = new Form
    {
        FormStartMarkup = GetString("UserManagement:User.ManageAddresses.FormStart")
    };

    addAddressPage.Add(new Block
    {
        Id = "AddAddressForm",
        SortId = 10,
        Component = form,
        Design = new Design
        {
            RenderType = RenderType.Column,
            Size = "8",
            CssClass = "grid__col--bleed"
        }
    });

    addAddressPage.Add(new Block
    {
        Id = "ManageAddressesJavascript",
        SortId = 20,
        Template = RenderManageAddressesJavascript()
    });

    form.Add(new Heading
    {
        Title = Translate(isAdd ? "Add address" : "Edit address"),
        Level = 2,
        Icon = new Icon()
        {
            Prefix = "fas",
            Name = "fa-" + (isAdd ? "plus" : "pencil"),
            LabelPosition = IconLabelPosition.After
        }
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_Description",
        Name = "Description",
        Label = Translate("Address title"),
        Value = GetString("UserManagement:User.UserAddress.Description.Value"),
        Required = true,
        ErrorMessage = GetString("UserManagement:User.UserAddress.Description.Input.Error")
    });

    form.Add(new TextField
    {
        Id = "CustomField.AccessUserAddress_AccessUserAddress_UserName",
        Name = "CustomField.AccessUserAddress_AccessUserAddress_UserName",
        Label = Translate("Name"),
        Value = GetString("UserManagement:User.UserAddress.AccessUserAddress_UserName"),
        Required = true,
        ErrorMessage = GetString("UserManagement:User.UserAddress.AccessUserAddress_UserName.Input.Error")
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_Company",
        Name = "Company",
        Label = Translate("Company"),
        Value = GetString("UserManagement:User.UserAddress.Company.Value")
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_Email",
        Name = "Email",
        Label = Translate("Email"),
        Value = GetString("UserManagement:User.UserAddress.Email.Value"),
        Type = TextFieldType.Email,
        ErrorMessage = GetString("UserManagement:User.UserAddress.Email.Input.Error")
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_Phone",
        Name = "Phone",
        Label = Translate("Phone"),
        Value = GetString("UserManagement:User.UserAddress.Phone.Value"),
        Type = TextFieldType.Tel
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_Address",
        Name = "Address",
        Label = Translate("Address"),
        Value = GetString("UserManagement:User.UserAddress.Address.Value"),
        Required = true,
        ErrorMessage = GetString("UserManagement:User.UserAddress.Address.Input.Error")
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_Address2",
        Name = "Address2",
        Label = Translate("Address2"),
        Value = GetString("UserManagement:User.UserAddress.Address2.Value")
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_Zip",
        Name = "Zip",
        Label = Translate("Zip code"),
        Required = true,
        Value = GetString("UserManagement:User.UserAddress.Zip.Value")
    });
    form.Add(new TextField
    {
        Id = "UserManagement_Form_City",
        Name = "City",
        Label = Translate("City"),
        Required = true,
        Value = GetString("UserManagement:User.UserAddress.City.Value"),
        ErrorMessage = GetString("UserManagement:User.UserAddress.City.Input.Error")
    });

    var regionsField = new SelectField
    {
        Id = "UserManagement_Form_State",
        Name = "State",
        Label = Translate("State/Region"),
        WrapperCssClass = "js-state-field"
    };

    var currentRegions = Dynamicweb.Ecommerce.Services.Countries.GetRegions(GetString("UserManagement:User.UserAddress.Country.Value"));

    if (currentRegions.Count > 0)
    {
        foreach (var region in currentRegions)
        {
            regionsField.Options.Add(new SelectFieldOption
            {
                Value = region.RegionCode,
                Label = region.Name
            });
        }
        regionsField.Value = GetString("UserManagement:User.UserAddress.State.Value");
    }
    else
    {
        regionsField.WrapperCssClass += " u-hidden";
    }

    form.Add(regionsField);

    var countrySelector = new SelectField
    {
        Id = "UserManagement_Form_Country",
        Name = "Country",
        Label = Translate("Country"),
        Required = true,
        ErrorMessage = GetString("UserManagement:User.UserAddress.Country.Input.Error"),
        Value = GetString("UserManagement:User.UserAddress.Country.Value"),
        OnChange = "changeCountry(this.value)"
    };

    countrySelector.Options.Add(new SelectFieldOption
    {
        Label = Translate("Nothing selected"),
        Value = "",
        Disabled = true,
        Checked = true
    });

    <script>
        let countryRegions = {

            @foreach (var country in GetLoop("UserManagement.CountryList"))
            {
                var regions = Dynamicweb.Ecommerce.Services.Countries.GetRegions(country.GetString("Country.Code2"));

                if (regions.Count > 0)
                {
                    <text>"@country.GetString("Country.Code2")": {</text>
                }

                <text>@string.Join(",", regions.Select(region => "\"" + region.RegionCode + "\": \"" + region.Name + "\""))</text>

                if (regions.Count > 0)
                {
                    <text>},</text>
                }

                countrySelector.Options.Add(new SelectFieldOption
                {
                    Label = Translate(country.GetString("Country.Name")),
                    Value = country.GetString("Country.Code2")
                });
            }
        }
    </script>

    form.Add(countrySelector);
    form.Add(new HiddenField { Id = "countryHidden", Name = "AddressCountryCode", Value = GetString("UserManagement:User.UserAddress.Country.Value") });
    form.Add(new CheckboxField { Id = "isDefault", Value = "on", Name = "Default", Label = Translate("Is default"), Checked = GetBoolean("UserManagement:User.UserAddress.Default.Value") });
    form.Add(new Button { ButtonType = ButtonType.Submit, Title = Translate("Save"), CssClass = "u-pull--right u-no-margin" });
}

@helper RenderManageAddressesJavascript()
{
    <script>
        function changeCountry(countryCode) {
            document.getElementById("countryHidden").value = countryCode;
            let stateField = document.getElementById("UserManagement_Form_State");
            stateField.innerHTML = "";
            let currentRegions = countryRegions[countryCode];

            if (currentRegions != null) {
                for (let regionCode in currentRegions) {
                    let option = document.createElement("option");
                    option.text = currentRegions[regionCode];
                    option.value = regionCode;
                    stateField.add(option);
                }
                stateField.closest(".js-state-field").classList.remove("u-hidden");
            } else {
                let option = document.createElement("option");
                option.value = "";
                stateField.add(option);
                stateField.closest(".js-state-field").classList.add("u-hidden");
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            regionLabels.InitDictionary({
                "CA": "@Translate("Province")",
                "US": "@Translate("State")"
            });
            regionLabels.LocalizeRegionLabels("UserManagement_Form_State", "UserManagement_Form_Country", true);
        });
    </script>
}

@* Include the Rendering helpers *@
@Include("Blocks/AddAddresses/Custom__Blocks.cshtml")

@Include("../../Components/GridBuilder.cshtml")
@Include("../../Components/GeneralComponents.cshtml")


@RenderBlockList(addAddressPage.BlocksRoot.BlocksList)