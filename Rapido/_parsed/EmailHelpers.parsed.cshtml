@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;
@using Dynamicweb.Core;
@using System.Linq;
@using Dynamicweb.Ecommerce.Orders;
@using Dynamicweb.Ecommerce.Orders.SalesDiscounts;
@using System.Text.RegularExpressions;
@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>


@* 
   This is a temporary fallback for the DefaultImage. The image pattern MUST be set up like this:
   
   ImageSmall = /{ProductNumber}.jpg
   ImageMedium = /{ProductNumber}{VariantOptionLevel1}.jpg
   ImageLarge = /{ProductNumber}{VariantComboName}.jpg

   In addition to the ImageDefault setting
*@

@functions {
    public string GetProductImage(LoopItem productObject = null)
    {
        string theImage = "";

        if (productObject == null) {
            theImage = GetString("Ecom:Product.ImageDefault.Default.Clean");
            theImage = String.IsNullOrEmpty(theImage) ? GetString("Ecom:Product.ImageLarge.Clean") : theImage;
            theImage = String.IsNullOrEmpty(theImage) ? GetString("Ecom:Product.ImageMedium.Clean") : theImage;
            theImage = String.IsNullOrEmpty(theImage) ? GetString("Ecom:Product.ImageSmall.Clean") : theImage;
            theImage = String.IsNullOrEmpty(theImage) ? GetString("Ecom:Product.ImageLarge.Default.Clean") : theImage;
        } else {
            theImage = productObject.GetString("Ecom:Product.ImageDefault.Default.Clean");
            theImage = String.IsNullOrEmpty(theImage) ? productObject.GetString("Ecom:Product.ImageLarge.Clean") : theImage;
            theImage = String.IsNullOrEmpty(theImage) ? productObject.GetString("Ecom:Product.ImageMedium.Clean") : theImage;
            theImage = String.IsNullOrEmpty(theImage) ? productObject.GetString("Ecom:Product.ImageSmall.Clean") : theImage;
            theImage = String.IsNullOrEmpty(theImage) ? productObject.GetString("Ecom:Product.ImageLarge.Default.Clean") : theImage;
        }

        return theImage;
    }
}

@functions{
    string logoimage;
    string emailFontColor;
    string emailBackgroundColor;
    string emailLogoAlignment;
    string emailFooterAlignment;

    Column GetAddressColumn(string prefix, string type)
    {
        Column column = new Column();
        column.text.Add(GetString("Ecom:" + prefix + "." + type + ".Company"));
        column.text.Add(GetString("Ecom:" + prefix + "." + type + ".Name"));
        column.text.Add(GetString("Ecom:" + prefix + "." + type + ".Address"));
        column.text.Add(GetString("Ecom:" + prefix + "." + type + ".Zip") + " " + GetString("Ecom:" + prefix + "." + type + ".City"));
        column.text.Add(GetString("Ecom:" + prefix + "." + type + ".Region"));
        column.text.Add(GetString("Ecom:" + prefix + "." + type + ".Country"));
        column.text.Add("<a href='mailto:" + GetString("Ecom:" + prefix + "." + type + ".Email") + "' style='text-decoration: none ;pointer-events: none;' title='" + GetString("Ecom:" + prefix + "." + type + ".Email") + "'>" + GetString("Ecom:" + prefix + "." + type + ".Email") + "</a>");
        column.text.Add("<a href='tel:" + GetString("Ecom:" + prefix + "." + type + ".Phone") + "' style='text-decoration: none; ;pointer-events: none;' title='" + GetString("Ecom:" + prefix + "." + type + ".Phone") + "'>" + GetString("Ecom:" + prefix + "." + type + ".Phone") + "</a>");
        return column;
    }
}

@{

    if (Pageview != null && Pageview.AreaSettings != null)
    {
        logoimage = Converter.ToString(Pageview.AreaSettings.GetItem("Layout").GetItem("Emails").GetFile("LogoImage").PathUrlEncoded);
        emailFontColor = Converter.ToString(Pageview.AreaSettings.GetItem("Layout").GetItem("Emails").GetString("HeaderAndFooterFontColor"));
        emailFontColor = !string.IsNullOrEmpty(emailFontColor) ? emailFontColor : "#FFFFFF";
        emailBackgroundColor = Converter.ToString(Pageview.AreaSettings.GetItem("Layout").GetItem("Emails").GetString("HeaderAndFooterBackgroundColor"));
        emailBackgroundColor = !string.IsNullOrEmpty(emailBackgroundColor) ? emailBackgroundColor : "#14304A";
        emailFooterAlignment = Converter.ToString(Pageview.AreaSettings.GetItem("Layout").GetItem("Emails").GetString("FooterAlignment"));
        emailFooterAlignment = !string.IsNullOrEmpty(emailFooterAlignment) ? emailFooterAlignment : "right";
        emailLogoAlignment = Converter.ToString(Pageview.AreaSettings.GetItem("Layout").GetItem("Emails").GetString("LogoAlignment"));
        emailLogoAlignment = !string.IsNullOrEmpty(emailLogoAlignment) ? emailLogoAlignment : "center";
    }
}

@helper RenderHeaderImage()
{
    Column header = new Column();
    header.image = logoimage;
    header.imageSize = "250";
    header.textColor = emailFontColor;
    header.align = emailLogoAlignment;
    header.altText = Translate("Go to frontpage");
    header.link = Dynamicweb.Context.Current.Request.Url.Scheme + "://" + GetGlobalValue("Global:Request.Host");

    @CreateRow(header, new RowSettings { backgroundColor = emailBackgroundColor });
}

@helper RenderFooterSection()
{
    string footeremail = Converter.ToString(Pageview.AreaSettings.GetItem("Settings").GetString("ContactEmail"));
    string footerphone = Converter.ToString(Pageview.AreaSettings.GetItem("Settings").GetString("ContactNumber")).Replace(" ", "");

    Column footerRight = new Column();
    footerRight.textColor = emailFontColor;
    footerRight.image = logoimage;
    footerRight.imageSize = "200";
    footerRight.altText = Translate("Logo");
    footerRight.align = emailFooterAlignment;
    footerRight.altText = Translate("Go to frontpage");
    footerRight.link = Dynamicweb.Context.Current.Request.Url.Scheme + "://" + GetGlobalValue("Global:Request.Host");

    footerRight.text.Add("<p></p>");
    footerRight.text.Add("<a href='tel:" + footerphone + "' style='color: " + emailFontColor + "; text-decoration: none; border-bottom: 0;' title='" + footerphone + "'>" + footerphone + "</a>");
    footerRight.text.Add("<a href='mailto:" + footeremail + "' style='color: " + emailFontColor + "; text-decoration: none; border-bottom: 0;' title='" + footeremail + "'>" + footeremail + "</a>");
    footerRight.text.Add("");

    string iconsHTML = "";
    var socialLinks = Pageview.AreaSettings.GetItem("Layout").GetItems("FooterSocialLinks");
    foreach (var socialitem in socialLinks)
    {
        var socialIcon = socialitem.GetValue("Icon") as Dynamicweb.Frontend.ListViewModel;
        string socialIconClass = socialIcon.SelectedValue;
        string socialIconTitle = socialIcon.SelectedName;
        string socialLink = socialitem.GetString("Link");
        socialIconClass = Dynamicweb.Context.Current.Request.Url.Scheme + "://" + GetGlobalValue("Global:Request.Host") + "/Admin/Public/GetImage.ashx?width=35&image=" + "/Files/Images/SocialIcons/" + socialIconClass + ".png";

        iconsHTML += " <a href='" + socialLink + "' style='color: white; text-decoration: none; border-bottom: 0; display: inline-block; width: 35px; height: 35px; background-image:url(\"" + socialIconClass + "\")' title='" + socialIconTitle + "'></a>";
    }
    footerRight.text.Add(iconsHTML);

    @CreateRow(footerRight, new RowSettings { backgroundColor = emailBackgroundColor });
}

@helper RenderRecurringDetails()
{
    if (GetBoolean("Ecom:Order.IsRecurringOrder"))
    {
        Column recurringInfo = new Column();
        recurringInfo.text.Add(Translate("You have placed a subscription. This is a confirmation of the subscription not the actual order receipt."));
        recurringInfo.align = "center";

        @CreateRow(recurringInfo);

        @CreateRowDivider();
    }

    if (GetBoolean("Ecom:Order.IsBasedOnRecurringOrder"))
    {
        Column basedRecurringInfo = new Column();
        basedRecurringInfo.text.Add(Translate("Your subscription order"));
        basedRecurringInfo.align = "center";

        @CreateRow(basedRecurringInfo);

        @CreateRowDivider();
    }
}

@helper RenderComments()
{
    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.Customer.Comment")))
    {
        Column comment = new Column();
        comment.subheader = Translate("Comment");
        comment.text.Add(GetString("Ecom:Order.Customer.Comment"));

        @CreateRow(comment);

        @CreateRowDivider();
    }
}

@helper RenderAddresses(string billingTitle, string deliveryTitle, string prefix)
{
    Column billingInfo = GetAddressColumn(prefix, "Customer");
    billingInfo.header = billingTitle;
    var fix = GetString("Ecom:Order.Delivery.Name"); //without this delivery tags will not be rendered :(
    Column shippingInfo = GetAddressColumn(prefix, !string.IsNullOrEmpty(GetString("Ecom:" + prefix + ".Delivery.Address")) ? "Delivery" : "Customer");
    shippingInfo.header = deliveryTitle;
    @CreateRow(billingInfo, shippingInfo, new RowSettings { backgroundColor = "#e4e4e4", smallScreenTable = "table-smallScreen" });
}

@helper RenderPaymentAndShipping()
{
    string businessName = Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("Name");
    string businessCountry = Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("Country");
    string businessCity = Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("City");
    string businessRegion = Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("Region");
    string businessZip = Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("PostalCode");
    string businessAddress = Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("StreetAddress");
    string businessCVR = Pageview.AreaSettings.GetItem("Settings").GetItem("Address").GetString("CVRNumber");

    Column leftColumn = new Column();
    Column shopInfo = new Column();

    leftColumn.header = Translate("Payment and shipping");

    if (!string.IsNullOrEmpty(GetString("Ecom:Order.PaymentMethod")))
    {
        leftColumn.text.Add(Translate("Payment method") + ": " + Translate(GetString("Ecom:Order.PaymentMethod")));
    }

    if (!string.IsNullOrEmpty(GetString("Ecom:Order.ShippingMethod")))
    {
        leftColumn.text.Add(Translate("Shipping method") + ": " + Translate(GetString("Ecom:Order.ShippingMethod")));
    }

    if (!string.IsNullOrEmpty(GetString("Ecom:Order.TransactionCardNumber")))
    {
        leftColumn.text.Add(Translate("Card no") + ": " + GetString("Ecom:Order.TransactionCardNumber"));
    }
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.TransactionNumber")))
    {
        leftColumn.text.Add(Translate("Transaction no") + ": " + GetString("Ecom:Order.TransactionNumber"));
    }
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.TransactionStatus")))
    {
        leftColumn.text.Add(Translate("Transaction status") + ": " + GetString("Ecom:Order.TransactionStatus"));
    }

    //Shop
    if (!string.IsNullOrEmpty(businessAddress))
    {
        shopInfo.header = Translate("Shop");

        shopInfo.text.Add(businessName);
        shopInfo.text.Add(businessAddress);

        if (!string.IsNullOrEmpty(businessRegion))
        {
            businessRegion += " "; //add space between region and country
        }
        shopInfo.text.Add(businessZip + " " + businessCity + ", " + businessRegion + businessCountry);

        if (!string.IsNullOrEmpty(businessCVR))
        {
            shopInfo.text.Add(Translate("Business number") + ": " + businessCVR);
        }
    }

    @CreateRow(leftColumn, shopInfo, new RowSettings { backgroundColor = "#e4e4e4" });
}










@helper RenderOrderline(LoopItem orderline, bool showImage = true)
{
    Column orderLineLeft = new Column();

    Column orderLineCenter = new Column();

    Column orderLineRight = new Column();
    orderLineRight.align = "right";


    string ServiceForProductId = "";            
    foreach (LoopItem orderlinefield in orderline.GetLoop("Order.OrderLineFields")){
        if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductId"){
            ServiceForProductId = orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.Value");
        }   
    }

// Remove Services
if (orderline.GetBoolean("Ecom:Order:OrderLine.IsProduct") && string.IsNullOrEmpty(ServiceForProductId)){

//	string DeliveryServiceGroup = "GROUP895";
	string ProdId = orderline.GetString("Ecom:Product.ID");
//	string ProdNumber = orderline.GetString("Ecom:Product.Number");
//	string ProdOrderlineID = "";
//	int ProdQuantity = 0;
	string DeliveryServiceOrderlineID = "";
	string DeliveryServiceOrderlineID_List = "";
	string DeliveryServiceDeleteByOrderlineID_OnClick = "";
	string DeliveryServiceDeleteByOrderlineID_HTML = "";
//	string DeliveryServiceSelection_HTML = "";
            
	int ActivDeliveryServiceLevel = 0;
	string ActivDeliveryServiceName = "";
	string ActivDeliveryServiceItemPrice = "";
	int ActivDeliveryServiceQuantity = 0;
	string ActivDeliveryServicePrice = "";
		
	int DS_cnt = 0;


	foreach (LoopItem orderLines in GetLoop("OrderLines")) {
		foreach (LoopItem orderlinefield in orderLines.GetLoop("Order.OrderLineFields")){
			if (orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.SystemName")=="ServiceForProductId" && orderlinefield.GetString("Ecom:Order:OrderLine.OrderLineField.Value") == ProdId){
				DS_cnt++;
				DeliveryServiceOrderlineID = orderLines.GetString("Ecom:Order:OrderLine.Id");
				DeliveryServiceOrderlineID_List += orderLines.GetString("Ecom:Order:OrderLine.Id") + ",";
				

                //Do the same with bit different approach

				DeliveryServiceDeleteByOrderlineID_OnClick = "Cart.ChangeQuantity("+ Pageview.Page.ID.ToString() + ", '" + DeliveryServiceOrderlineID + "', 0);";
				
                DeliveryServiceDeleteByOrderlineID_HTML += "<a onclick='"+DeliveryServiceDeleteByOrderlineID_OnClick+"'>"+DeliveryServiceOrderlineID+"</a> ";              

				ActivDeliveryServiceLevel = orderLines.GetInteger("Ecom:Product:Field.isDeliveryServiceLevel");
				ActivDeliveryServiceName = orderLines.GetString("Ecom:Product.Name");
				ActivDeliveryServiceItemPrice = orderLines.GetString("Ecom:Product.Price");
				ActivDeliveryServiceQuantity = orderLines.GetInteger("Ecom:Order:OrderLine.Quantity");
				ActivDeliveryServicePrice = orderLines.GetString("Ecom:Order:OrderLine.Price");
				
			}   
		}
    }

            



    string orderLineType = orderline.GetString("Ecom:Order:OrderLine.Type");
    if (orderLineType == "1" || orderLineType == "3" || orderLineType == "4")
    {
        //Discount
        orderLineCenter.text.Add(orderline.GetString("Ecom:Order:OrderLine.ProductName"));
        orderLineRight.text.Add("<strong>" + orderline.GetString("Ecom:Order:OrderLine.TotalPrice") + "</strong>");
        @CreateRow(orderLineCenter, orderLineRight);
    }
    else
    {
        if (showImage)
        {
            orderLineLeft.image = GetProductImage(orderline);
            orderLineLeft.altText = orderline.GetString("Ecom:Order:OrderLine.ProductName");
        }

        //Product
        orderLineCenter.text.Add(orderline.GetString("Ecom:Order:OrderLine.ProductName"));
        if (!string.IsNullOrEmpty(orderline.GetString("Ecom:Order:OrderLine.ProductNumber")))
        {
            orderLineCenter.text.Add("# " + orderline.GetString("Ecom:Order:OrderLine.ProductNumber"));
        }
        if (!string.IsNullOrWhiteSpace(orderline.GetString("Ecom:Order:OrderLine.ProductVariantText")))
        {
            orderLineCenter.text.Add(orderline.GetString("Ecom:Order:OrderLine.ProductVariantText"));
        }

        orderLineCenter.text.Add(Translate("Qty") + ": " + orderline.GetString("Ecom:Order:OrderLine.Quantity"));

        // Services
//        orderLineCenter.text.Add(ServiceForProductId);
if (ActivDeliveryServiceName != ""){
    orderLineCenter.text.Add("+ " + ActivDeliveryServiceName + " " + ActivDeliveryServicePrice);
}




        orderLineRight.text.Add(orderline.GetString("Ecom:Order:OrderLine.Price.PriceFormatted"));

        if (showImage)
        {
            orderLineLeft.width = "105";
            orderLineLeft.imageSize = "105";
            orderLineCenter.width = "165";
            orderLineRight.width = "110";
            @CreateRow(orderLineLeft, orderLineCenter, orderLineRight);
        }
        else
        {
            orderLineCenter.width = "270";
            orderLineRight.width = "110";
            @CreateRow(orderLineCenter, orderLineRight);
        }
        //BOM Items
        foreach (LoopItem bomitem in orderline.GetLoop("BOMItems"))
        {
            var bomImage = GetProductImage(bomitem);

            Column bomLineLeft = new Column();
            if (showImage)
            {
                bomLineLeft.image = bomImage;
            }
            Column bomLineCenter = new Column();
            bomLineCenter.text.Add(bomitem.GetString("Ecom:Order:OrderLine.ProductName"));
            bomLineCenter.text.Add("# " + bomitem.GetString("Ecom:Order:OrderLine.ProductNumber"));
            bomLineCenter.text.Add(Translate("Qty") + ": " + bomitem.GetString("Ecom:Order:OrderLine.Quantity"));

            Column bomLineRight = new Column();
            bomLineRight.text.Add(bomitem.GetString("Ecom:Order:OrderLine.TotalPrice"));
            bomLineRight.align = "right";

            if (showImage)
            {
                bomLineLeft.width = "105";
                bomLineLeft.imageSize = "105";
                bomLineCenter.width = "165";
                bomLineRight.width = "110";
                @CreateRow(bomLineLeft, bomLineCenter, bomLineRight, new RowSettings { backgroundColor = "#e4e4e4" });
            }
            else
            {
                bomLineCenter.width = "270";
                bomLineRight.width = "110";
                @CreateRow(bomLineCenter, bomLineRight, new RowSettings { backgroundColor = "#e4e4e4" });
            }
        }
    }
    @CreateRowDivider()

    }// Remove Services
}







@functions {
    public class ProductDesign
    {
        public string imagePosition { get; set; }
        public bool separationLines { get; set; }
        public string backgroundColor { get; set; }
        public string fontColor { get; set; }
        public bool showViewButton { get; set; }
        public string viewButtonText { get; set; }

        //Defaults
        public ProductDesign()
        {
            imagePosition = "left";
            separationLines = true;
            backgroundColor = "#FFFFFF";
            fontColor = "#000000";
            showViewButton = true;
            viewButtonText = "View";
        }
    }

    Column getProductColumn(LoopItem product, ProductDesign design)
    {
        Column productColumn = new Column
        {
            align = "center",
            image = GetProductImage(product),
            altText = product.GetString("Ecom:Product.Name"),
            textColor = design.fontColor,
            buttonAlign = "center"
        };

        string variantId = !string.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? product.GetString("Ecom:Product.VariantID") : product.GetString("Ecom:Product.VariantID.Extented");
        string link = link = Dynamicweb.Context.Current.Request.Url.Scheme + "://" + GetGlobalValue("Global:Request.Host");
        link += "/" + product.GetString("Ecom:Product.LinkGroup.Clean") + (!string.IsNullOrWhiteSpace(variantId) ? "&VariantID=" + variantId : "");
        productColumn.link = link;

        productColumn.text.Add(string.Format("<a href='{0}' title='{1}' style='{2}'><strong style='word-break: break-word;'>{1}</strong></a>", link, product.GetString("Ecom:Product.Name"), emailLinkStyle));

        if (!string.IsNullOrWhiteSpace(product.GetString("Ecom:Product.VariantText")))
        {
            productColumn.text.Add(product.GetString("Ecom:Product.VariantText"));
        }

        if (!string.IsNullOrEmpty(product.GetString("Ecom:Product.Number")))
        {
            productColumn.text.Add("# " + product.GetString("Ecom:Product.Number"));
        }

        productColumn.text.Add("<br><strong>" + product.GetString("Ecom:Product.Price") + "</strong>");

        if (design.showViewButton && !string.IsNullOrEmpty(design.viewButtonText))
        {
            productColumn.text.Add("<br>");
            productColumn.linkText = Translate(design.viewButtonText);
        }

        return productColumn;
    }
}

@helper RenderProduct(LoopItem product)
{
    @RenderProduct(product, new ProductDesign());
}

@helper RenderProduct(LoopItem product, ProductDesign design)
{
    Column productImage = new Column
    {
        width = "105",
        imageSize = "105",
        textColor = design.fontColor,
        image = GetProductImage(product),
        altText = product.GetString("Ecom:Product.Name")
    };

    Column productPrice = new Column
    {
        width = "110",
        align = design.imagePosition == "left" ? "right" : "left",
        textColor = design.fontColor
    };
    productPrice.text.Add("<strong>" + product.GetString("Ecom:Product.Price") + "</strong><br>");


    Column productInfo = new Column
    {
        width = "165",
        textColor = design.fontColor,
        buttonAlign = "left"
    };

    string variantId = !string.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? product.GetString("Ecom:Product.VariantID") : product.GetString("Ecom:Product.VariantID.Extented");
    string link = Dynamicweb.Context.Current.Request.Url.Scheme + "://" + GetGlobalValue("Global:Request.Host");
    link += "/" + product.GetString("Ecom:Product.LinkGroup.Clean") + (!string.IsNullOrWhiteSpace(variantId) ? "&VariantID=" + variantId : "");
    productImage.link = link;

    productInfo.text.Add(string.Format("<a href='{0}' title='{1}' style='{2}'><strong style='word-break: break-word;'>{1}</strong></a>", link, product.GetString("Ecom:Product.Name"), emailLinkStyle));

    if (!string.IsNullOrWhiteSpace(product.GetString("Ecom:Product.VariantText")))
    {
        productInfo.text.Add(product.GetString("Ecom:Product.VariantText"));
    }

    if (!string.IsNullOrEmpty(product.GetString("Ecom:Product.Number")))
    {
        productInfo.text.Add("# " + product.GetString("Ecom:Product.Number"));
    }

    if (design.showViewButton && !string.IsNullOrEmpty(design.viewButtonText))
    {
        productInfo.text.Add("<br>");
        productInfo.link = link;
        productInfo.linkText = Translate(design.viewButtonText);
    }

    if (design.imagePosition == "left")
    {
        @CreateRow(productImage, productInfo, productPrice, new RowSettings { backgroundColor = design.backgroundColor });
    }
    else if (design.imagePosition == "right")
    {
        @CreateRow(productPrice, productInfo, productImage, new RowSettings { backgroundColor = design.backgroundColor });
    }
    if (design.separationLines)
    {
        @CreateRowDivider()
    }
}


@helper RenderGiftcards()
{
    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.HasGiftCards")))
    {
        Column giftcardHeader = new Column();
        giftcardHeader.header = Translate("Giftcards bought on this order");
        giftcardHeader.align = "center";

        @CreateRow(giftcardHeader);

        @CreateRowDivider();

        foreach (LoopItem giftcards in GetLoop("GiftCards"))
        {
            Column giftcardCode = new Column();
            giftcardCode.subheader = Translate("Gift card code") + ": " + giftcards.GetString("Ecom:Order.GiftCard.Code");

            @CreateRow(giftcardCode);

            Column giftcardLeft = new Column();
            giftcardLeft.text.Add("<strong>" + giftcards.GetString("Ecom:Order.GiftCard.Name") + "</strong>");
            giftcardLeft.text.Add(Translate("Expiry date") + ": " + giftcards.GetDate("Ecom:Order.GiftCard.ExpiryDate").ToString(Dynamicweb.Core.Helpers.DateHelper.DateFormatStringShort));

            Column giftcardRight = new Column();
            giftcardRight.subheader = giftcards.GetString("Ecom:Order.GiftCard.Amount");
            giftcardRight.align = "right";

            @CreateRow(giftcardLeft, giftcardRight);

            @CreateRowDivider();
        }
    }

    if (!string.IsNullOrWhiteSpace(GetString("Ecom:Order.HasUsedGiftCards")))
    {
        Column usedGiftcardHeader = new Column();
        usedGiftcardHeader.subheader = Translate("Order used gift cards");
        usedGiftcardHeader.align = "center";

        @CreateRow(usedGiftcardHeader);

        @CreateRowDivider();

        foreach (LoopItem usedgiftcards in GetLoop("UsedGiftCards"))
        {
            Column giftcardLeft = new Column();
            giftcardLeft.subheader = usedgiftcards.GetString("Ecom:Order.UsedGiftCard.Code");
            giftcardLeft.text.Add(usedgiftcards.GetString("Ecom:Order.UsedGiftCard.Name"));
            giftcardLeft.text.Add(Translate("Expiry date") + " " + usedgiftcards.GetDate("Ecom:Order.UsedGiftCard.ExpiryDate").ToString(Dynamicweb.Core.Helpers.DateHelper.DateFormatStringShort));

            Column giftcardRight = new Column();
            giftcardRight.subheader = usedgiftcards.GetString("Ecom:Order.UsedGiftCard.InitialAmount");
            giftcardRight.text.Add(usedgiftcards.GetString("Ecom:Order.UsedGiftCard.UsedAmountForTheOrder"));
            giftcardRight.text.Add(usedgiftcards.GetString("Ecom:Order.UsedGiftCard.RemainingBalance"));
            giftcardRight.align = "right";

            @CreateRow(giftcardLeft, giftcardRight);

            @CreateRowDivider();
        }
    }
}


@helper RenderVouchers()
{
    string voucherCode = GetString("Ecom:Order.Customer.VoucherCode");
    if (!string.IsNullOrWhiteSpace(voucherCode))
    {
        Column vouchers = new Column();
        vouchers.header = Translate("Vouchers");
        vouchers.align = "center";

        string orderId = GetString("Ecom:Order.ID");
        Order order = new OrderService().GetById(orderId);

        IEnumerable<string> codes = new List<string>();

        if (order.VoucherUseType.HasFlag(VoucherUseCategoryType.Discount))
        {
            codes = voucherCode.Split(new string[] { ",", ";", " " }, StringSplitOptions.RemoveEmptyEntries);
        }
        else
        {
            codes = new string[] { voucherCode.Trim() };
        }

        bool hasUsedVouchers = false;
        foreach (string code in codes)
        {
            Voucher vouch = Voucher.GetVoucherByCode(code);
            if (vouch != null && vouch.DateUsed.HasValue && string.Equals(vouch.UsedOrderId, orderId, StringComparison.OrdinalIgnoreCase))
            {
                vouchers.text.Add(Translate("Voucher") + "<span style='font-weight:bold;'>" + code + "</span>" + Translate("has been used"));
                hasUsedVouchers = true;
            }
        }

        if (hasUsedVouchers)
        {
            @CreateRow(vouchers);
        }
    }
}

@helper RenderButton(string link, string text, string align = "left")
{
    Column button = new Column();
    button.link = link;
    button.linkText = Translate(text);
    button.buttonAlign = align;
    @CreateRow(button);
}