@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.PageViewModel>
@MasterPageFile("Master.cshtml")
@using Dynamicweb.Frontend
@using Dynamicweb.Core
@using Dynamicweb.Core.Helpers
@using System.Linq
@using Dynamicweb.Security.UserManagement

@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.Articles
@using Dynamicweb.Rapido.Blocks.Components.General
@using Dynamicweb.Rapido.Blocks

@functions {
    BlocksPage articlePage = BlocksPage.GetBlockPage("EventArticle");
}

@{
    var speakerList = Model.Item.GetUsers("Speaker") ?? new List<UserViewModel>();
    UserViewModel speaker = speakerList.FirstOrDefault();

    var image = Model.Item.GetFile("Image");
    string image1x1 = image != null ? Dynamicweb.Context.Current.Request.Url.Scheme + "://" + Dynamicweb.Context.Current.Request.Url.Host + "/Admin/Public/GetImage.ashx?width=1920&height=1920&crop=5&Compression=85&DoNotUpscale=true&image=" + image.Path : "";
    string image4x3 = image != null ? Dynamicweb.Context.Current.Request.Url.Scheme + "://" + Dynamicweb.Context.Current.Request.Url.Host + "/Admin/Public/GetImage.ashx?width=1920&height=1440&crop=5&Compression=85&DoNotUpscale=true&image=" + image.Path : "";
    string image16x9 = image != null ? Dynamicweb.Context.Current.Request.Url.Scheme + "://" + Dynamicweb.Context.Current.Request.Url.Host + "/Admin/Public/GetImage.ashx?width=1920&height=1080&crop=5&Compression=85&DoNotUpscale=true&image=" + image.Path : "";
    string eventName = Model.Item.GetString("Title");
    DateTime startDate = Model.Item.GetDateTime("DateAndTime");
    var eventLocation = Model.Item.GetItem("Location");
    string eventStreetAddress = "";
    string eventAddressLocality = "";
    string eventAddressRegion = "";
    string eventPostalCode = "";
    string eventAddressCountry = "";
    string eventLocationName = "";
    if (eventLocation != null)
    {
        eventStreetAddress = eventLocation.GetString("StreetAddress");
        eventAddressLocality = eventLocation.GetString("City");
        eventAddressRegion = eventLocation.GetString("Region");
        eventPostalCode = eventLocation.GetString("PostalCode");
        eventAddressCountry = eventLocation.GetString("Country");
        eventLocationName = eventLocation.GetString("Name");
    }

    string textColor = !string.IsNullOrEmpty(Model.Item.GetString("TextColor")) ? Model.Item.GetString("TextColor") : "";
    string backgroundImage = Model.Item.GetFile("Image") != null ? Model.Item.GetFile("Image").PathUrlEncoded : "";

    ArticleHeader topBanner = new ArticleHeader
    {
        Layout = ArticleHeaderLayout.Banner,
        Image = new Image { Path = backgroundImage },
        Heading = Model.Item.GetString("BannerHeading"),
        Subheading = Model.Item.GetString("BannerSubheading"),
        TextColor = textColor,
        ButtonLayout = ButtonLayout.Primary,
        TextLayout = ArticleHeaderTextLayout.Full
    };

    Block articleContainer = new Block
    {
        Id = "ArticleContainer",
        SortId = 10,
        Design = new Design
        {
            RenderType = RenderType.Row
        },
        BlocksList = new List<Block> {
            new Block {
                Id = "ArticleBody",
                SortId = 20,
                Design = new Design {
                    RenderType = RenderType.Column,
                    Size = "12",
                    HidePadding = true
                },
                BlocksList = new List<Block> {
                    new Block {
                        Id = "ArticleBodyRow",
                        SortId = 10,
                        Design = new Design {
                            RenderType = RenderType.Row
                        },
                        BlocksList = new List<Block> {
                            new Block {
                                Id = "ArticleHeader",
                                SortId = 10,
                                Component = topBanner,
                                Design = new Design {
                                    RenderType = RenderType.Column,
                                    Size = "12",
                                    HidePadding = true,
                                    CssClass = "article-head"
                                }
                            },
                            new Block {
                                Id = "ArticleBody",
                                SortId = 20,
                                Design = new Design {
                                    RenderType = RenderType.Column,
                                    Size = "8"
                                },
                                BlocksList = new List<Block> {
                                    new Block {
                                        Id = "ArticleBodyRow",
                                        SortId = 10,
                                        Design = new Design {
                                            RenderType = RenderType.Row
                                        },
                                        BlocksList = new List<Block> {
                                            new Block {
                                                Id = "ArticleTitle",
                                                SortId = 10,
                                                Component = new Heading { Title = Model.Item.GetString("Title"), Level = 1 },
                                                Design = new Design {
                                                    RenderType = RenderType.Column,
                                                    Size = "12",
                                                    CssClass = "u-padding--lg"
                                                }
                                            },
                                            new Block {
                                                Id = "ArticleSummary",
                                                SortId = 20,
                                                Component = new ArticleText { Text = Model.Item.GetString("Summary") },
                                                Design = new Design {
                                                    RenderType = RenderType.Column,
                                                    Size = "12",
                                                    CssClass = "u-padding--lg"
                                                }
                                            },
                                            new Block {
                                                Id = "ArticleText",
                                                SortId = 30,
                                                Component = new ArticleText { Text = Model.Item.GetString("Text") },
                                                Design = new Design {
                                                    RenderType = RenderType.Column,
                                                    Size = "12",
                                                    CssClass = "u-padding--lg"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            new Block {
                                Id = "ArticleInfo",
                                SortId = 30,
                                Design = new Design {
                                    RenderType = RenderType.Column,
                                    Size = "4"
                                },
                                BlocksList = new List<Block> {
                                    new Block {
                                        Id = "ArticleInfoRow",
                                        SortId = 10,
                                        Design = new Design {
                                            RenderType = RenderType.Row
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    };
    articlePage.Add(articleContainer);

    //Added components for the info area

    if (speaker != null)
    {
        Block articleLogo = new Block
        {
            Id = "ArticleLogo",
            SortId = 10,
            Component = new ArticleImage
            {
                Image = new Image
                {
                    Path = speaker.Image,
                    Title = speaker.FirstName + " " + speaker.LastName,
                    Style = ImageStyle.Ball,
                    ImageDefault = new ImageSettings
                    {
                        Height = 280,
                        Width = 280,
                        Crop = 5
                    }
                }
            },
            Design = new Design
            {
                RenderType = RenderType.Column,
                Size = "12",
                CssClass = "u-border-bottom"
            }
        };
        articlePage.Add("ArticleInfoRow", articleLogo);
    }

    Block articleInfoTableContainer = new Block
    {
        Id = "ArticleInfoTableContainer",
        SortId = 20,
        Design = new Design
        {
            RenderType = RenderType.Column,
            Size = "12"
        }
    };
    articlePage.Add("ArticleInfoRow", articleInfoTableContainer);

    List<ArticleInfoTableRow> infoTableContent = new List<ArticleInfoTableRow>();

    if (speaker != null)
    {
        string speakerInfo = "<div>" + speaker.FirstName + " " + speaker.LastName + "</div><div>" + speaker.JobTitle + "</div><div>" + speaker.Email + "</div><div>" + speaker.Company + "</div>";
        infoTableContent.Add(new ArticleInfoTableRow { Title = Translate("Speaker"), SubTitle = "", Icon = "fas fa-user" });
    }

    if (startDate.Year != 1)
    {
        infoTableContent.Add(new ArticleInfoTableRow { Title = Translate("Time"), SubTitle = startDate.ToString("MMM dd, HH:mm"), Icon = "far fa-clock" });
    }

    if ((!string.IsNullOrEmpty(eventStreetAddress) ||
        !string.IsNullOrEmpty(eventAddressLocality) ||
        !string.IsNullOrEmpty(eventAddressRegion) ||
        !string.IsNullOrEmpty(eventAddressCountry)))
    {
        infoTableContent.Add(new ArticleInfoTableRow { Title = Translate("Location"), SubTitle = "<div>" + eventLocationName + "</div><small>" + eventPostalCode + "," + eventStreetAddress + "</small><br /><small>" + string.Join(", ", (new[] { eventAddressLocality, eventAddressRegion, eventAddressCountry }).Where(x => !string.IsNullOrEmpty(x))) + "</small>", Icon = "fas fa-globe" });
    }

    Block articleInfoTable = new Block
    {
        Id = "ArticleInfoTable",
        SortId = 10,
        Component = new ArticleInfoTable { Rows = infoTableContent }
    };
    articlePage.Add("ArticleInfoRow", articleInfoTable);

    Block articleSignUp = new Block
    {
        Id = "ArticleSignUp",
        SortId = 20,
        Template = SignUp()
    };
    articlePage.Add("ArticleInfoRow", articleSignUp);
}

@Include("PageBlocks/EventArticle/Custom__Blocks.cshtml")


@* The @RenderBlockList base helper is included in Components/GridBuilder.cshtml *@
@RenderBlockList(articlePage.BlocksRoot.BlocksList)

@if (!string.IsNullOrEmpty(eventStreetAddress) &&
     !string.IsNullOrEmpty(eventAddressLocality) &&
     !string.IsNullOrEmpty(eventPostalCode) &&
     !string.IsNullOrEmpty(eventAddressCountry) &&
     startDate.Year != 1 &&
     !string.IsNullOrEmpty(eventName))
{
    <script type="application/ld+json">
        {
          "@@context": "http://schema.org",
          "@@type": "Event",
          "name": "@eventName",
          "startDate": "@startDate.ToString("yyyy-MM-ddTHH:mm")",
          "location": {
            "@@type": "Place",
            @if (!string.IsNullOrEmpty(eventLocationName))
            {    
                <text>"name": "@eventLocationName",</text>
            }
            "address": {
              "@@type": "PostalAddress",
              "streetAddress": "@eventStreetAddress",
              "addressLocality": "@eventAddressLocality",
              "postalCode": "@eventPostalCode",
              "addressRegion": "@eventAddressRegion",
              "addressCountry": "@eventAddressCountry"
            }
          },
          @if (image != null)
          {    
              <text>"image": [
                "@image1x1",
                "@image4x3",
                "@image16x9"
              ],</text>
          }
          "description": "@Model.Item.GetString("Summary")"
          @if (speaker != null)
          {
              <text>,"performer": {
                "@@type": "PerformingGroup",
                "name": "@speaker.FirstName @speaker.LastName"
              }
              </text>
          }
        }
    </script>
}

@helper SignUp() {
    int signUpForEventPageId = GetPageIdByNavigationTag("SignUpForEventPage");
    string signUpLink = "";

    if (Model.Item.GetString("SignUp") == "External")
    {
        signUpLink = Model.Item.GetString("SignUpLink");
    }
    else
    {
        signUpLink = "/Default.aspx?Id=" + signUpForEventPageId + "&eventId=" + Model.Item.Id + "&eventName=" + HttpUtility.UrlEncode(Model.Item.GetString("Title"));
    }

    @Render(new Button { Href = signUpLink, ButtonLayout = ButtonLayout.Primary, Title = Translate("Sign up for the event here") })
}
