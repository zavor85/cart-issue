@inherits RazorTemplateBase<RazorTemplateModel<Template>>
@using Dynamicweb.Rendering;
@using Dynamicweb.Extensibility
@using Dynamicweb.Content
@using Dynamicweb.Security;
@using Dynamicweb.Ecommerce.Orders

@MasterPageFile("../../EmailMaster.cshtml")
@Include("../../EmailHelpers.cshtml")

<table bgcolor="#FFFFFF" border="0" cellpadding="0" cellspacing="0" width="500" id="emailBody">
    @RenderHeaderSection()
    @RenderCustomerDetails()
    @RenderOrderList()
    @RenderGiftcards()
    @RenderComments()
    @RenderFooterSection()
</table>

@* CONTENT HELPERS *@

@helper RenderHeaderSection()
{
    @RenderHeaderImage();

    Column info = new Column();
    info.header = Translate("Order information");
    info.text.Add(Translate("Order no.") + " " + GetString("Ecom:Order.ID") + " - " + GetString("Ecom:Order.Completed"));
    info.align = "center";

    @CreateRow(info);

    @CreateRowDivider();

    @RenderRecurringDetails();
}

@helper RenderCustomerDetails()
{
    @RenderAddresses(Translate("Billing address"), Translate("Shipping address"), "Order");
}

@helper RenderOrderList()
{
    foreach (LoopItem orderline in GetLoop("OrderLines").Where(o => o.GetInteger("Ecom:Order:OrderLine.Type") != (int)OrderLineType.Tax).ToList())
    {
        @RenderOrderline(orderline);

        @CreateRowDivider();
    }

    @RenderSummary();
    @RenderTotal();
}


@helper RenderSummary()
{
    bool hasTaxSettings = Dynamicweb.Rapido.Services.Countries.HasTaxSettings(GetString("Ecom:Order.ID"));

    Column summaryLeft = new Column();
    summaryLeft.text.Add(Translate("Total"));
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.PaymentMethod")))
    {
        summaryLeft.text.Add(Translate("Payment method") + ": " + Translate(GetString("Ecom:Order.PaymentMethod")));
    }
    else
    {
        summaryLeft.text.Add(Translate("Payment method"));
    }
    if (!string.IsNullOrEmpty(GetString("Ecom:Order.ShippingMethod")))
    {
        summaryLeft.text.Add(Translate("Shipping method") + ": " + Translate(GetString("Ecom:Order.ShippingMethod")));
    }
    else
    {
        summaryLeft.text.Add(Translate("Shipping method"));
    }
    if (!hasTaxSettings)
    {
        summaryLeft.text.Add(Translate("VAT"));
    }

    Column summaryRight = new Column();
    summaryRight.text.Add(GetString("Ecom:Order.Price.PriceWithoutVATFormatted"));
    summaryRight.text.Add(GetString("Ecom:Order.PaymentFee.PriceFormatted"));
    summaryRight.text.Add(GetString("Ecom:Order.ShippingFee.PriceFormatted"));
    if (!hasTaxSettings)
    {
        summaryRight.text.Add(GetString("Ecom:Order.Price.VATFormatted"));
    }
    summaryRight.align = "right";

    @CreateRow(summaryLeft, summaryRight);
}


@helper RenderTotal()
{
    Column totalsLeft = new Column();
    totalsLeft.subheader = Translate("Total");

    Column totalsRight = new Column();
    totalsRight.subheader = GetString("Ecom:Order.Price.PriceWithVATFormatted");
    totalsRight.align = "right";

    @CreateRow(totalsLeft, totalsRight, new RowSettings { backgroundColor = "#e4e4e4" });
}