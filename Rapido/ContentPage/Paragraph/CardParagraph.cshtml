@inherits Dynamicweb.Rendering.ViewModelTemplate<Dynamicweb.Frontend.ParagraphViewModel>
@using Dynamicweb.Frontend
@using Dynamicweb.Content.Items
@using Dynamicweb
@using Dynamicweb.Rapido.Blocks.Components
@using Dynamicweb.Rapido.Blocks.Components.General

@Include("ParagraphBase.cshtml")

@functions {
    public string GenerateRgba(string color, string opacity)
    {
        color = color.Replace("#", "");
        if (color.Length == 6) {
            return "rgba(" + Convert.ToInt32(color.Substring(0, 2), 16) + ", " + Convert.ToInt32(color.Substring(2, 2), 16) + ", " + Convert.ToInt32(color.Substring(4, 2), 16) + ", " + opacity + ");";
        } else {
            return Convert.ToInt16(color).ToString();
        }
    }
}

@{ 
    string link = !string.IsNullOrEmpty(Model.Item.GetString("Link")) ? Model.Item.GetString("Link") : "";
    string linkTarget = link.Contains("http") ? "_blank" : "_self";
}

@if (!string.IsNullOrEmpty(link)) {
    <a href="@link" target="@linkTarget" class="u-overlay">&nbsp;</a>
     @RenderTheContent()
} else {
    @RenderTheContent()
}

@helper RenderTheContent(){ 
    var colorService = new ColorSwatchService();

    string innerPadding = Model.Item.GetList("Padding") != null ? " padding-size-" + Model.Item.GetList("Padding").SelectedValue.ToLower() : "";
    innerPadding += Model.Item.GetList("PaddingPosition") != null ? " padding-position-" + Model.Item.GetList("PaddingPosition").SelectedValue.ToLower() : "";
    string outerMargin = Model.Item.GetList("Margin") != null ? " margin-" + Model.Item.GetList("Margin").SelectedValue.ToLower() : "";
    string outerMarginPosition = Model.Item.GetList("MarginPosition") != null ? " margin-position-" + Model.Item.GetList("MarginPosition").SelectedValue.ToLower() : "";

    string cardBackgroundColor = Model.Item.GetString("CardBackgroundColor") != null ? Model.Item.GetString("CardBackgroundColor") : "";
    cardBackgroundColor = !cardBackgroundColor.Contains("#") ? colorService.GetHexColor(Pageview.AreaID, cardBackgroundColor) : cardBackgroundColor;
    string styles = "background-color: " + cardBackgroundColor + ";";
    if (!string.IsNullOrEmpty(Model.Item.GetString("Image"))) {
        int cropMode = !string.IsNullOrEmpty(Convert.ToString(Model.Item.GetList("ImageCrop"))) ? Convert.ToInt32(Model.Item.GetList("ImageCrop").SelectedValue) : 0;

        Image image = new Image
        {
            Path = Model.Item.GetFile("Image") != null ? Model.Item.GetFile("Image").Path : "",
            CssClass = "background-image__cover",
            ImageDefault = new ImageSettings
            {
                Crop = cropMode,
                Height = 845,
                Width = 1920
            },
            ImageMedium = new ImageSettings
            {
                Crop = cropMode,
                Height = 450,
                Width = 1024
            },
            ImageSmall = new ImageSettings
            {
                Crop = cropMode,
                Height = 544,
                Width = 640
            }
        };

        image.FilterPrimary = !string.IsNullOrEmpty(Model.Item.GetList("ImageFilterPrimary").SelectedValue) ? (ImageFilter) Enum.Parse(typeof(ImageFilter), Model.Item.GetList("ImageFilterPrimary").SelectedValue.Replace("-", ""), true) : ImageFilter.None;
        image.FilterSecondary = !string.IsNullOrEmpty(Model.Item.GetList("ImageFilterSecondary").SelectedValue) ? (ImageFilter) Enum.Parse(typeof(ImageFilter), Model.Item.GetList("ImageFilterSecondary").SelectedValue.Replace("-", ""), true) : ImageFilter.None;

        if (!string.IsNullOrEmpty(Model.Item.GetString("ColorForTheFilter"))) {
            image.FilterColor = Model.Item.GetString("ColorForTheFilter").StartsWith("#") ? GenerateRgba(Model.Item.GetString("ColorForTheFilter"), "0.3") : "";
        }

        

        if ((Model.Item.GetString("Title")).Contains("DisableLazyLoad")) {
            image.DisableLazyLoad = true;
        }



        <div class="background-image dw-mod">
            <div class="background-image__wrapper dw-mod">
                @Render(image)
            </div> 
        </div>
    }

    <div class="content-row__item__body @innerPadding @outerMargin @outerMarginPosition card-paragraph dw-mod" style="@styles">
        @if (!string.IsNullOrEmpty(Model.Item.GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetString("Text"))) {
            if (!Model.Item.GetBoolean("HideTitle")) { 
                @Render(new Heading { Title = Model.Item.GetString("Title"), CssClass = "u-no-margin", Level = 2 })
            }
            @Render(new Text { Content = Model.Item.GetString("Text") })
        }

        @if (!string.IsNullOrEmpty(Model.Item.GetItem("ButtonOne").GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetItem("ButtonTwo").GetString("Title")) || !string.IsNullOrEmpty(Model.Item.GetItem("ButtonThree").GetString("Title"))) {
            <div>
                @ParagraphButton(Model.Item.GetItem("ButtonOne")) 
                @ParagraphButton(Model.Item.GetItem("ButtonTwo")) 
                @ParagraphButton(Model.Item.GetItem("ButtonThree")) 
            </div>
        }
    </div>
}


@helper ParagraphButton(ItemViewModel item) { 
    if (item != null) {
        if (!string.IsNullOrEmpty(item.GetString("Title"))) {
            Button button = new Button {
                Title = item.GetString("Title"),
                Href = item.GetString("Link"),
                CssClass = "u-no-margin",
                ButtonLayout = (ButtonLayout)System.Enum.Parse(typeof(ButtonLayout), char.ToUpper(item.GetList("Layout").SelectedValue[0]) + item.GetList("Layout").SelectedValue.Substring(1))
            };

            if (!string.IsNullOrEmpty(item.GetString("Icon"))) {
                button.Icon = new Icon { 
                    CssClass = item.GetString("Icon")
                };
            }

            @Render(button)
        }    
    }
}




